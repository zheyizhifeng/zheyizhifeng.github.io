[{"title":"LeetCode On VS Code","url":"/2020/10/28/LeetCode%20On%20VS%20Code/","content":"<h1 id=\"如何优雅的在VS-Code刷Leetcode算法题库？\"><a href=\"#如何优雅的在VS-Code刷Leetcode算法题库？\" class=\"headerlink\" title=\"如何优雅的在VS Code刷Leetcode算法题库？\"></a>如何优雅的在VS Code刷Leetcode算法题库？</h1><h2 id=\"Requirements-要求\"><a href=\"#Requirements-要求\" class=\"headerlink\" title=\"Requirements / 要求\"></a>Requirements / 要求</h2><p><strong>VS Code和Node的版本要求</strong></p>\n<ul>\n<li><a href=\"https://code.visualstudio.com/\"><em>VS Code 1.30.1+</em></a></li>\n<li><a href=\"https://nodejs.org/en/\"><em>Node.js 8+</em></a></li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"Quick-Start-快速开始\"><a href=\"#Quick-Start-快速开始\" class=\"headerlink\" title=\"Quick Start / 快速开始\"></a>Quick Start / 快速开始</h2><p>首先，我们需要给VS Code安装一个<code>leetcode</code>插件</p>\n<p><strong>安装方法：</strong></p>\n<blockquote>\n<p>打开<code>VS Code</code> -&gt; 左边操作栏找到<code>Extensions</code> -&gt; 搜索插件名称：<code>leetcode</code> -&gt; <code>install</code></p>\n</blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode\"><em>VS Code LeetCode在线下载地址</em></a></p>\n<h2 id=\"Features-功能\"><a href=\"#Features-功能\" class=\"headerlink\" title=\"Features / 功能\"></a>Features / 功能</h2><h3 id=\"登陆登出\"><a href=\"#登陆登出\" class=\"headerlink\" title=\"登陆登出\"></a>登陆登出</h3><ul>\n<li><p>点击<code>LeetCode Explorer</code>中的<code>Sign in to LeetCode</code> 即可登入。</p>\n</li>\n<li><p>也可以使用快捷键 <code>Ctrl/Cmd+Shift+P</code> 唤起下列命令登入或利用cookie登入或登出:</p>\n<ul>\n<li><strong>LeetCode: Sign in</strong></li>\n<li><strong>LeetCode: Sign in (by cookie)</strong></li>\n<li><strong>LeetCode: Sign out</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"选择题目\"><a href=\"#选择题目\" class=\"headerlink\" title=\"选择题目\"></a>选择题目</h3><ul>\n<li>直接点击题目或者在 <code>LeetCode Explorer</code> 中右键题目并选择 <code>Preview Problem</code> 可查看题目描述</li>\n<li>选择 <code>Show Problem</code> 可直接进行答题。</li>\n</ul>\n<blockquote>\n<p>注意：可以通过更新配置项 <code>leetcode.workspaceFolder</code> 来指定保存题目文件所用的工作区路径。默认工作区路径为：**$HOME/.leetcode/**。<br>注意：可以通过更新配置项 <code>leetcode.showCommentDescription</code> 来指定是否要在注释中包含题目描述。<br>注意：可以通过 <code>LeetCode: Switch Default Language</code> 命令变更答题时默认使用编程语言。</p>\n</blockquote>\n<h3 id=\"编辑器快捷方式\"><a href=\"#编辑器快捷方式\" class=\"headerlink\" title=\"编辑器快捷方式\"></a>编辑器快捷方式</h3><ul>\n<li><p><code>Submit</code>: 提交你的答案至 <code>LeetCode</code>；</p>\n</li>\n<li><p><code>Test</code>: 用给定的测试用例测试你的答案；</p>\n</li>\n<li><p><code>Solution</code>: 显示该问题的高票解答；</p>\n</li>\n<li><p><code>Description</code>: 显示该问题的题目描述。</p>\n</li>\n</ul>\n<blockquote>\n<p><em>注意：可以通过 <code>leetcode.editor.shortcuts</code> 配置项来定制需要激活的快捷方式。默认情况下只有 <code>Submit</code> 和 <code>Test</code> 会被激活。</em></p>\n</blockquote>\n<h3 id=\"通过关键字搜索题目\"><a href=\"#通过关键字搜索题目\" class=\"headerlink\" title=\"通过关键字搜索题目\"></a>通过关键字搜索题目</h3><ul>\n<li>点击 <code>LeetCode Explorer</code> 导航栏中的搜索按钮可按照关键字搜索题目。</li>\n</ul>\n<h2 id=\"Problem-问题\"><a href=\"#Problem-问题\" class=\"headerlink\" title=\"Problem / 问题\"></a>Problem / 问题</h2><h3 id=\"国内无法登陆海外版问题\"><a href=\"#国内无法登陆海外版问题\" class=\"headerlink\" title=\"国内无法登陆海外版问题\"></a>国内无法登陆海外版问题</h3><p><strong>如何解决VS Code的<code>vscode-leetcode</code>插件无法登陆海外版的问题？</strong></p>\n<blockquote>\n<p><em>注意：<a href=\"https://leetcode.com/\">登陆的endpoint(端点)：https://leetcode.com（并非中国leetcode-cn.com社区）</a></em></p>\n</blockquote>\n<p><strong>几个解决方案：</strong></p>\n<p>1、切换 LeetCode 版本为中国版，点击<code>Switch Endpoint</code>切换为<code>leetcode-cn.com</code>(中国社区版)<br>2、用<code>leetcode-cli</code>命令行工具进行登陆<br>3、正常输入用户名和密码无法登陆的情况下，通过获取<a href=\"https://leetcode.com/\"><em>leetcode.com</em></a>的<code>Cookies</code>信息进行登陆。</p>\n<p><strong>具体实现步骤：</strong></p>\n<ul>\n<li>先保证退出账户</li>\n<li>确保当前激活的节点为<code>leetcode.com</code>（而非<code>leetcode-cn.com</code>）</li>\n<li>访问端点：<a href=\"https://leetcode.com/\"><em>https://leetcode.com</em></a>并打开Chrome开发者工具，选择<code>Network</code> -&gt; 选择<code>XHR</code></li>\n<li>Web端登陆账号密码后，并点击problems按钮获取leetcode的session和csrf token信息</li>\n<li>找到<code>all</code>这个<code>api</code>接口：<code>https://leetcode.com/api/problems/all/</code>，并copy完整的<code>Cookies</code></li>\n<li>打卡VS Code用快捷键：<code>ctrl + shift + p</code> 输入leetcode，选择<code>Sign In by Cookie</code></li>\n<li>输入邮箱 -&gt; paste 刚刚从览器copy的<code>cookies</code>信息 -&gt; ok,done. Start coding…</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://github.com/jdneo/vscode-leetcode\"><em>vscode-leetcode Github</em></a></li>\n<li><a href=\"https://github.com/jdneo/vscode-leetcode/blob/master/docs/README_zh-CN.md\"><em>vscode-leetcode 中文使用教程</em></a></li>\n<li><a href=\"https://github.com/jdneo/vscode-leetcode/issues/478\"><em>github issues: Failed to log in with a leetcode.com account</em></a></li>\n<li><a href=\"https://github.com/jdneo/vscode-leetcode/issues/478\"><em>浏览器获取cookies的方法</em></a></li>\n</ul>\n","categories":["Tools","LeetCode"],"tags":["Tools","Vscode扩展","Leetcode","算法"]},{"title":"Oh My Zsh!","url":"/2020/10/11/oh-my-zsh/","content":"<h1 id=\"查看已有终端\"><a href=\"#查看已有终端\" class=\"headerlink\" title=\"查看已有终端\"></a>查看已有终端</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /etc/shells\n\n<span class=\"token comment\"># /bin/bash</span>\n<span class=\"token comment\"># /bin/csh</span>\n<span class=\"token comment\"># /bin/dash</span>\n<span class=\"token comment\"># /bin/ksh</span>\n<span class=\"token comment\"># /bin/sh</span>\n<span class=\"token comment\"># /bin/tcsh</span>\n<span class=\"token comment\"># /bin/zsh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<a id=\"more\"></a>\n\n<h1 id=\"查看当前正在使用的终端\"><a href=\"#查看当前正在使用的终端\" class=\"headerlink\" title=\"查看当前正在使用的终端\"></a>查看当前正在使用的终端</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span>\n\n<span class=\"token comment\"># /bin/bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"安装-zsh-终端\"><a href=\"#安装-zsh-终端\" class=\"headerlink\" title=\"安装 zsh 终端\"></a>安装 zsh 终端</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># MacOS</span>\nbrew <span class=\"token function\">install</span> <span class=\"token function\">zsh</span>\n\n<span class=\"token comment\"># Ubuntu, Debian, Windows 10 WSL</span>\n<span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">zsh</span>\n\n<span class=\"token comment\"># CentOS</span>\nyum -y <span class=\"token function\">install</span> <span class=\"token function\">zsh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"切换终端为-zsh\"><a href=\"#切换终端为-zsh\" class=\"headerlink\" title=\"切换终端为 zsh\"></a>切换终端为 zsh</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chsh -s <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">which</span> <span class=\"token function\">zsh</span><span class=\"token variable\">)</span></span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">whoami</span><span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"安装-oh-my-zsh\"><a href=\"#安装-oh-my-zsh\" class=\"headerlink\" title=\"安装 oh-my-zsh\"></a>安装 oh-my-zsh</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># curl 方式安装</span>\n<span class=\"token function\">sh</span> -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class=\"token variable\">)</span></span>\"</span>\n\n<span class=\"token comment\"># wget 方式安装</span>\n<span class=\"token function\">sh</span> -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">wget</span> https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -<span class=\"token variable\">)</span></span>\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>安装完成以后效果如图</p>\n<p><img src=\"https://www.hildeberto.com/images/posts/oh-my-zsh.png\"></p>\n<h1 id=\"修改主题以及配置\"><a href=\"#修改主题以及配置\" class=\"headerlink\" title=\"修改主题以及配置\"></a>修改主题以及配置</h1><p><strong>oh-my-zsh</strong> 的配置文件位于 <code>~/.zshrc</code>，可以进行自定义的修改配置。</p>\n<h2 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h2><p><img src=\"https://cdn.jsdelivr.net/gh/zheyizhifeng/picture_repo/images/image-20201012111742916.png\"></p>\n<p><strong>ZSH_THEME</strong> 字段为主题字段，默认为 <strong>robbyrussell</strong>，可以自由更改，可选的主题参考 <code>~/.oh-my-zsh/themes/</code> 目录。</p>\n<h2 id=\"插件配置\"><a href=\"#插件配置\" class=\"headerlink\" title=\"插件配置\"></a>插件配置</h2><p>本文只介绍 <strong>3</strong> 个较为常用的 <strong>oh-my-zsh</strong> 插件</p>\n<h3 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h3><h4 id=\"zsh-autosuggestions\"><a href=\"#zsh-autosuggestions\" class=\"headerlink\" title=\"zsh-autosuggestions\"></a>zsh-autosuggestions</h4><p>输入命令时可提示自动补全</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/zheyizhifeng/picture_repo/images/image-20201012151917520.png\"></p>\n<h4 id=\"zsh-syntax-highlighting\"><a href=\"#zsh-syntax-highlighting\" class=\"headerlink\" title=\"zsh-syntax-highlighting\"></a>zsh-syntax-highlighting</h4><p>常用的命令会高亮显示，命令错误显示红色</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/zheyizhifeng/picture_repo/images/image-20201012151551507.png\"></p>\n<h4 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h4><p>默认启用，支持各种 <strong>git</strong> 命令简写，完整简写列表参考 <code>~/.oh-my-zsh/plugins/git/git.plugin.zsh</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/zheyizhifeng/picture_repo/images/image-20201011233927923.png\"></p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 安装 zsh-autosuggestions</span>\n<span class=\"token function\">git</span> clone git://github.com/zsh-users/zsh-autosuggestions <span class=\"token variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions\n\n<span class=\"token comment\"># 安装 zsh-syntax-highlighting</span>\n<span class=\"token function\">git</span> clone git://github.com/zsh-users/zsh-syntax-highlighting <span class=\"token variable\">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting\n\n<span class=\"token comment\"># 安装后的插件位于~/.oh-my-zsh/custom/plugins/ 目录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>安装插件以后还需要更新 <code>~/.zshrc</code> 配置文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/zheyizhifeng/picture_repo/images/image-20201012112022558.png\"></p>\n<h1 id=\"保存配置后进行更新\"><a href=\"#保存配置后进行更新\" class=\"headerlink\" title=\"保存配置后进行更新\"></a>保存配置后进行更新</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下图为 <strong>agnoster</strong> 主题的效果</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/zheyizhifeng/picture_repo/images/image-20201012152422118.png\"></p>\n<p> <strong>注意</strong>：在使用 <strong>agnoster</strong> 主题时，<strong>部分符号在终端无法正常显示</strong>，还需<strong>安装</strong> <a href=\"https://github.com/powerline/fonts\">Powerline fonts</a> <strong>字体</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># clone</span>\n<span class=\"token function\">git</span> clone https://github.com/powerline/fonts.git --depth<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token comment\"># install</span>\n<span class=\"token builtin class-name\">cd</span> fonts\n./install.sh\n<span class=\"token comment\"># clean-up a bit</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token function\">rm</span> -rf fonts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","categories":["Tools","Terminal"],"tags":["Tools","Terminal","oh-my-zsh"]},{"title":"SSH 教程","url":"/2021/10/12/SSH%20%E6%95%99%E7%A8%8B/","content":"<p>SSH 是 Linux 系统的登录工具，现在广泛用于服务器登录和各种加密通信。<br>本教程介绍 SSH（主要是它的实现 OpenSSH）的概念和基本用法，也可以当作手册查询。</p>\n<h1 id=\"SSH-基本知识\"><a href=\"#SSH-基本知识\" class=\"headerlink\" title=\"SSH 基本知识\"></a>SSH 基本知识</h1><p>SSH（Secure Shell 的缩写）是一种网络协议，用于加密两台计算机之间的通信，并且支持各种身份验证机制。</p>\n<p>实务中，它主要用于保证远程登录和远程通信的安全，任何网络服务都可以用这个协议来加密。</p>\n<h2 id=\"SSH-是什么\"><a href=\"#SSH-是什么\" class=\"headerlink\" title=\"SSH 是什么\"></a>SSH 是什么</h2><p>历史上，网络主机之间的通信是不加密的，属于明文通信。这使得通信很不安全，一个典型的例子就是服务器登录。登录远程服务器的时候，需要将用户输入的密码传给服务器，如果这个过程是明文通信，就意味着传递过程中，线路经过的中间计算机都能看到密码，这是很可怕的。</p>\n<p>SSH 就是为了解决这个问题而诞生的，它能够加密计算机之间的通信，保证不被窃听或篡改。它还能对操作者进行认证（authentication）和授权（authorization）。明文的网络协议可以套用在它里面，从而实现加密。</p>\n<a id=\"more\"></a>\n<h2 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h2><p>1995年，芬兰赫尔辛基工业大学的研究员 Tatu Ylönen 设计了 SSH 协议的第一个版本（现称为 SSH 1），同时写出了第一个实现（称为 SSH1）。</p>\n<p>当时，他所在的大学网络一直发生密码嗅探攻击，他不得不为服务器设计一个更安全的登录方式。写完以后，他就把这个工具公开了，允许其他人免费使用。</p>\n<p>SSH 可以替换 rlogin、TELNET、FTP 和 rsh 这些不安全的协议，所以大受欢迎，用户快速增长，1995年底已经发展到五十个国家的20,000个用户。SSH 1 协议也变成 IETF 的标准文档。</p>\n<p>1995年12月，由于客服需求越来越大，Tatu Ylönen 就成立了一家公司 SCS，专门销售和开发 SSH。这个软件的后续版本，逐渐从免费软件变成了专有的商业软件。</p>\n<p>SSH 1 协议存在一些安全漏洞，所以1996年又提出了 SSH 2 协议（或者称为 SSH 2.0）。这个协议与1.0版不兼容，在1997年进行了标准化，1998年推出了软件实现 SSH2。但是，官方的 SSH2 软件是一个专有软件，不能免费使用，而且 SSH1 的有些功能也没有提供。</p>\n<p>1999年，OpenBSD 的开发人员决定写一个 SSH 2 协议的开源实现，这就是 OpenSSH 项目。该项目最初是基于 SSH 1.2.12 版本，那是当时 SSH1 最后一个开源版本。但是，OpenSSH 很快就完全摆脱了原始的官方代码，在许多开发者的参与下，按照自己的路线发展。OpenSSH 随 OpenBSD 2.6 版本一起提供，以后又移植到其他操作系统，成为最流行的 SSH 实现。目前，Linux 的所有发行版几乎都自带 OpenSSH。</p>\n<p>现在，SSH-2 有多种实现，既有免费的，也有收费的。本书的内容主要是针对 OpenSSH。</p>\n<h2 id=\"SSH-架构\"><a href=\"#SSH-架构\" class=\"headerlink\" title=\"SSH 架构\"></a>SSH 架构</h2><p>SSH 的软件架构是服务器-客户端模式（Server - Client）。在这个架构中，SSH 软件分成两个部分：向服务器发出请求的部分，称为客户端（client），OpenSSH 的实现为 ssh；接收客户端发出的请求的部分，称为服务器（server），OpenSSH 的实现为 sshd。</p>\n<p>本教程约定，大写的 SSH 表示协议，小写的 ssh 表示客户端软件。</p>\n<p>另外，OpenSSH 还提供一些辅助工具软件（比如 ssh-keygen 、ssh-agent）和专门的客户端工具（比如 scp 和 sftp），这个教程也会予以介绍。</p>\n<h1 id=\"SSH-证书登录\"><a href=\"#SSH-证书登录\" class=\"headerlink\" title=\"SSH 证书登录\"></a>SSH 证书登录</h1><p>SSH 是服务器登录工具，一般情况下都采用密码登录或密钥登录。</p>\n<p>但是，SSH 还有第三种登录方法，那就是证书登录。某些情况下，它是更合理、更安全的登录方法，本文就介绍这种登录方法。</p>\n<h2 id=\"非证书登录的缺点\"><a href=\"#非证书登录的缺点\" class=\"headerlink\" title=\"非证书登录的缺点\"></a>非证书登录的缺点</h2><p>密码登录和密钥登录，都有各自的缺点。</p>\n<p>密码登录需要输入服务器密码，这非常麻烦，也不安全，存在被暴力破解的风险。</p>\n<p>密钥登录需要服务器保存用户的公钥，也需要用户保存服务器公钥的指纹。这对于多用户、多服务器的大型机构很不方便，如果有员工离职，需要将他的公钥从每台服务器删除。</p>\n<h2 id=\"证书登录是什么？\"><a href=\"#证书登录是什么？\" class=\"headerlink\" title=\"证书登录是什么？\"></a>证书登录是什么？</h2><p>证书登录就是为了解决上面的缺点而设计的。它引入了一个证书颁发机构（Certificate Authority，简称 CA），对信任的服务器颁发服务器证书，对信任的用户颁发用户证书。</p>\n<p>登录时，用户和服务器不需要提前知道彼此的公钥，只需要交换各自的证书，验证是否可信即可。</p>\n<p>证书登录的主要优点有两个：（1）用户和服务器不用交换公钥，这更容易管理，也具有更好的可扩展性。（2）证书可以设置到期时间，而公钥没有到期时间。针对不同的情况，可以设置有效期很短的证书，进一步提高安全性。</p>\n<h2 id=\"证书登录的流程\"><a href=\"#证书登录的流程\" class=\"headerlink\" title=\"证书登录的流程\"></a>证书登录的流程</h2><p>SSH 证书登录之前，如果还没有证书，需要生成证书。具体方法是：（1）用户和服务器都将自己的公钥，发给 CA；（2）CA 使用服务器公钥，生成服务器证书，发给服务器；（3）CA 使用用户的公钥，生成用户证书，发给用户。</p>\n<p>有了证书以后，用户就可以登录服务器了。整个过程都是 SSH 自动处理，用户无感知。</p>\n<p>第一步，用户登录服务器时，SSH 自动将用户证书发给服务器。</p>\n<p>第二步，服务器检查用户证书是否有效，以及是否由可信的 CA 颁发。证实以后，就可以信任用户。</p>\n<p>第三步，SSH 自动将服务器证书发给用户。</p>\n<p>第四步，用户检查服务器证书是否有效，以及是否由信任的 CA 颁发。证实以后，就可以信任服务器。</p>\n<p>第五步，双方建立连接，服务器允许用户登录。</p>\n<h2 id=\"生成-CA-的密钥\"><a href=\"#生成-CA-的密钥\" class=\"headerlink\" title=\"生成 CA 的密钥\"></a>生成 CA 的密钥</h2><p>证书登录的前提是，必须有一个 CA，而 CA 本质上就是一对密钥，跟其他密钥没有不同，CA 就用这对密钥去签发证书。</p>\n<p>虽然 CA 可以用同一对密钥签发用户证书和服务器证书，但是出于安全性和灵活性，最好用不同的密钥分别签发。所以，CA 至少需要两对密钥，一对是签发用户证书的密钥，假设叫做<code>user_ca</code>，另一对是签发服务器证书的密钥，假设叫做<code>host_ca</code>。</p>\n<p>使用下面的命令，生成<code>user_ca</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 生成 CA 签发用户证书的密钥</span>\n$ ssh-keygen -t rsa -b <span class=\"token number\">4096</span> -f ~/.ssh/user_ca -C user_ca<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面的命令会在<code>~/.ssh</code>目录生成一对密钥：<code>user_ca</code>（私钥）和<code>user_ca.pub</code>（公钥）。</p>\n<p>这个命令的各个参数含义如下。</p>\n<ul>\n<li><code>-t rsa</code>：指定密钥算法 RSA。</li>\n<li><code>-b 4096</code>：指定密钥的位数是4096位。安全性要求不高的场合，这个值可以小一点，但是不应小于1024。</li>\n<li><code>-f ~/.ssh/user_ca</code>：指定生成密钥的位置和文件名。</li>\n<li><code>-C user_ca</code>：指定密钥的识别字符串，相当于注释，可以随意设置。</li>\n</ul>\n<p>使用下面的命令，生成<code>host_ca</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 生成 CA 签发服务器证书的密钥</span>\n$ ssh-keygen -t rsa -b <span class=\"token number\">4096</span> -f host_ca -C host_ca<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面的命令会在<code>~/.ssh</code>目录生成一对密钥：<code>host_ca</code>（私钥）和<code>host_ca.pub</code>（公钥）。</p>\n<p>现在，<code>~/.ssh</code>目录应该至少有四把密钥。</p>\n<ul>\n<li><code>~/.ssh/user_ca</code></li>\n<li><code>~/.ssh/user_ca.pub</code></li>\n<li><code>~/.ssh/host_ca</code></li>\n<li><code>~/.ssh/host_ca.pub</code></li>\n</ul>\n<h2 id=\"CA-签发服务器证书\"><a href=\"#CA-签发服务器证书\" class=\"headerlink\" title=\"CA 签发服务器证书\"></a>CA 签发服务器证书</h2><p>有了 CA 以后，就可以签发服务器证书了。</p>\n<p>签发证书，除了 CA 的密钥以外，还需要服务器的公钥。一般来说，SSH 服务器（通常是<code>sshd</code>）安装时，已经生成密钥<code>/etc/ssh/ssh_host_rsa_key</code>了。如果没有的话，可以用下面的命令生成。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> ssh-keygen -f /etc/ssh/ssh_host_rsa_key -b <span class=\"token number\">4096</span> -t rsa<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令会在<code>/etc/ssh</code>目录，生成<code>ssh_host_rsa_key</code>（私钥）和<code>ssh_host_rsa_key.pub</code>（公钥）。然后，需要把服务器公钥<code>ssh_host_rsa_key.pub</code>，复制或上传到 CA 所在的服务器。</p>\n<p>上传以后，CA 就可以使用密钥<code>host_ca</code>为服务器的公钥<code>ssh_host_rsa_key.pub</code>签发服务器证书。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -s host_ca -I host.example.com -h -n host.example.com -V +52w ssh_host_rsa_key.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令会生成服务器证书<code>ssh_host_rsa_key-cert.pub</code>（服务器公钥名字加后缀<code>-cert</code>）。这个命令各个参数的含义如下。</p>\n<ul>\n<li><code>-s</code>：指定 CA 签发证书的密钥。</li>\n<li><code>-I</code>：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。</li>\n<li><code>-h</code>：指定该证书是服务器证书，而不是用户证书。</li>\n<li><code>-n host.example.com</code>：指定服务器的域名，表示证书仅对该域名有效。如果有多个域名，则使用逗号分隔。用户登录该域名服务器时，SSH 通过证书的这个值，分辨应该使用哪张证书发给用户，用来证明服务器的可信性。</li>\n<li><code>-V +52w</code>：指定证书的有效期，这里为52周（一年）。默认情况下，证书是永远有效的。建议使用该参数指定有效期，并且有效期最好短一点，最长不超过52周。</li>\n<li><code>ssh_host_rsa_key.pub</code>：服务器公钥。</li>\n</ul>\n<p>生成证书以后，可以使用下面的命令，查看证书的细节。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -L -f ssh_host_rsa_key-cert.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最后，为证书设置权限。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">chmod</span> <span class=\"token number\">600</span> ssh_host_rsa_key-cert.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"CA-签发用户证书\"><a href=\"#CA-签发用户证书\" class=\"headerlink\" title=\"CA 签发用户证书\"></a>CA 签发用户证书</h2><p>下面，再用 CA 签发用户证书。这时需要用户的公钥，如果没有的话，客户端可以用下面的命令生成一对密钥。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -f ~/.ssh/user_key -b <span class=\"token number\">4096</span> -t rsa<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令会在<code>~/.ssh</code>目录，生成<code>user_key</code>（私钥）和<code>user_key.pub</code>（公钥）。</p>\n<p>然后，将用户公钥<code>user_key.pub</code>，上传或复制到 CA 服务器。接下来，就可以使用 CA 的密钥<code>user_ca</code>为用户公钥<code>user_key.pub</code>签发用户证书。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -s user_ca -I user@example.com -n user -V +1d user_key.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令会生成用户证书<code>user_key-cert.pub</code>（用户公钥名字加后缀<code>-cert</code>）。这个命令各个参数的含义如下。</p>\n<ul>\n<li><code>-s</code>：指定 CA 签发证书的密钥</li>\n<li><code>-I</code>：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。</li>\n<li><code>-n user</code>：指定用户名，表示证书仅对该用户名有效。如果有多个用户名，使用逗号分隔。用户以该用户名登录服务器时，SSH 通过这个值，分辨应该使用哪张证书，证明自己的身份，发给服务器。</li>\n<li><code>-V +1d</code>：指定证书的有效期，这里为1天，强制用户每天都申请一次证书，提高安全性。默认情况下，证书是永远有效的。</li>\n<li><code>user_key.pub</code>：用户公钥。</li>\n</ul>\n<p>生成证书以后，可以使用下面的命令，查看证书的细节。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -L -f user_key-cert.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最后，为证书设置权限。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">chmod</span> <span class=\"token number\">600</span> user_key-cert.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"服务器安装证书\"><a href=\"#服务器安装证书\" class=\"headerlink\" title=\"服务器安装证书\"></a>服务器安装证书</h2><p>CA 生成服务器证书<code>ssh_host_rsa_key-cert.pub</code>以后，需要将该证书发回服务器，可以使用下面的<code>scp</code>命令，将证书拷贝过去。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> ~/.ssh/ssh_host_rsa_key-cert.pub root@host.example.com:/etc/ssh/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后，将下面一行添加到服务器配置文件<code>/etc/ssh/sshd_config</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的代码告诉 sshd，服务器证书是哪一个文件。</p>\n<p>重新启动 sshd。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> systemctl restart sshd.service\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">service</span> sshd restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"服务器安装-CA-公钥\"><a href=\"#服务器安装-CA-公钥\" class=\"headerlink\" title=\"服务器安装 CA 公钥\"></a>服务器安装 CA 公钥</h2><p>为了让服务器信任用户证书，必须将 CA 签发用户证书的公钥<code>user_ca.pub</code>，拷贝到服务器。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> ~/.ssh/user_ca.pub root@host.example.com:/etc/ssh/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令，将 CA 签发用户证书的公钥<code>user_ca.pub</code>，拷贝到 SSH 服务器的<code>/etc/ssh</code>目录。</p>\n<p>然后，将下面一行添加到服务器配置文件<code>/etc/ssh/sshd_config</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">TrustedUserCAKeys /etc/ssh/user_ca.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的做法是将<code>user_ca.pub</code>加到<code>/etc/ssh/sshd_config</code>，这会产生全局效果，即服务器的所有账户都会信任<code>user_ca</code>签发的所有用户证书。</p>\n<p>另一种做法是将<code>user_ca.pub</code>加到服务器某个账户的<code>~/.ssh/authorized_keys</code>文件，只让该账户信任<code>user_ca</code>签发的用户证书。具体方法是打开<code>~/.ssh/authorized_keys</code>，追加一行，开头是<code>@cert-authority principals=&quot;...&quot;</code>，然后后面加上<code>user_ca.pub</code>的内容，大概是下面这个样子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">@cert-authority <span class=\"token assign-left variable\">principals</span><span class=\"token operator\">=</span><span class=\"token string\">\"user\"</span> ssh-rsa AAAAB3Nz<span class=\"token punctuation\">..</span>.XNRM1EX2gQ<span class=\"token operator\">==</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，<code>principals=&quot;user&quot;</code>指定用户登录的服务器账户名，一般就是<code>authorized_keys</code>文件所在的账户。</p>\n<p>重新启动 sshd。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> systemctl restart sshd.service\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">service</span> sshd restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>至此，SSH 服务器已配置为信任<code>user_ca</code>签发的证书。</p>\n<h2 id=\"客户端安装证书\"><a href=\"#客户端安装证书\" class=\"headerlink\" title=\"客户端安装证书\"></a>客户端安装证书</h2><p>客户端安装用户证书很简单，就是从 CA 将用户证书<code>user_key-cert.pub</code>复制到客户端，与用户的密钥<code>user_key</code>保存在同一个目录即可。</p>\n<h2 id=\"客户端安装-CA-公钥\"><a href=\"#客户端安装-CA-公钥\" class=\"headerlink\" title=\"客户端安装 CA 公钥\"></a>客户端安装 CA 公钥</h2><p>为了让客户端信任服务器证书，必须将 CA 签发服务器证书的公钥<code>host_ca.pub</code>，加到客户端的<code>/etc/ssh/ssh_known_hosts</code>文件（全局级别）或者<code>~/.ssh/known_hosts</code>文件（用户级别）。</p>\n<p>具体做法是打开<code>ssh_known_hosts</code>或<code>known_hosts</code>文件，追加一行，开头为<code>@cert-authority *.example.com</code>，然后将<code>host_ca.pub</code>文件的内容（即公钥）粘贴在后面，大概是下面这个样子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">@cert-authority *.example.com ssh-rsa AAAAB3Nz<span class=\"token punctuation\">..</span>.XNRM1EX2gQ<span class=\"token operator\">==</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，<code>*.example.com</code>是域名的模式匹配，表示只要服务器符合该模式的域名，且签发服务器证书的 CA 匹配后面给出的公钥，就都可以信任。如果没有域名限制，这里可以写成<code>*</code>。如果有多个域名模式，可以使用逗号分隔；如果服务器没有域名，可以用主机名（比如<code>host1,host2,host3</code>）或者 IP 地址（比如<code>11.12.13.14,21.22.23.24</code>）。</p>\n<p>然后，就可以使用证书，登录远程服务器了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -i ~/.ssh/user_key user@host.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令的<code>-i</code>参数用来指定用户的密钥。如果证书与密钥在同一个目录，则连接服务器时将自动使用该证书。</p>\n<h2 id=\"废除证书\"><a href=\"#废除证书\" class=\"headerlink\" title=\"废除证书\"></a>废除证书</h2><p>废除证书的操作，分成用户证书的废除和服务器证书的废除两种。</p>\n<p>服务器证书的废除，用户需要在<code>known_hosts</code>文件里面，修改或删除对应的<code>@cert-authority</code>命令的那一行。</p>\n<p>用户证书的废除，需要在服务器新建一个<code>/etc/ssh/revoked_keys</code>文件，然后在配置文件<code>sshd_config</code>添加一行，内容如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">RevokedKeys /etc/ssh/revoked_keys<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>revoked_keys</code>文件保存不再信任的用户公钥，由下面的命令生成。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -kf /etc/ssh/revoked_keys -z <span class=\"token number\">1</span> ~/.ssh/user1_key.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>-z</code>参数用来指定用户公钥保存在<code>revoked_keys</code>文件的哪一行，这个例子是保存在第1行。</p>\n<p>如果以后需要废除其他的用户公钥，可以用下面的命令保存在第2行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -ukf /etc/ssh/revoked_keys -z <span class=\"token number\">2</span> ~/.ssh/user2_key.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://smallstep.com/blog/ssh-emergency-access/\">SSH Emergency Access</a>, Carl Tashian</li>\n<li><a href=\"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-using_openssh_certificate_authentication\">Using OpenSSH Certificate Authentication</a>, Red Hat Enterprise Linux Deployment Guide</li>\n<li><a href=\"https://gravitational.com/blog/how-to-ssh-properly/\">How to SSH Properly</a>, Gus Luxton</li>\n</ul>\n<h1 id=\"SSH-客户端\"><a href=\"#SSH-客户端\" class=\"headerlink\" title=\"SSH 客户端\"></a>SSH 客户端</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>OpenSSH 的客户端是二进制程序 ssh。它在 Linux/Unix 系统的位置是<code>/usr/local/bin/ssh</code>，Windows 系统的位置是<code>\\Program Files\\OpenSSH\\bin\\ssh.exe</code>。</p>\n<p>Linux 系统一般都自带 ssh，如果没有就需要安装。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Ubuntu 和 Debian</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> openssh-client\n\n<span class=\"token comment\"># CentOS 和 Fedora</span>\n$ <span class=\"token function\">sudo</span> dnf <span class=\"token function\">install</span> openssh-clients<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>安装以后，可以使用<code>-V</code>参数输出版本号，查看一下是否安装成功。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -V<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>ssh 最常见的用途就是登录服务器，这要求服务器安装并正在运行 SSH 服务器软件。</p>\n<p>ssh 登录服务器的命令如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> <span class=\"token function\">hostname</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>hostname</code>是主机名，它可以是域名，也可能是 IP 地址或局域网内部的主机名。不指定用户名的情况下，将使用客户端的当前用户名，作为远程服务器的登录用户名。如果要指定用户名，可以采用下面的语法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> user@hostname<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令中，用户名和主机名写在一起了，之间使用<code>@</code>分隔。</p>\n<p>用户名也可以使用<code>ssh</code>的<code>-l</code>参数指定，这样的话，用户名和主机名就不用写在一起了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -l username <span class=\"token function\">host</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>ssh 默认连接服务器的22端口，<code>-p</code>参数可以指定其他端口。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -p <span class=\"token number\">8821</span> foo.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令连接服务器<code>foo.com</code>的8821端口。</p>\n<h2 id=\"连接流程\"><a href=\"#连接流程\" class=\"headerlink\" title=\"连接流程\"></a>连接流程</h2><p>ssh 连接远程服务器后，首先有一个验证过程，验证远程服务器是否为陌生地址。</p>\n<p>如果是第一次连接某一台服务器，命令行会显示一段文字，表示不认识这台机器，提醒用户确认是否需要连接。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The authenticity of <span class=\"token function\">host</span> <span class=\"token string\">'foo.com (192.168.121.111)'</span> can't be established.\nECDSA key fingerprint is SHA256:Vybt22mVXuNuB5unE++yowF7lgA/9/2bLSiO3qmYWBY.\nAre you sure you want to <span class=\"token builtin class-name\">continue</span> connecting <span class=\"token punctuation\">(</span>yes/no<span class=\"token punctuation\">)</span>?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面这段文字告诉用户，<code>foo.com</code>这台服务器的指纹是陌生的，让用户选择是否要继续连接（输入 yes 或 no）。</p>\n<p>所谓“服务器指纹”，指的是 SSH 服务器公钥的哈希值。每台 SSH 服务器都有唯一一对密钥，用于跟客户端通信，其中公钥的哈希值就可以用来识别服务器。</p>\n<p>下面的命令可以查看某个公钥的指纹。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub\n<span class=\"token number\">256</span> da:24:43:0b:2e:c1:3f:a1:84:13:92:01:52:b4:84:ff   <span class=\"token punctuation\">(</span>ECDSA<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面的例子中，<code>ssh-keygen -l -f</code>命令会输出公钥<code>/etc/ssh/ssh_host_ecdsa_key.pub</code>的指纹。</p>\n<p>ssh 会将本机连接过的所有服务器公钥的指纹，都储存在本机的<code>~/.ssh/known_hosts</code>文件中。每次连接服务器时，通过该文件判断是否为陌生主机（陌生公钥）。</p>\n<p>在上面这段文字后面，输入<code>yes</code>，就可以将当前服务器的指纹也储存在本机<code>~/.ssh/known_hosts</code>文件中，并显示下面的提示。以后再连接的时候，就不会再出现警告了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Warning: Permanently added <span class=\"token string\">'foo.com (192.168.121.111)'</span> <span class=\"token punctuation\">(</span>RSA<span class=\"token punctuation\">)</span> to the list of known hosts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后，客户端就会跟服务器建立连接。接着，ssh 就会要求用户输入所要登录账户的密码。用户输入并验证密码正确以后，就能登录远程服务器的 Shell 了。</p>\n<h2 id=\"服务器密钥变更\"><a href=\"#服务器密钥变更\" class=\"headerlink\" title=\"服务器密钥变更\"></a>服务器密钥变更</h2><p>服务器指纹可以防止有人恶意冒充远程主机。如果服务器的密钥发生变更（比如重装了 SSH 服务器），客户端再次连接时，就会发生公钥指纹不吻合的情况。这时，客户端就会中断连接，并显示一段警告信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED<span class=\"token operator\">!</span>     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY<span class=\"token operator\">!</span>\nSomeone could be eavesdropping on you right now <span class=\"token punctuation\">(</span>man-in-the-middle attack<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\nIt is also possible that the RSA <span class=\"token function\">host</span> key has just been changed.\nThe fingerprint <span class=\"token keyword\">for</span> the RSA key sent by the remote <span class=\"token function\">host</span> is\n<span class=\"token number\">77</span>:a5:69:81:9b:eb:40:76:7b:13:04:a9:6c:f4:9c:5d.\nPlease contact your system administrator.\nAdd correct <span class=\"token function\">host</span> key <span class=\"token keyword\">in</span> /home/me/.ssh/known_hosts to get rid of this message.\nOffending key <span class=\"token keyword\">in</span> /home/me/.ssh/known_hosts:36<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面这段文字的意思是，该主机的公钥指纹跟<code>~/.ssh/known_hosts</code>文件储存的不一样，必须处理以后才能连接。这时，你需要确认是什么原因，使得公钥指纹发生变更，到底是恶意劫持，还是管理员变更了 SSH 服务器公钥。</p>\n<p>如果新的公钥确认可以信任，需要继续执行连接，你可以执行下面的命令，将原来的公钥指纹从<code>~/.ssh/known_hosts</code>文件删除。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -R <span class=\"token function\">hostname</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>hostname</code>是发生公钥变更的主机名。</p>\n<p>除了使用上面的命令，你也可以手工修改<code>known_hosts</code>文件，将公钥指纹删除。</p>\n<p>删除了原来的公钥指纹以后，重新执行 ssh 命令连接远程服务器，将新的指纹加入<code>known_hosts</code>文件，就可以顺利连接了。</p>\n<h2 id=\"执行远程命令\"><a href=\"#执行远程命令\" class=\"headerlink\" title=\"执行远程命令\"></a>执行远程命令</h2><p>SSH 登录成功后，用户就进入了远程主机的命令行环境，所看到的提示符，就是远程主机的提示符。这时，你就可以输入想要在远程主机执行的命令。</p>\n<p>另一种执行远程命令的方法，是将命令直接写在<code>ssh</code>命令的后面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> username@hostname <span class=\"token builtin class-name\">command</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令会使得 SSH 在登录成功后，立刻在远程主机上执行命令<code>command</code>。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> foo@server.example.com <span class=\"token function\">cat</span> /etc/hosts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令会在登录成功后，立即远程执行命令<code>cat /etc/hosts</code>。</p>\n<p>采用这种语法执行命令时，ssh 客户端不会提供互动式的 Shell 环境，而是直接将远程命令的执行结果输出在命令行。但是，有些命令需要互动式的 Shell 环境，这时就要使用<code>-t</code>参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 报错</span>\n$ <span class=\"token function\">ssh</span> remote.server.com emacs\nemacs: standard input is not a <span class=\"token function\">tty</span>\n\n<span class=\"token comment\"># 不报错</span>\n$ <span class=\"token function\">ssh</span> -t server.example.com emacs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>emacs</code>命令需要一个互动式 Shell，所以报错。只有加上<code>-t</code>参数，ssh 才会分配一个互动式 Shell。</p>\n<h2 id=\"加密参数\"><a href=\"#加密参数\" class=\"headerlink\" title=\"加密参数\"></a>加密参数</h2><p>SSH 连接的握手阶段，客户端必须跟服务端约定加密参数集（cipher suite）。</p>\n<p>加密参数集包含了若干不同的加密参数，它们之间使用下划线连接在一起，下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">TLS_RSA_WITH_AES_128_CBC_SHA<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的含义如下。</p>\n<ul>\n<li>TLS：加密通信协议</li>\n<li>RSA：密钥交换算法</li>\n<li>AES：加密算法</li>\n<li>128：加密算法的强度</li>\n<li>CBC：加密算法的模式</li>\n<li>SHA：数字签名的 Hash 函数</li>\n</ul>\n<p>下面是一个例子，客户端向服务器发出的握手信息。</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">Handshake protocol: ClientHello\n    Version: TLS 1.2\n    Random\n        Client time: May 22, 2030 02:43:46 GMT\n        Random bytes: b76b0e61829557eb4c611adfd2d36eb232dc1332fe29802e321ee871\n    Session ID: (empty)\n    Cipher Suites\n        Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256”\n        Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n        Suite: TLS_RSA_WITH_AES_128_GCM_SHA256\n        Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n        Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n        Suite: TLS_RSA_WITH_AES_128_CBC_SHA\n        Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA\n        Suite: TLS_RSA_WITH_RC4_128_SHA\n    Compression methods\n        Method: null\n    Extensions\n        Extension: server_name\n            Hostname: www.feistyduck.com\n        Extension: renegotiation_info\n        Extension: elliptic_curves\n            Named curve: secp256r1\n            Named curve: secp384r1\n        Extension: signature_algorithms\n            Algorithm: sha1/rsa\n            Algorithm: sha256/rsa\n            Algorithm: sha1/ecdsa\n            Algorithm: sha256/ecdsa”<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的握手信息（ClientHello）之中，<code>Cipher Suites</code>字段就是客户端列出可选的加密参数集，服务器在其中选择一个自己支持的参数集。</p>\n<p>服务器选择完毕之后，向客户端发出回应。</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">Handshake protocol: ServerHello\n    Version: TLS 1.2\n    Random\n        Server time: Mar 10, 2059 02:35:57 GMT”\n        Random bytes: 8469b09b480c1978182ce1b59290487609f41132312ca22aacaf5012\n    Session ID: 4cae75c91cf5adf55f93c9fb5dd36d19903b1182029af3d527b7a42ef1c32c80\n    Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n    Compression method: null\n    Extensions\n        Extension: server_name\n        Extension: renegotiation_info”<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的回应信息（ServerHello）中，<code>Cipher Suite</code>字段就是服务器最终选定的加密参数。</p>\n<h2 id=\"ssh-命令行配置项\"><a href=\"#ssh-命令行配置项\" class=\"headerlink\" title=\"ssh 命令行配置项\"></a>ssh 命令行配置项</h2><p>ssh 命令有很多配置项，修改它的默认行为。</p>\n<p><strong>-c</strong></p>\n<p><code>-c</code>参数指定加密算法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -c blowfish,3des server.example.com\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token function\">ssh</span> -c blowfish -c 3des server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令指定使用加密算法<code>blowfish</code>或<code>3des</code>。</p>\n<p><strong>-C</strong></p>\n<p><code>-C</code>参数表示压缩数据传输。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -C server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>-D</strong></p>\n<p><code>-D</code>参数指定本机的 Socks 监听端口，该端口收到的请求，都将转发到远程的 SSH 主机，又称动态端口转发，详见《端口转发》一章。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -D <span class=\"token number\">1080</span> server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令将本机 1080 端口收到的请求，都转发到服务器<code>server</code>。</p>\n<p><strong>-f</strong></p>\n<p><code>-f</code>参数表示 SSH 连接在后台运行。</p>\n<p><strong>-F</strong></p>\n<p><code>-F</code>参数指定配置文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -F /usr/local/ssh/other_config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令指定使用配置文件<code>other_config</code>。</p>\n<p><strong>-i</strong></p>\n<p><code>-i</code>参数用于指定私钥，意为“identity_file”，默认值为<code>~/.ssh/id_dsa</code>（DSA 算法）和<code>~/.ssh/id_rsa</code>（RSA 算法）。注意，对应的公钥必须存放到服务器，详见《密钥登录》一章。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -i my-key server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>-l</strong></p>\n<p><code>-l</code>参数指定远程登录的账户名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -l sally server.example.com\n<span class=\"token comment\"># 等同于</span>\n$ <span class=\"token function\">ssh</span> sally@server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>-L</strong></p>\n<p><code>-L</code>参数设置本地端口转发，详见《端口转发》一章。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span>  -L <span class=\"token number\">9999</span>:targetServer:80 user@remoteserver<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，所有发向本地<code>9999</code>端口的请求，都会经过<code>remoteserver</code>发往 targetServer 的 80 端口，这就相当于直接连上了 targetServer 的 80 端口。</p>\n<p><strong>-m</strong></p>\n<p><code>-m</code>参数指定校验数据完整性的算法（message authentication code，简称 MAC）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -m hmac-sha1,hmac-md5 server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令指定数据校验算法为<code>hmac-sha1</code>或<code>hmac-md5</code>。</p>\n<p><strong>-N</strong></p>\n<p><code>-N</code>参数用于端口转发，表示建立的 SSH 只用于端口转发，不能执行远程命令，这样可以提供安全性，详见《端口转发》一章。</p>\n<p><strong>-o</strong></p>\n<p><code>-o</code>参数用来指定一个配置命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -o <span class=\"token string\">\"Keyword Value\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>举例来说，配置文件里面有如下内容。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User sally\nPort <span class=\"token number\">220</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>通过<code>-o</code>参数，可以把上面两个配置命令从命令行传入。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -o <span class=\"token string\">\"User sally\"</span> -o <span class=\"token string\">\"Port 220\"</span> server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用等号时，配置命令可以不用写在引号里面，但是等号前后不能有空格。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -o <span class=\"token assign-left variable\">User</span><span class=\"token operator\">=</span>sally -o <span class=\"token assign-left variable\">Port</span><span class=\"token operator\">=</span><span class=\"token number\">220</span> server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>-p</strong></p>\n<p><code>-p</code>参数指定 SSH 客户端连接的服务器端口。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -p <span class=\"token number\">2035</span> server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令连接服务器的2035端口。</p>\n<p><strong>-q</strong></p>\n<p><code>-q</code>参数表示安静模式（quiet），不向用户输出任何警告信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> –q foo.com\nroot’s password:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面命令使用<code>-q</code>参数，只输出要求用户输入密码的提示。</p>\n<p><strong>-R</strong></p>\n<p><code>-R</code>参数指定远程端口转发，详见《端口转发》一章。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -R <span class=\"token number\">9999</span>:targetServer:902 <span class=\"token builtin class-name\">local</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令需在跳板服务器执行，指定本地计算机<code>local</code>监听自己的 9999 端口，所有发向这个端口的请求，都会转向 targetServer 的 902 端口。</p>\n<p><strong>-t</strong></p>\n<p><code>-t</code>参数在 ssh 直接运行远端命令时，提供一个互动式 Shell。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -t server.example.com emacs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>-v</strong></p>\n<p><code>-v</code>参数显示详细信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -v server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>-v</code>可以重复多次，表示信息的详细程度，比如<code>-vv</code>和<code>-vvv</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -vvv server.example.com\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token function\">ssh</span> -v -v -v server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令会输出最详细的连接信息。</p>\n<p><strong>-V</strong></p>\n<p><code>-V</code>参数输出 ssh 客户端的版本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> –V\nssh: SSH Secure Shell <span class=\"token number\">3.2</span>.3 <span class=\"token punctuation\">(</span>non-commercial version<span class=\"token punctuation\">)</span> on i686-pc-linux-gnu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面命令输出本机 ssh 客户端版本是<code>SSH Secure Shell 3.2.3</code>。</p>\n<p><strong>-X</strong></p>\n<p><code>-X</code>参数表示打开 X 窗口转发。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -X server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>-1，-2</strong></p>\n<p><code>-1</code>参数指定使用 SSH 1 协议。</p>\n<p><code>-2</code>参数指定使用 SSH 2 协议。</p>\n<pre class=\"line-numbers language-ssh\" data-language=\"ssh\"><code class=\"language-ssh\">$ ssh -2 server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>-4，-6</strong></p>\n<p><code>-4</code>指定使用 IPv4 协议，这是默认值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -4 server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>-6</code>指定使用 IPv6 协议。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -6 server.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"客户端配置文件\"><a href=\"#客户端配置文件\" class=\"headerlink\" title=\"客户端配置文件\"></a>客户端配置文件</h2><h3 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h3><p>SSH 客户端的全局配置文件是<code>/etc/ssh/ssh_config</code>，用户个人的配置文件在<code>~/.ssh/config</code>，优先级高于全局配置文件。</p>\n<p>除了配置文件，<code>~/.ssh</code>目录还有一些用户个人的密钥文件和其他文件。下面是其中一些常见的文件。</p>\n<ul>\n<li><code>~/.ssh/id_ecdsa</code>：用户的 ECDSA 私钥。</li>\n<li><code>~/.ssh/id_ecdsa.pub</code>：用户的 ECDSA 公钥。</li>\n<li><code>~/.ssh/id_rsa</code>：用于 SSH 协议版本2 的 RSA 私钥。</li>\n<li><code>~/.ssh/id_rsa.pub</code>：用于SSH 协议版本2 的 RSA 公钥。</li>\n<li><code>~/.ssh/identity</code>：用于 SSH 协议版本1 的 RSA 私钥。</li>\n<li><code>~/.ssh/identity.pub</code>：用于 SSH 协议版本1 的 RSA 公钥。</li>\n<li><code>~/.ssh/known_hosts</code>：包含 SSH 服务器的公钥指纹。</li>\n</ul>\n<h3 id=\"主机设置\"><a href=\"#主机设置\" class=\"headerlink\" title=\"主机设置\"></a>主机设置</h3><p>用户个人的配置文件<code>~/.ssh/config</code>，可以按照不同服务器，列出各自的连接参数，从而不必每一次登录都输入重复的参数。下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Host *\n     Port <span class=\"token number\">2222</span>\n\nHost remoteserver\n     HostName remote.example.com\n     User neo\n     Port <span class=\"token number\">2112</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>Host *</code>表示对所有主机生效，后面的<code>Port 2222</code>表示所有主机的默认连接端口都是2222，这样就不用在登录时特别指定端口了。这里的缩进并不是必需的，只是为了视觉上，易于识别针对不同主机的设置。</p>\n<p>后面的<code>Host remoteserver</code>表示，下面的设置只对主机<code>remoteserver</code>生效。<code>remoteserver</code>只是一个别名，具体的主机由<code>HostName</code>命令指定，<code>User</code>和<code>Port</code>这两项分别表示用户名和端口。这里的<code>Port</code>会覆盖上面<code>Host *</code>部分的<code>Port</code>设置。</p>\n<p>以后，登录<code>remote.example.com</code>时，只要执行<code>ssh remoteserver</code>命令，就会自动套用 config 文件里面指定的参数。<br>单个主机的配置格式如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> remoteserver\n<span class=\"token comment\"># 等同于</span>\n$ <span class=\"token function\">ssh</span> -p <span class=\"token number\">2112</span> neo@remote.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Host</code>命令的值可以使用通配符，比如<code>Host *</code>表示对所有主机都有效的设置，<code>Host *.edu</code>表示只对一级域名为<code>.edu</code>的主机有效的设置。它们的设置都可以被单个主机的设置覆盖。</p>\n<h3 id=\"配置命令的语法\"><a href=\"#配置命令的语法\" class=\"headerlink\" title=\"配置命令的语法\"></a>配置命令的语法</h3><p>ssh 客户端配置文件的每一行，就是一个配置命令。配置命令与对应的值之间，可以使用空格，也可以使用等号。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Compression <span class=\"token function\">yes</span>\n<span class=\"token comment\"># 等同于</span>\nCompression <span class=\"token operator\">=</span> <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>#</code>开头的行表示注释，会被忽略。空行等同于注释。</p>\n<h3 id=\"主要配置命令\"><a href=\"#主要配置命令\" class=\"headerlink\" title=\"主要配置命令\"></a>主要配置命令</h3><p>下面是 ssh 客户端的一些主要配置命令，以及它们的范例值。</p>\n<ul>\n<li><code>AddressFamily inet</code>：表示只使用 IPv4 协议。如果设为<code>inet6</code>，表示只使用 IPv6 协议。</li>\n<li><code>BindAddress 192.168.10.235</code>：指定本机的 IP 地址（如果本机有多个 IP 地址）。</li>\n<li><code>CheckHostIP yes</code>：检查 SSH 服务器的 IP 地址是否跟公钥数据库吻合。</li>\n<li><code>Ciphers blowfish,3des</code>：指定加密算法。</li>\n<li><code>Compression yes</code>：是否压缩传输信号。</li>\n<li><code>ConnectionAttempts 10</code>：客户端进行连接时，最大的尝试次数。</li>\n<li><code>ConnectTimeout 60</code>：客户端进行连接时，服务器在指定秒数内没有回复，则中断连接尝试。</li>\n<li><code>DynamicForward 1080</code>：指定动态转发端口。</li>\n<li><code>GlobalKnownHostsFile /users/smith/.ssh/my_global_hosts_file</code>：指定全局的公钥数据库文件的位置。</li>\n<li><code>Host server.example.com</code>：指定连接的域名或 IP 地址，也可以是别名，支持通配符。<code>Host</code>命令后面的所有配置，都是针对该主机的，直到下一个<code>Host</code>命令为止。</li>\n<li><code>HostKeyAlgorithms ssh-dss,ssh-rsa</code>：指定密钥算法，优先级从高到低排列。</li>\n<li><code>HostName myserver.example.com</code>：在<code>Host</code>命令使用别名的情况下，<code>HostName</code>指定域名或 IP 地址。</li>\n<li><code>IdentityFile keyfile</code>：指定私钥文件。</li>\n<li><code>LocalForward 2001 localhost:143</code>：指定本地端口转发。</li>\n<li><code>LogLevel QUIET</code>：指定日志详细程度。如果设为<code>QUIET</code>，将不输出大部分的警告和提示。</li>\n<li><code>MACs hmac-sha1,hmac-md5</code>：指定数据校验算法。</li>\n<li><code>NumberOfPasswordPrompts 2</code>：密码登录时，用户输错密码的最大尝试次数。</li>\n<li><code>PasswordAuthentication no</code>：指定是否支持密码登录。不过，这里只是客户端禁止，真正的禁止需要在 SSH 服务器设置。</li>\n<li><code>Port 2035</code>：指定客户端连接的 SSH 服务器端口。</li>\n<li><code>PreferredAuthentications publickey,hostbased,password</code>：指定各种登录方法的优先级。</li>\n<li><code>Protocol 2</code>：支持的 SSH 协议版本，多个版本之间使用逗号分隔。</li>\n<li><code>PubKeyAuthentication yes</code>：是否支持密钥登录。这里只是客户端设置，还需要在 SSH 服务器进行相应设置。</li>\n<li><code>RemoteForward 2001 server:143</code>：指定远程端口转发。</li>\n<li><code>SendEnv COLOR</code>：SSH 客户端向服务器发送的环境变量名，多个环境变量之间使用空格分隔。环境变量的值从客户端当前环境中拷贝。</li>\n<li><code>ServerAliveCountMax 3</code>：如果没有收到服务器的回应，客户端连续发送多少次<code>keepalive</code>信号，才断开连接。该项默认值为3。</li>\n<li><code>ServerAliveInterval 300</code>：客户端建立连接后，如果在给定秒数内，没有收到服务器发来的消息，客户端向服务器发送<code>keepalive</code>消息。如果不希望客户端发送，这一项设为<code>0</code>。</li>\n<li><code>StrictHostKeyChecking yes</code>：<code>yes</code>表示严格检查，服务器公钥为未知或发生变化，则拒绝连接。<code>no</code>表示如果服务器公钥未知，则加入客户端公钥数据库，如果公钥发生变化，不改变客户端公钥数据库，输出一条警告，依然允许连接继续进行。<code>ask</code>（默认值）表示询问用户是否继续进行。</li>\n<li><code>TCPKeepAlive yes</code>：客户端是否定期向服务器发送<code>keepalive</code>信息。</li>\n<li><code>User userName</code>：指定远程登录的账户名。</li>\n<li><code>UserKnownHostsFile /users/smith/.ssh/my_local_hosts_file</code>：指定当前用户的<code>known_hosts</code>文件（服务器公钥指纹列表）的位置。</li>\n<li><code>VerifyHostKeyDNS yes</code>：是否通过检查 SSH 服务器的 DNS 记录，确认公钥指纹是否与<code>known_hosts</code>文件保存的一致。</li>\n</ul>\n<h1 id=\"SSH-密钥登录\"><a href=\"#SSH-密钥登录\" class=\"headerlink\" title=\"SSH 密钥登录\"></a>SSH 密钥登录</h1><p>SSH 默认采用密码登录，这种方法有很多缺点，简单的密码不安全，复杂的密码不容易记忆，每次手动输入也很麻烦。密钥登录是比密码登录更好的解决方案。</p>\n<h2 id=\"密钥是什么\"><a href=\"#密钥是什么\" class=\"headerlink\" title=\"密钥是什么\"></a>密钥是什么</h2><p>密钥（key）是一个非常大的数字，通过加密算法得到。对称加密只需要一个密钥，非对称加密需要两个密钥成对使用，分为公钥（public key）和私钥（private key）。</p>\n<p>SSH 密钥登录采用的是非对称加密，每个用户通过自己的密钥登录。其中，私钥必须私密保存，不能泄漏；公钥则是公开的，可以对外发送。它们的关系是，公钥和私钥是一一对应的，每一个私钥都有且仅有一个对应的公钥，反之亦然。</p>\n<p>如果数据使用公钥加密，那么只有使用对应的私钥才能解密，其他密钥都不行；反过来，如果使用私钥加密（这个过程一般称为“签名”），也只有使用对应的公钥解密。</p>\n<h2 id=\"密钥登录的过程\"><a href=\"#密钥登录的过程\" class=\"headerlink\" title=\"密钥登录的过程\"></a>密钥登录的过程</h2><p>SSH 密钥登录分为以下的步骤。</p>\n<p>预备步骤，客户端通过<code>ssh-keygen</code>生成自己的公钥和私钥。</p>\n<p>第一步，手动将客户端的公钥放入远程服务器的指定位置。</p>\n<p>第二步，客户端向服务器发起 SSH 登录的请求。</p>\n<p>第三步，服务器收到用户 SSH 登录的请求，发送一些随机数据给用户，要求用户证明自己的身份。</p>\n<p>第四步，客户端收到服务器发来的数据，使用私钥对数据进行签名，然后再发还给服务器。</p>\n<p>第五步，服务器收到客户端发来的加密签名后，使用对应的公钥解密，然后跟原始数据比较。如果一致，就允许用户登录。</p>\n<h2 id=\"ssh-keygen命令：生成密钥\"><a href=\"#ssh-keygen命令：生成密钥\" class=\"headerlink\" title=\"ssh-keygen命令：生成密钥\"></a><code>ssh-keygen</code>命令：生成密钥</h2><h3 id=\"基本用法-1\"><a href=\"#基本用法-1\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>密钥登录时，首先需要生成公钥和私钥。OpenSSH 提供了一个工具程序<code>ssh-keygen</code>命令，用来生成密钥。</p>\n<p>直接输入<code>ssh-keygen</code>，程序会询问一系列问题，然后生成密钥。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>通常做法是使用<code>-t</code>参数，指定密钥的加密算法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -t dsa<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>-t</code>参数用来指定密钥的加密算法，一般会选择 DSA 算法或 RSA 算法。如果省略该参数，默认使用 RSA 算法。</p>\n<p>输入上面的命令以后，<code>ssh-keygen</code>会要求用户回答一些问题。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -t dsa\nGenerating public/private dsa key pair.\nEnter <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/home/username/.ssh/id_dsa<span class=\"token punctuation\">)</span>:  press ENTER\nEnter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>: ********\nEnter same passphrase again: ********\nYour identification has been saved <span class=\"token keyword\">in</span> /home/username/.ssh/id_dsa.\nYour public key has been saved <span class=\"token keyword\">in</span> /home/username/.ssh/id_dsa.pub.\nThe key fingerprint is:\n<span class=\"token number\">14</span>:ba:06:98:a8:98:ad:27:b5:ce:55:85:ec:64:37:19 username@shell.isp.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，执行<code>ssh-keygen</code>命令以后，会出现第一个问题，询问密钥保存的文件名，默认是<code>~/.ssh/id_dsa</code>文件，这个是私钥的文件名，对应的公钥文件<code>~/.ssh/id_dsa.pub</code>是自动生成的。用户的密钥一般都放在主目录的<code>.ssh</code>目录里面。</p>\n<p>如果选择<code>rsa</code>算法，生成的密钥文件默认就会是<code>~/.ssh/id_rsa</code>（私钥）和<code>~/.ssh/id_rsa.pub</code>（公钥）。</p>\n<p>接着，就会是第二个问题，询问是否要为私钥文件设定密码保护（passphrase）。这样的话，即使入侵者拿到私钥，还是需要破解密码。如果为了方便，不想设定密码保护，可以直接按回车键，密码就会为空。后面还会让你再输入一次密码，两次输入必须一致。注意，这里“密码”的英文单词是 passphrase，这是为了避免与 Linux 账户的密码单词 password 混淆，表示这不是用户系统账户的密码。</p>\n<p>最后，就会生成私钥和公钥，屏幕上还会给出公钥的指纹，以及当前的用户名和主机名作为注释，用来识别密钥的来源。</p>\n<p>公钥文件和私钥文件都是文本文件，可以用文本编辑器看一下它们的内容。公钥文件的内容类似下面这样。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAvpB4lUbAaEbh9u6HLig7amsfywD4fqSZq2ikACIUBn3GyRPfeF93l/\nweQh702ofXbDydZAKMcDvBJqRhUotQUwqV6HJxqoqPDlPGUUyo8RDIkLUIPRyq\nypZxmK9aCXokFiHoGCXfQ9imUP/w/jfqb9ByDtG97tUJF6nFMP5WzhM<span class=\"token operator\">=</span> username@shell.isp.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，末尾的<code>username@shell.isp.com</code>是公钥的注释，用来识别不同的公钥，表示这是哪台主机（<code>shell.isp.com</code>）的哪个用户（<code>username</code>）的公钥，不是必需项。</p>\n<p>注意，公钥只有一行。因为它太长了，所以上面分成三行显示。</p>\n<p>下面的命令可以列出用户所有的公钥。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> -l ~/.ssh/id_*.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>生成密钥以后，建议修改它们的权限，防止其他人读取。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">chmod</span> <span class=\"token number\">600</span> ~/.ssh/id_rsa\n$ <span class=\"token function\">chmod</span> <span class=\"token number\">600</span> ~/.ssh/id_rsa.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h3><p><code>ssh-keygen</code>的命令行配置项，主要有下面这些。</p>\n<p><strong>（1）<code>-b</code></strong></p>\n<p><code>-b</code>参数指定密钥的二进制位数。这个参数值越大，密钥就越不容易破解，但是加密解密的计算开销也会加大。</p>\n<p>一般来说，<code>-b</code>至少应该是<code>1024</code>，更安全一些可以设为<code>2048</code>或者更高。</p>\n<p><strong>（2）<code>-C</code></strong></p>\n<p><code>-C</code>参数可以为密钥文件指定新的注释，格式为<code>username@host</code>。</p>\n<p>下面命令生成一个4096位 RSA 加密算法的密钥对，并且给出了用户名和主机名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -t rsa -b <span class=\"token number\">4096</span> -C <span class=\"token string\">\"your_email@domain.com\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（3）<code>-f</code></strong></p>\n<p><code>-f</code>参数指定生成的私钥文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -t dsa -f mykey<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令会在当前目录生成私钥文件<code>mykey</code>和公钥文件<code>mykey.pub</code>。</p>\n<p><strong>（4）<code>-F</code></strong></p>\n<p><code>-F</code>参数检查某个主机名是否在<code>known_hosts</code>文件里面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -F example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（5）<code>-N</code></strong></p>\n<p><code>-N</code>参数用于指定私钥的密码（passphrase）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -t dsa -N secretword<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（6）<code>-p</code></strong></p>\n<p><code>-p</code>参数用于重新指定私钥的密码（passphrase）。它与<code>-N</code>的不同之处在于，新密码不在命令中指定，而是执行后再输入。ssh 先要求输入旧密码，然后要求输入两遍新密码。</p>\n<p><strong>（7）<code>-R</code></strong></p>\n<p><code>-R</code>参数将指定的主机公钥指纹移出<code>known_hosts</code>文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -R example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（8）<code>-t</code></strong></p>\n<p><code>-t</code>参数用于指定生成密钥的加密算法，一般为<code>dsa</code>或<code>rsa</code></p>\n<h2 id=\"手动上传公钥\"><a href=\"#手动上传公钥\" class=\"headerlink\" title=\"手动上传公钥\"></a>手动上传公钥</h2><p>生成密钥以后，公钥必须上传到服务器，才能使用公钥登录。</p>\n<p>OpenSSH 规定，用户公钥保存在服务器的<code>~/.ssh/authorized_keys</code>文件。你要以哪个用户的身份登录到服务器，密钥就必须保存在该用户主目录的<code>~/.ssh/authorized_keys</code>文件。只要把公钥添加到这个文件之中，就相当于公钥上传到服务器了。每个公钥占据一行。如果该文件不存在，可以手动创建。</p>\n<p>用户可以手动编辑该文件，把公钥粘贴进去，也可以在本机计算机上，执行下面的命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub <span class=\"token operator\">|</span> <span class=\"token function\">ssh</span> user@host <span class=\"token string\">\"mkdir -p ~/.ssh &amp;&amp; cat >> ~/.ssh/authorized_keys\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>user@host</code>要替换成你所要登录的用户名和主机名。</p>\n<p>注意，<code>authorized_keys</code>文件的权限要设为<code>644</code>，即只有文件所有者才能写。如果权限设置不对，SSH 服务器可能会拒绝读取该文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">chmod</span> <span class=\"token number\">644</span> ~/.ssh/authorized_keys<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>只要公钥上传到服务器，下次登录时，OpenSSH 就会自动采用密钥登录，不再提示输入密码。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -l username shell.isp.com\nEnter passphrase <span class=\"token keyword\">for</span> key <span class=\"token string\">'/home/you/.ssh/id_dsa'</span><span class=\"token builtin class-name\">:</span> ************\nLast login: Mon Mar <span class=\"token number\">24</span> 02:17:27 <span class=\"token number\">2014</span> from ex.ample.com\nshell.isp.com<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，SSH 客户端使用私钥之前，会要求用户输入密码（passphrase），用来解开私钥。</p>\n<h2 id=\"ssh-copy-id-命令：自动上传公钥\"><a href=\"#ssh-copy-id-命令：自动上传公钥\" class=\"headerlink\" title=\"ssh-copy-id 命令：自动上传公钥\"></a>ssh-copy-id 命令：自动上传公钥</h2><p>OpenSSH 自带一个<code>ssh-copy-id</code>命令，可以自动将公钥拷贝到远程服务器的<code>~/.ssh/authorized_keys</code>文件。如果<code>~/.ssh/authorized_keys</code>文件不存在，<code>ssh-copy-id</code>命令会自动创建该文件。</p>\n<p>用户在本地计算机执行下面的命令，就可以把本地的公钥拷贝到服务器。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-copy-id -i key_file user@host<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>-i</code>参数用来指定公钥文件，<code>user</code>是所要登录的账户名，<code>host</code>是服务器地址。如果省略用户名，默认为当前的本机用户名。执行完该命令，公钥就会拷贝到服务器。</p>\n<p>注意，公钥文件可以不指定路径和<code>.pub</code>后缀名，<code>ssh-copy-id</code>会自动在<code>~/.ssh</code>目录里面寻找。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-copy-id -i id_rsa user@host<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，公钥文件会自动匹配到<code>~/.ssh/id_rsa.pub</code>。</p>\n<p><code>ssh-copy-id</code>会采用密码登录，系统会提示输入远程服务器的密码。</p>\n<p>注意，<code>ssh-copy-id</code>是直接将公钥添加到<code>authorized_keys</code>文件的末尾。如果<code>authorized_keys</code>文件的末尾不是一个换行符，会导致新的公钥添加到前一个公钥的末尾，两个公钥连在一起，使得它们都无法生效。所以，如果<code>authorized_keys</code>文件已经存在，使用<code>ssh-copy-id</code>命令之前，务必保证<code>authorized_keys</code>文件的末尾是换行符（假设该文件已经存在）。</p>\n<h2 id=\"ssh-agent-命令，ssh-add-命令\"><a href=\"#ssh-agent-命令，ssh-add-命令\" class=\"headerlink\" title=\"ssh-agent 命令，ssh-add 命令\"></a>ssh-agent 命令，ssh-add 命令</h2><h3 id=\"基本用法-2\"><a href=\"#基本用法-2\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>私钥设置了密码以后，每次使用都必须输入密码，有时让人感觉非常麻烦。比如，连续使用<code>scp</code>命令远程拷贝文件时，每次都要求输入密码。</p>\n<p><code>ssh-agent</code>命令就是为了解决这个问题而设计的，它让用户在整个 Bash 对话（session）之中，只在第一次使用 SSH 命令时输入密码，然后将私钥保存在内存中，后面都不需要再输入私钥的密码了。</p>\n<p>第一步，使用下面的命令新建一次命令行对话。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-agent <span class=\"token function\">bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，如果你使用的命令行环境不是 Bash，可以用其他的 Shell 命令代替。比如<code>zsh</code>和<code>fish</code>。</p>\n<p>如果想在当前对话启用<code>ssh-agent</code>，可以使用下面的命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">eval</span> <span class=\"token variable\"><span class=\"token variable\">`</span>ssh-agent<span class=\"token variable\">`</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>ssh-agent</code>会先自动在后台运行，并将需要设置的环境变量输出在屏幕上，类似下面这样。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-agent\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SSH_AUTH_SOCK</span></span><span class=\"token operator\">=</span>/tmp/ssh-barrett/ssh-22841-agent<span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">export</span> <span class=\"token environment constant\">SSH_AUTH_SOCK</span><span class=\"token punctuation\">;</span>\n<span class=\"token assign-left variable\">SSH_AGENT_PID</span><span class=\"token operator\">=</span><span class=\"token number\">22842</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">export</span> SSH_AGENT_PID<span class=\"token punctuation\">;</span>\n<span class=\"token builtin class-name\">echo</span> Agent pid <span class=\"token number\">22842</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>eval</code>命令的作用，就是运行上面的<code>ssh-agent</code>命令的输出，设置环境变量。</p>\n<p>第二步，在新建的 Shell 对话里面，使用<code>ssh-add</code>命令添加默认的私钥（比如<code>~/.ssh/id_rsa</code>，或<code>~/.ssh/id_dsa</code>，或<code>~/.ssh/id_ecdsa</code>，或<code>~/.ssh/id_ed25519</code>）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-add\nEnter passphrase <span class=\"token keyword\">for</span> /home/you/.ssh/id_dsa: ********\nIdentity added: /home/you/.ssh/id_dsa <span class=\"token punctuation\">(</span>/home/you/.ssh/id_dsa<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，添加私钥时，会要求输入密码。以后，在这个对话里面再使用密钥时，就不需要输入私钥的密码了，因为私钥已经加载到内存里面了。</p>\n<p>如果添加的不是默认私钥，<code>ssh-add</code>命令需要显式指定私钥文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-add my-other-key-file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令中，<code>my-other-key-file</code>就是用户指定的私钥文件。</p>\n<p>第三步，使用 ssh 命令正常登录远程服务器。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> remoteHost<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>remoteHost</code>是远程服务器的地址，ssh 使用的是默认的私钥。这时如果私钥设有密码，ssh 将不再询问密码，而是直接取出内存里面的私钥。</p>\n<p>如果要使用其他私钥登录服务器，需要使用 ssh 命令的<code>-i</code>参数指定私钥文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> –i OpenSSHPrivateKey remoteHost<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最后，如果要退出<code>ssh-agent</code>，可以直接退出子 Shell（按下 Ctrl + d），也可以使用下面的命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-agent -k<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"ssh-add命令\"><a href=\"#ssh-add命令\" class=\"headerlink\" title=\"ssh-add命令\"></a><code>ssh-add</code>命令</h3><p><code>ssh-add</code>命令用来将私钥加入<code>ssh-agent</code>，它有如下的参数。</p>\n<p><strong>（1）<code>-d</code></strong></p>\n<p><code>-d</code>参数从内存中删除指定的私钥。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-add -d name-of-key-file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（2）<code>-D</code></strong></p>\n<p><code>-D</code>参数从内存中删除所有已经添加的私钥。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-add -D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（3）<code>-l</code></strong></p>\n<p><code>-l</code>参数列出所有已经添加的私钥。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-add -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"关闭密码登录\"><a href=\"#关闭密码登录\" class=\"headerlink\" title=\"关闭密码登录\"></a>关闭密码登录</h2><p>为了安全性，启用密钥登录之后，最好关闭服务器的密码登录。</p>\n<p>对于 OpenSSH，具体方法就是打开服务器 sshd 的配置文件<code>/etc/ssh/sshd_config</code>，将<code>PasswordAuthentication</code>这一项设为<code>no</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">PasswordAuthentication no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>修改配置文件以后，不要忘了重新启动 sshd，否则不会生效。</p>\n<h1 id=\"SSH-端口转发\"><a href=\"#SSH-端口转发\" class=\"headerlink\" title=\"SSH 端口转发\"></a>SSH 端口转发</h1><h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>SSH 除了登录服务器，还有一大用途，就是作为加密通信的中介，充当两台服务器之间的通信加密跳板，使得原本不加密的通信变成加密通信。这个功能称为端口转发（port forwarding），又称 SSH 隧道（tunnel）。</p>\n<p>端口转发有两个主要作用：</p>\n<p>（1）将不加密的数据放在 SSH 安全连接里面传输，使得原本不安全的网络服务增加了安全性，比如通过端口转发访问 Telnet、FTP 等明文服务，数据传输就都会加密。</p>\n<p>（2）作为数据通信的加密跳板，绕过网络防火墙。</p>\n<p>端口转发有三种使用方法：动态转发，本地转发，远程转发。下面逐一介绍。</p>\n<h2 id=\"动态转发\"><a href=\"#动态转发\" class=\"headerlink\" title=\"动态转发\"></a>动态转发</h2><p>动态转发指的是，本机与 SSH 服务器之间创建了一个加密连接，然后本机内部针对某个端口的通信，都通过这个加密连接转发。它的一个使用场景就是，访问所有外部网站，都通过 SSH 转发。</p>\n<p>动态转发需要把本地端口绑定到 SSH 服务器。至于 SSH 服务器要去访问哪一个网站，完全是动态的，取决于原始通信，所以叫做动态转发。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -D local-port tunnel-host -N<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>-D</code>表示动态转发，<code>local-port</code>是本地端口，<code>tunnel-host</code>是 SSH 服务器，<code>-N</code>表示这个 SSH 连接只进行端口转发，不登录远程 Shell，不能执行远程命令，只能充当隧道。</p>\n<p>举例来说，如果本地端口是<code>2121</code>，那么动态转发的命令就是下面这样。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -D <span class=\"token number\">2121</span> tunnel-host -N<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意，这种转发采用了 SOCKS5 协议。访问外部网站时，需要把 HTTP 请求转成 SOCKS5 协议，才能把本地端口的请求转发出去。</p>\n<p>下面是 SSH 隧道建立后的一个使用实例。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -x socks5://localhost:2121 http://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，curl 的<code>-x</code>参数指定代理服务器，即通过 SOCKS5 协议的本地<code>2121</code>端口，访问<code>http://www.example.com</code>。</p>\n<p>如果经常使用动态转发，可以将设置写入 SSH 客户端的用户个人配置文件（<code>~/.ssh/config</code>）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">DynamicForward tunnel-host:local-port<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"本地转发\"><a href=\"#本地转发\" class=\"headerlink\" title=\"本地转发\"></a>本地转发</h2><p>本地转发（local forwarding）指的是，SSH 服务器作为中介的跳板机，建立本地计算机与特定目标网站之间的加密连接。本地转发是在本地计算机的 SSH 客户端建立的转发规则。</p>\n<p>它会指定一个本地端口（local-port），所有发向那个端口的请求，都会转发到 SSH 跳板机（tunnel-host），然后 SSH 跳板机作为中介，将收到的请求发到目标服务器（target-host）的目标端口（target-port）。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">$ ssh -L local-port:target-host:target-port tunnel-host<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>-L</code>参数表示本地转发，<code>local-port</code>是本地端口，<code>target-host</code>是你想要访问的目标服务器，<code>target-port</code>是目标服务器的端口，<code>tunnel-host</code>是 SSH 跳板机。</p>\n<p>举例来说，现在有一台 SSH 跳板机<code>tunnel-host</code>，我们想要通过这台机器，在本地<code>2121</code>端口与目标网站<code>www.example.com</code>的80端口之间建立 SSH 隧道，就可以写成下面这样。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -L <span class=\"token number\">2121</span>:www.example.com:80 tunnel-host -N<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后，访问本机的<code>2121</code>端口，就是访问<code>www.example.com</code>的80端口。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:2121<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意，本地端口转发采用 HTTP 协议，不用转成 SOCKS5 协议。</p>\n<p>另一个例子是加密访问邮件获取协议 POP3。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -L <span class=\"token number\">1100</span>:mail.example.com:110 mail.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令将本机的1100端口，绑定邮件服务器<code>mail.example.com</code>的110端口（POP3 协议的默认端口）。端口转发建立以后，POP3 邮件客户端只需要访问本机的1100端口，请求就会通过 SSH 跳板机（这里是<code>mail.example.com</code>），自动转发到<code>mail.example.com</code>的110端口。</p>\n<p>上面这种情况有一个前提条件，就是<code>mail.example.com</code>必须运行 SSH 服务器。否则，就必须通过另一台 SSH 服务器中介，执行的命令要改成下面这样。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -L <span class=\"token number\">1100</span>:mail.example.com:110 other.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，本机的1100端口还是绑定<code>mail.example.com</code>的110端口，但是由于<code>mail.example.com</code>没有运行 SSH 服务器，所以必须通过<code>other.example.com</code>中介。本机的 POP3 请求通过1100端口，先发给<code>other.example.com</code>的22端口（sshd 默认端口），再由后者转给<code>mail.example.com</code>，得到数据以后再原路返回。</p>\n<p>注意，采用上面的中介方式，只有本机到<code>other.example.com</code>的这一段是加密的，<code>other.example.com</code>到<code>mail.example.com</code>的这一段并不加密。</p>\n<p>这个命令最好加上<code>-N</code>参数，表示不在 SSH 跳板机执行远程命令，让 SSH 只充当隧道。另外还有一个<code>-f</code>参数表示 SSH 连接在后台运行。</p>\n<p>如果经常使用本地转发，可以将设置写入 SSH 客户端的用户个人配置文件（<code>~/.ssh/config</code>）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Host test.example.com\nLocalForward client-IP:client-port server-IP:server-port<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"远程转发\"><a href=\"#远程转发\" class=\"headerlink\" title=\"远程转发\"></a>远程转发</h2><p>远程转发指的是在远程 SSH 服务器建立的转发规则。</p>\n<p>它跟本地转发正好反过来。建立本地计算机到远程计算机的 SSH 隧道以后，本地转发是通过本地计算机访问远程计算机，而远程转发则是通过远程计算机访问本地计算机。它的命令格式如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -R remote-port:target-host:target-port -N remotehost<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>-R</code>参数表示远程端口转发，<code>remote-port</code>是远程计算机的端口，<code>target-host</code>和<code>target-port</code>是目标服务器及其端口，<code>remotehost</code>是远程计算机。</p>\n<p>远程转发主要针对内网的情况。下面举两个例子。</p>\n<p>第一个例子是内网某台服务器<code>localhost</code>在 80 端口开了一个服务，可以通过远程转发将这个 80 端口，映射到具有公网 IP 地址的<code>my.public.server</code>服务器的 8080 端口，使得访问<code>my.public.server:8080</code>这个地址，就可以访问到那台内网服务器的 80 端口。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -R <span class=\"token number\">8080</span>:localhost:80 -N my.public.server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令是在内网<code>localhost</code>服务器上执行，建立从<code>localhost</code>到<code>my.public.server</code>的 SSH 隧道。运行以后，用户访问<code>my.public.server:8080</code>，就会自动映射到<code>localhost:80</code>。</p>\n<p>第二个例子是本地计算机<code>local</code>在外网，SSH 跳板机和目标服务器<code>my.private.server</code>都在内网，必须通过 SSH 跳板机才能访问目标服务器。但是，本地计算机<code>local</code>无法访问内网之中的 SSH 跳板机，而 SSH 跳板机可以访问本机计算机。</p>\n<p>由于本机无法访问内网 SSH 跳板机，就无法从外网发起 SSH 隧道，建立端口转发。必须反过来，从 SSH 跳板机发起隧道，建立端口转发，这时就形成了远程端口转发。跳板机执行下面的命令，绑定本地计算机<code>local</code>的<code>2121</code>端口，去访问<code>my.private.server:80</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -R <span class=\"token number\">2121</span>:my.private.server:80 -N <span class=\"token builtin class-name\">local</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令是在 SSH 跳板机上执行的，建立跳板机到<code>local</code>的隧道，并且这条隧道的出口映射到<code>my.private.server:80</code>。</p>\n<p>显然，远程转发要求本地计算机<code>local</code>也安装了 SSH 服务器，这样才能接受 SSH 跳板机的远程登录。</p>\n<p>执行上面的命令以后，跳板机到<code>local</code>的隧道已经建立了。然后，就可以从本地计算机访问目标服务器了，即在本机执行下面的命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:2121<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>本机执行上面的命令以后，就会输出服务器<code>my.private.server</code>的 80 端口返回的内容。</p>\n<p>如果经常执行远程端口转发，可以将设置写入 SSH 客户端的用户个人配置文件（<code>~/.ssh/config</code>）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Host remote-forward\n  HostName test.example.com\n  RemoteForward remote-port target-host:target-port<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>完成上面的设置后，执行下面的命令就会建立远程转发。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -N remote-forward\n\n<span class=\"token comment\"># 等同于</span>\n$ <span class=\"token function\">ssh</span> -R remote-port:target-host:target-port -N test.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>下面看两个端口转发的实例。</p>\n<h3 id=\"简易-VPN\"><a href=\"#简易-VPN\" class=\"headerlink\" title=\"简易 VPN\"></a>简易 VPN</h3><p>VPN 用来在外网与内网之间建立一条加密通道。内网的服务器不能从外网直接访问，必须通过一个跳板机，如果本机可以访问跳板机，就可以使用 SSH 本地转发，简单实现一个 VPN。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -L <span class=\"token number\">2080</span>:corp-server:80 -L <span class=\"token number\">2443</span>:corp-server:443 tunnel-host -N<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令通过 SSH 跳板机，将本机的<code>2080</code>端口绑定内网服务器的<code>80</code>端口，本机的<code>2443</code>端口绑定内网服务器的<code>443</code>端口。</p>\n<h3 id=\"两级跳板\"><a href=\"#两级跳板\" class=\"headerlink\" title=\"两级跳板\"></a>两级跳板</h3><p>端口转发可以有多级，比如新建两个 SSH 隧道，第一个隧道转发给第二个隧道，第二个隧道才能访问目标服务器。</p>\n<p>首先，在本机新建第一级隧道。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -L <span class=\"token number\">7999</span>:localhost:2999 tunnel1-host<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令在本地<code>7999</code>端口与<code>tunnel1-host</code>之间建立一条隧道，隧道的出口是<code>tunnel1-host</code>的<code>localhost:2999</code>，也就是<code>tunnel1-host</code>收到本机的请求以后，转发给自己的<code>2999</code>端口。</p>\n<p>然后，在第一台跳板机（<code>tunnel1-host</code>）执行下面的命令，新建第二级隧道。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -L <span class=\"token number\">2999</span>:target-host:7999 tunnel2-host -N<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令将第一台跳板机<code>tunnel1-host</code>的<code>2999</code>端口，通过第二台跳板机<code>tunnel2-host</code>，连接到目标服务器<code>target-host</code>的<code>7999</code>端口。</p>\n<p>最终效果就是，访问本机的<code>7999</code>端口，就会转发到<code>target-host</code>的<code>7999</code>端口。</p>\n<h2 id=\"参考链接-1\"><a href=\"#参考链接-1\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://solitum.net/posts/an-illustrated-guide-to-ssh-tunnels/\">An Illustrated Guide to SSH Tunnels</a>, Scott Wiersdorf</li>\n</ul>\n<h1 id=\"rsync-命令\"><a href=\"#rsync-命令\" class=\"headerlink\" title=\"rsync 命令\"></a>rsync 命令</h1><h2 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>rsync 是一个常用的 Linux 应用程序，用于文件同步。</p>\n<p>它可以在本地计算机与远程计算机之间，或者两个本地目录之间同步文件（但不支持两台远程计算机之间的同步）。它也可以当作文件复制工具，替代<code>cp</code>和<code>mv</code>命令。</p>\n<p>它名称里面的<code>r</code>指的是 remote，rsync 其实就是“远程同步”（remote sync）的意思。与其他文件传输工具（如 FTP 或 scp）不同，rsync 的最大特点是会检查发送方和接收方已有的文件，仅传输有变动的部分（默认规则是文件大小或修改时间有变动）。</p>\n<p>虽然 rsync 不是 SSH 工具集的一部分，但因为也涉及到远程操作，所以放在这里一起介绍。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>如果本机或者远程计算机没有安装 rsync，可以用下面的命令安装。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Debian</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">rsync</span>\n\n<span class=\"token comment\"># Red Hat</span>\n$ <span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token function\">rsync</span>\n\n<span class=\"token comment\"># Arch Linux</span>\n$ <span class=\"token function\">sudo</span> pacman -S <span class=\"token function\">rsync</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，传输的双方都必须安装 rsync。</p>\n<h2 id=\"基本用法-3\"><a href=\"#基本用法-3\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>rsync 可以用于本地计算机的两个目录之间的同步。下面就用本地同步举例，顺便讲解 rsync 几个主要参数的用法。</p>\n<h3 id=\"r参数\"><a href=\"#r参数\" class=\"headerlink\" title=\"-r参数\"></a><code>-r</code>参数</h3><p>本机使用 rsync 命令时，可以作为<code>cp</code>和<code>mv</code>命令的替代方法，将源目录拷贝到目标目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -r <span class=\"token builtin class-name\">source</span> destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>-r</code>表示递归，即包含子目录。注意，<code>-r</code>是必须的，否则 rsync 运行不会成功。<code>source</code>目录表示源目录，<code>destination</code>表示目标目录。上面命令执行以后，目标目录下就会出现<code>destination/source</code>这个子目录。</p>\n<p>如果有多个文件或目录需要同步，可以写成下面这样。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -r source1 source2 destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>source1</code>、<code>source2</code>都会被同步到<code>destination</code>目录。</p>\n<h3 id=\"a参数\"><a href=\"#a参数\" class=\"headerlink\" title=\"-a参数\"></a><code>-a</code>参数</h3><p><code>-a</code>参数可以替代<code>-r</code>，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新，所以<code>-a</code>比<code>-r</code>更有用。下面的用法才是常见的写法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -a <span class=\"token builtin class-name\">source</span> destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>目标目录<code>destination</code>如果不存在，rsync 会自动创建。执行上面的命令后，源目录<code>source</code>被完整地复制到了目标目录<code>destination</code>下面，即形成了<code>destination/source</code>的目录结构。</p>\n<p>如果只想同步源目录<code>source</code>里面的内容到目标目录<code>destination</code>，则需要在源目录后面加上斜杠。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -a source/ destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令执行后，<code>source</code>目录里面的内容，就都被复制到了<code>destination</code>目录里面，并不会在<code>destination</code>下面创建一个<code>source</code>子目录。</p>\n<h3 id=\"n参数\"><a href=\"#n参数\" class=\"headerlink\" title=\"-n参数\"></a><code>-n</code>参数</h3><p>如果不确定 rsync 执行后会产生什么结果，可以先用<code>-n</code>或<code>--dry-run</code>参数模拟执行的结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -anv source/ destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>-n</code>参数模拟命令执行的结果，并不真的执行命令。<code>-v</code>参数则是将结果输出到终端，这样就可以看到哪些内容会被同步。</p>\n<h3 id=\"delete参数\"><a href=\"#delete参数\" class=\"headerlink\" title=\"--delete参数\"></a><code>--delete</code>参数</h3><p>默认情况下，rsync 只确保源目录的所有内容（明确排除的文件除外）都复制到目标目录。它不会使两个目录保持相同，并且不会删除文件。如果要使得目标目录成为源目录的镜像副本，则必须使用<code>--delete</code>参数，这将删除只存在于目标目录、不存在于源目录的文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av --delete source/ destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>--delete</code>参数会使得<code>destination</code>成为<code>source</code>的一个镜像。</p>\n<h2 id=\"排除文件\"><a href=\"#排除文件\" class=\"headerlink\" title=\"排除文件\"></a>排除文件</h2><h3 id=\"exclude参数\"><a href=\"#exclude参数\" class=\"headerlink\" title=\"--exclude参数\"></a><code>--exclude</code>参数</h3><p>有时，我们希望同步时排除某些文件或目录，这时可以用<code>--exclude</code>参数指定排除模式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av --exclude<span class=\"token operator\">=</span><span class=\"token string\">'*.txt'</span> source/ destination\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token function\">rsync</span> -av --exclude <span class=\"token string\">'*.txt'</span> source/ destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令排除了所有 TXT 文件。</p>\n<p>注意，rsync 会同步以“点”开头的隐藏文件，如果要排除隐藏文件，可以这样写<code>--exclude=&quot;.*&quot;</code>。</p>\n<p>如果要排除某个目录里面的所有文件，但不希望排除目录本身，可以写成下面这样。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av --exclude <span class=\"token string\">'dir1/*'</span> source/ destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>多个排除模式，可以用多个<code>--exclude</code>参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av --exclude <span class=\"token string\">'file1.txt'</span> --exclude <span class=\"token string\">'dir1/*'</span> source/ destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>多个排除模式也可以利用 Bash 的大扩号的扩展功能，只用一个<code>--exclude</code>参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av --exclude<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'file1.txt'</span>,<span class=\"token string\">'dir1/*'</span><span class=\"token punctuation\">&#125;</span> source/ destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果排除模式很多，可以将它们写入一个文件，每个模式一行，然后用<code>--exclude-from</code>参数指定这个文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av --exclude-from<span class=\"token operator\">=</span><span class=\"token string\">'exclude-file.txt'</span> source/ destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"include参数\"><a href=\"#include参数\" class=\"headerlink\" title=\"--include参数\"></a><code>--include</code>参数</h3><p><code>--include</code>参数用来指定必须同步的文件模式，往往与<code>--exclude</code>结合使用。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av --include<span class=\"token operator\">=</span><span class=\"token string\">\"*.txt\"</span> --exclude<span class=\"token operator\">=</span><span class=\"token string\">'*'</span> source/ destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令指定同步时，排除所有文件，但是会包括 TXT 文件。</p>\n<h2 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h2><h3 id=\"SSH-协议\"><a href=\"#SSH-协议\" class=\"headerlink\" title=\"SSH 协议\"></a>SSH 协议</h3><p>rsync 除了支持本地两个目录之间的同步，也支持远程同步。它可以将本地内容，同步到远程服务器。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av source/ username@remote_host:destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>也可以将远程内容同步到本地。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av username@remote_host:source/ destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>rsync 默认使用 SSH 进行远程登录和数据传输。</p>\n<p>由于早期 rsync 不使用 SSH 协议，需要用<code>-e</code>参数指定协议，后来才改的。所以，下面<code>-e ssh</code>可以省略。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av -e <span class=\"token function\">ssh</span> source/ user@remote_host:/destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>但是，如果 ssh 命令有附加的参数，则必须使用<code>-e</code>参数指定所要执行的 SSH 命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av -e <span class=\"token string\">'ssh -p 2234'</span> source/ user@remote_host:/destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>-e</code>参数指定 SSH 使用2234端口。</p>\n<h3 id=\"rsync-协议\"><a href=\"#rsync-协议\" class=\"headerlink\" title=\"rsync 协议\"></a>rsync 协议</h3><p>除了使用 SSH，如果另一台服务器安装并运行了 rsync 守护程序，则也可以用<code>rsync://</code>协议（默认端口873）进行传输。具体写法是服务器与目标目录之间使用双冒号分隔<code>::</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av source/ <span class=\"token number\">192.168</span>.122.32::module/destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意，上面地址中的<code>module</code>并不是实际路径名，而是 rsync 守护程序指定的一个资源名，由管理员分配。</p>\n<p>如果想知道 rsync 守护程序分配的所有 module 列表，可以执行下面命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> rsync://192.168.122.32<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>rsync 协议除了使用双冒号，也可以直接用<code>rsync://</code>协议指定地址。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -av source/ rsync://192.168.122.32/module/destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"增量备份\"><a href=\"#增量备份\" class=\"headerlink\" title=\"增量备份\"></a>增量备份</h2><p>rsync 的最大特点就是它可以完成增量备份，也就是默认只复制有变动的文件。</p>\n<p>除了源目录与目标目录直接比较，rsync 还支持使用基准目录，即将源目录与基准目录之间变动的部分，同步到目标目录。</p>\n<p>具体做法是，第一次同步是全量备份，所有文件在基准目录里面同步一份。以后每一次同步都是增量备份，只同步源目录与基准目录之间有变动的部分，将这部分保存在一个新的目标目录。这个新的目标目录之中，也是包含所有文件，但实际上，只有那些变动过的文件是存在于该目录，其他没有变动的文件都是指向基准目录文件的硬链接。</p>\n<p><code>--link-dest</code>参数用来指定同步时的基准目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rsync</span> -a --delete --link-dest /compare/path /source/path /target/path<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>--link-dest</code>参数指定基准目录<code>/compare/path</code>，然后源目录<code>/source/path</code>跟基准目录进行比较，找出变动的文件，将它们拷贝到目标目录<code>/target/path</code>。那些没变动的文件则会生成硬链接。这个命令的第一次备份时是全量备份，后面就都是增量备份了。</p>\n<p>下面是一个脚本示例，备份用户的主目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># A script to perform incremental backups using rsync</span>\n\n<span class=\"token builtin class-name\">set</span> -o errexit\n<span class=\"token builtin class-name\">set</span> -o nounset\n<span class=\"token builtin class-name\">set</span> -o pipefail\n\n<span class=\"token builtin class-name\">readonly</span> <span class=\"token assign-left variable\">SOURCE_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$&#123;<span class=\"token environment constant\">HOME</span>&#125;</span>\"</span>\n<span class=\"token builtin class-name\">readonly</span> <span class=\"token assign-left variable\">BACKUP_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/mnt/data/backups\"</span>\n<span class=\"token builtin class-name\">readonly</span> <span class=\"token assign-left variable\">DATETIME</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> <span class=\"token string\">'+%Y-%m-%d_%H:%M:%S'</span><span class=\"token variable\">)</span></span>\"</span>\n<span class=\"token builtin class-name\">readonly</span> <span class=\"token assign-left variable\">BACKUP_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$&#123;BACKUP_DIR&#125;</span>/<span class=\"token variable\">$&#123;DATETIME&#125;</span>\"</span>\n<span class=\"token builtin class-name\">readonly</span> <span class=\"token assign-left variable\">LATEST_LINK</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$&#123;BACKUP_DIR&#125;</span>/latest\"</span>\n\n<span class=\"token function\">mkdir</span> -p <span class=\"token string\">\"<span class=\"token variable\">$&#123;BACKUP_DIR&#125;</span>\"</span>\n\n<span class=\"token function\">rsync</span> -av --delete <span class=\"token punctuation\">\\</span>\n  <span class=\"token string\">\"<span class=\"token variable\">$&#123;SOURCE_DIR&#125;</span>/\"</span> <span class=\"token punctuation\">\\</span>\n  --link-dest <span class=\"token string\">\"<span class=\"token variable\">$&#123;LATEST_LINK&#125;</span>\"</span> <span class=\"token punctuation\">\\</span>\n  --exclude<span class=\"token operator\">=</span><span class=\"token string\">\".cache\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token string\">\"<span class=\"token variable\">$&#123;BACKUP_PATH&#125;</span>\"</span>\n\n<span class=\"token function\">rm</span> -rf <span class=\"token string\">\"<span class=\"token variable\">$&#123;LATEST_LINK&#125;</span>\"</span>\n<span class=\"token function\">ln</span> -s <span class=\"token string\">\"<span class=\"token variable\">$&#123;BACKUP_PATH&#125;</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;LATEST_LINK&#125;</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面脚本中，每一次同步都会生成一个新目录<code>$&#123;BACKUP_DIR&#125;/$&#123;DATETIME&#125;</code>，并将软链接<code>$&#123;BACKUP_DIR&#125;/latest</code>指向这个目录。下一次备份时，就将<code>$&#123;BACKUP_DIR&#125;/latest</code>作为基准目录，生成新的备份目录。最后，再将软链接<code>$&#123;BACKUP_DIR&#125;/latest</code>指向新的备份目录。</p>\n<h2 id=\"配置项-1\"><a href=\"#配置项-1\" class=\"headerlink\" title=\"配置项\"></a>配置项</h2><p><code>-a</code>、<code>--archive</code>参数表示存档模式，保存所有的元数据，比如修改时间（modification time）、权限、所有者等，并且软链接也会同步过去。</p>\n<p><code>--append</code>参数指定文件接着上次中断的地方，继续传输。</p>\n<p><code>--append-verify</code>参数跟<code>--append</code>参数类似，但会对传输完成后的文件进行一次校验。如果校验失败，将重新发送整个文件。</p>\n<p><code>-b</code>、<code>--backup</code>参数指定在删除或更新目标目录已经存在的文件时，将该文件更名后进行备份，默认行为是删除。更名规则是添加由<code>--suffix</code>参数指定的文件后缀名，默认是<code>~</code>。</p>\n<p><code>--backup-dir</code>参数指定文件备份时存放的目录，比如<code>--backup-dir=/path/to/backups</code>。</p>\n<p><code>--bwlimit</code>参数指定带宽限制，默认单位是 KB/s，比如<code>--bwlimit=100</code>。</p>\n<p><code>-c</code>、<code>--checksum</code>参数改变<code>rsync</code>的校验方式。默认情况下，rsync 只检查文件的大小和最后修改日期是否发生变化，如果发生变化，就重新传输；使用这个参数以后，则通过判断文件内容的校验和，决定是否重新传输。</p>\n<p><code>--delete</code>参数删除只存在于目标目录、不存在于源目标的文件，即保证目标目录是源目标的镜像。</p>\n<p><code>-e</code>参数指定使用 SSH 协议传输数据。</p>\n<p><code>--exclude</code>参数指定排除不进行同步的文件，比如<code>--exclude=&quot;*.iso&quot;</code>。</p>\n<p><code>--exclude-from</code>参数指定一个本地文件，里面是需要排除的文件模式，每个模式一行。</p>\n<p><code>--existing</code>、<code>--ignore-non-existing</code>参数表示不同步目标目录中不存在的文件和目录。</p>\n<p><code>-h</code>参数表示以人类可读的格式输出。</p>\n<p><code>-h</code>、<code>--help</code>参数返回帮助信息。</p>\n<p><code>-i</code>参数表示输出源目录与目标目录之间文件差异的详细情况。</p>\n<p><code>--ignore-existing</code>参数表示只要该文件在目标目录中已经存在，就跳过去，不再同步这些文件。</p>\n<p><code>--include</code>参数指定同步时要包括的文件，一般与<code>--exclude</code>结合使用。</p>\n<p><code>--link-dest</code>参数指定增量备份的基准目录。</p>\n<p><code>-m</code>参数指定不同步空目录。</p>\n<p><code>--max-size</code>参数设置传输的最大文件的大小限制，比如不超过200KB（<code>--max-size=&#39;200k&#39;</code>）。</p>\n<p><code>--min-size</code>参数设置传输的最小文件的大小限制，比如不小于10KB（<code>--min-size=10k</code>）。</p>\n<p><code>-n</code>参数或<code>--dry-run</code>参数模拟将要执行的操作，而并不真的执行。配合<code>-v</code>参数使用，可以看到哪些内容会被同步过去。</p>\n<p><code>-P</code>参数是<code>--progress</code>和<code>--partial</code>这两个参数的结合。</p>\n<p><code>--partial</code>参数允许恢复中断的传输。不使用该参数时，<code>rsync</code>会删除传输到一半被打断的文件；使用该参数后，传输到一半的文件也会同步到目标目录，下次同步时再恢复中断的传输。一般需要与<code>--append</code>或<code>--append-verify</code>配合使用。</p>\n<p><code>--partial-dir</code>参数指定将传输到一半的文件保存到一个临时目录，比如<code>--partial-dir=.rsync-partial</code>。一般需要与<code>--append</code>或<code>--append-verify</code>配合使用。</p>\n<p><code>--progress</code>参数表示显示进展。</p>\n<p><code>-r</code>参数表示递归，即包含子目录。</p>\n<p><code>--remove-source-files</code>参数表示传输成功后，删除发送方的文件。</p>\n<p><code>--size-only</code>参数表示只同步大小有变化的文件，不考虑文件修改时间的差异。</p>\n<p><code>--suffix</code>参数指定文件名备份时，对文件名添加的后缀，默认是<code>~</code>。</p>\n<p><code>-u</code>、<code>--update</code>参数表示同步时跳过目标目录中修改时间更新的文件，即不同步这些有更新的时间戳的文件。</p>\n<p><code>-v</code>参数表示输出细节。<code>-vv</code>表示输出更详细的信息，<code>-vvv</code>表示输出最详细的信息。</p>\n<p><code>--version</code>参数返回 rsync 的版本。</p>\n<p><code>-z</code>参数指定同步时压缩数据。</p>\n<h2 id=\"参考链接-2\"><a href=\"#参考链接-2\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories-on-a-vps\">How To Use Rsync to Sync Local and Remote Directories on a VPS</a>, Justin Ellingwood</li>\n<li><a href=\"https://www.howtoforge.com/mirroring_with_rsync\">Mirror Your Web Site With rsync</a>, Falko Timme</li>\n<li><a href=\"https://linuxconfig.org/examples-on-how-to-use-rsync-for-local-and-remote-data-backups-and-synchonization\">Examples on how to use Rsync</a>, Egidio Docile</li>\n<li><a href=\"https://linuxconfig.org/how-to-create-incremental-backups-using-rsync-on-linux\">How to create incremental backups using rsync on Linux</a>, Egidio Docile</li>\n</ul>\n<h1 id=\"scp-命令\"><a href=\"#scp-命令\" class=\"headerlink\" title=\"scp 命令\"></a>scp 命令</h1><p><code>scp</code>是 SSH 提供的一个客户端程序，用来在两台主机之间加密传送文件（即复制文件）。</p>\n<h2 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>scp</code>是 secure copy 的缩写，相当于<code>cp</code>命令 + SSH。它的底层是 SSH 协议，默认端口是22，相当于先使用<code>ssh</code>命令登录远程主机，然后再执行拷贝操作。</p>\n<p><code>scp</code>主要用于以下三种复制操作。</p>\n<ul>\n<li>本地复制到远程。</li>\n<li>远程复制到本地。</li>\n<li>两个远程系统之间的复制。</li>\n</ul>\n<p>使用<code>scp</code>传输数据时，文件和密码都是加密的，不会泄漏敏感信息。</p>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p><code>scp</code>的语法类似<code>cp</code>的语法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> <span class=\"token builtin class-name\">source</span> destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>source</code>是文件当前的位置，<code>destination</code>是文件所要复制到的位置。它们都可以包含用户名和主机名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> user@host:foo.txt bar.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令将远程主机（<code>user@host</code>）用户主目录下的<code>foo.txt</code>，复制为本机当前目录的<code>bar.txt</code>。可以看到，主机与文件之间要使用冒号（<code>:</code>）分隔。</p>\n<p><code>scp</code>会先用 SSH 登录到远程主机，然后在加密连接之中复制文件。客户端发起连接后，会提示用户输入密码，这部分是跟 SSH 的用法一致的。</p>\n<p>用户名和主机名都是可以省略的。用户名的默认值是本机的当前用户名，主机名默认为当前主机。注意，<code>scp</code>会使用 SSH 客户端的配置文件<code>.ssh/config</code>，如果配置文件里面定义了主机的别名，这里也可以使用别名连接。</p>\n<p><code>scp</code>支持一次复制多个文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> source1 source2 destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令会将<code>source1</code>和<code>source2</code>两个文件，复制到<code>destination</code>。</p>\n<p>注意，如果所要复制的文件，在目标位置已经存在同名文件，<code>scp</code>会在没有警告的情况下覆盖同名文件。</p>\n<h2 id=\"用法示例\"><a href=\"#用法示例\" class=\"headerlink\" title=\"用法示例\"></a>用法示例</h2><p><strong>（1）本地文件复制到远程</strong></p>\n<p>复制本机文件到远程系统的用法如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 语法</span>\n$ <span class=\"token function\">scp</span> SourceFile user@host:directory/TargetFile\n\n<span class=\"token comment\"># 示例</span>\n$ <span class=\"token function\">scp</span> file.txt remote_username@10.10.0.2:/remote/directory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是复制整个目录的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 将本机的 documents 目录拷贝到远程主机，</span>\n<span class=\"token comment\"># 会在远程主机创建 documents 目录</span>\n$ <span class=\"token function\">scp</span> -r documents username@server_ip:/path_to_remote_directory\n\n<span class=\"token comment\"># 将本机整个目录拷贝到远程目录下</span>\n$ <span class=\"token function\">scp</span> -r localmachine/path_to_the_directory username@server_ip:/path_to_remote_directory/\n\n<span class=\"token comment\"># 将本机目录下的所有内容拷贝到远程目录下</span>\n$ <span class=\"token function\">scp</span> -r localmachine/path_to_the_directory/* username@server_ip:/path_to_remote_directory/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>（2）远程文件复制到本地</strong></p>\n<p>从远程主机复制文件到本地的用法如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 语法</span>\n$ <span class=\"token function\">scp</span> user@host:directory/SourceFile TargetFile\n\n<span class=\"token comment\"># 示例</span>\n$ <span class=\"token function\">scp</span> remote_username@10.10.0.2:/remote/file.txt /local/directory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是复制整个目录的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 拷贝一个远程目录到本机目录下</span>\n$ <span class=\"token function\">scp</span> -r username@server_ip:/path_to_remote_directory local-machine/path_to_the_directory/\n\n<span class=\"token comment\"># 拷贝远程目录下的所有内容，到本机目录下</span>\n$ <span class=\"token function\">scp</span> -r username@server_ip:/path_to_remote_directory/* local-machine/path_to_the_directory/\n$ <span class=\"token function\">scp</span> -r user@host:directory/SourceFolder TargetFolder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>（3）两个远程系统之间的复制</strong></p>\n<p>本机发出指令，从远程主机 A 拷贝到远程主机 B 的用法如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 语法</span>\n$ <span class=\"token function\">scp</span> user@host1:directory/SourceFile user@host2:directory/SourceFile\n\n<span class=\"token comment\"># 示例</span>\n$ <span class=\"token function\">scp</span> user1@host1.com:/files/file.txt user2@host2.com:/files<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>系统将提示你输入两个远程帐户的密码。数据将直接从一个远程主机传输到另一个远程主机。</p>\n<h2 id=\"配置项-2\"><a href=\"#配置项-2\" class=\"headerlink\" title=\"配置项\"></a>配置项</h2><p><strong>（1）<code>-c</code></strong></p>\n<p><code>-c</code>参数用来指定文件拷贝数据传输的加密算法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> -c blowfish some_file your_username@remotehost.edu:~<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码指定加密算法为<code>blowfish</code>。</p>\n<p><strong>（2）<code>-C</code></strong></p>\n<p><code>-C</code>参数表示是否在传输时压缩文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> -c blowfish -C local_file your_username@remotehost.edu:~<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（3）<code>-F</code></strong></p>\n<p><code>-F</code>参数用来指定 ssh_config 文件，供 ssh 使用。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> -F /home/pungki/proxy_ssh_config Label.pdf root@172.20.10.8:/root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（4）<code>-i</code></strong></p>\n<p><code>-i</code>参数用来指定密钥。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> -vCq -i private_key.pem ~/test.txt root@192.168.1.3:/some/path/test.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（5）<code>-l</code></strong></p>\n<p><code>-l</code>参数用来限制传输数据的带宽速率，单位是 Kbit/sec。对于多人分享的带宽，这个参数可以留出一部分带宽供其他人使用。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> -l <span class=\"token number\">80</span> yourusername@yourserver:/home/yourusername/* <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，<code>scp</code>命令占用的带宽限制为每秒 80K 比特位，即每秒 10K 字节。</p>\n<p><strong>（6）<code>-p</code></strong></p>\n<p><code>-p</code>参数用来保留修改时间（modification time）、访问时间（access time）、文件状态（mode）等原始文件的信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> -p ~/test.txt root@192.168.1.3:/some/path/test.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（7）<code>-P</code></strong></p>\n<p><code>-P</code>参数用来指定远程主机的 SSH 端口。如果远程主机使用默认端口22，可以不用指定，否则需要用<code>-P</code>参数在命令中指定。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> -P <span class=\"token number\">2222</span> user@host:directory/SourceFile TargetFile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（8）<code>-q</code></strong></p>\n<p><code>-q</code>参数用来关闭显示拷贝的进度条。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> -q Label.pdf mrarianto@202.x.x.x:.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（9）<code>-r</code></strong></p>\n<p><code>-r</code>参数表示是否以递归方式复制目录。</p>\n<p><strong>（10）<code>-v</code></strong></p>\n<p><code>-v</code>参数用来显示详细的输出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> -v ~/test.txt root@192.168.1.3:/root/help2356.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"SSH-服务器\"><a href=\"#SSH-服务器\" class=\"headerlink\" title=\"SSH 服务器\"></a>SSH 服务器</h1><h2 id=\"简介-4\"><a href=\"#简介-4\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>SSH 的架构是服务器/客户端模式，两端运行的软件是不一样的。OpenSSH 的客户端软件是 ssh，服务器软件是 sshd。本章介绍 sshd 的各种知识。</p>\n<p>如果没有安装 sshd，可以用下面的命令安装。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Debian</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">aptitude</span> <span class=\"token function\">install</span> openssh-server\n\n<span class=\"token comment\"># Red Hat</span>\n$ <span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> openssh-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一般来说，sshd 安装后会跟着系统一起启动。如果当前 sshd 没有启动，可以用下面的命令启动。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sshd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令运行后，如果提示“sshd re-exec requires execution with an absolute path”，就需要使用绝对路径来启动。这是为了防止有人出于各种目的，放置同名软件在<code>$PATH</code>变量指向的目录中，代替真正的 sshd。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Centos、Ubuntu、OS X</span>\n$ /usr/sbin/sshd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面的命令运行以后，sshd 自动进入后台，所以命令后面不需要加上<code>&amp;</code>。</p>\n<p>除了直接运行可执行文件，也可以通过 Systemd 启动 sshd。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 启动</span>\n$ <span class=\"token function\">sudo</span> systemctl start sshd.service\n\n<span class=\"token comment\"># 停止</span>\n$ <span class=\"token function\">sudo</span> systemctl stop sshd.service\n\n<span class=\"token comment\"># 重启</span>\n$ <span class=\"token function\">sudo</span> systemctl restart sshd.service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面的命令让 sshd 在计算机下次启动时自动运行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> sshd.service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"sshd-配置文件\"><a href=\"#sshd-配置文件\" class=\"headerlink\" title=\"sshd 配置文件\"></a>sshd 配置文件</h2><p>sshd 的配置文件在<code>/etc/ssh</code>目录，主配置文件是<code>sshd_config</code>，此外还有一些安装时生成的密钥。</p>\n<ul>\n<li><code>/etc/ssh/sshd_config</code>：配置文件</li>\n<li><code>/etc/ssh/ssh_host_ecdsa_key</code>：ECDSA 私钥。</li>\n<li><code>/etc/ssh/ssh_host_ecdsa_key.pub</code>：ECDSA 公钥。</li>\n<li><code>/etc/ssh/ssh_host_key</code>：用于 SSH 1 协议版本的 RSA 私钥。</li>\n<li><code>/etc/ssh/ssh_host_key.pub</code>：用于 SSH 1 协议版本的 RSA 公钥。</li>\n<li><code>/etc/ssh/ssh_host_rsa_key</code>：用于 SSH 2 协议版本的 RSA 私钥。</li>\n<li><code>/etc/ssh/ssh_host_rsa_key.pub</code>：用于 SSH 2 协议版本的 RSA 公钥。</li>\n<li><code>/etc/pam.d/sshd</code>：PAM 配置文件。</li>\n</ul>\n<p>注意，如果重装 sshd，上面这些密钥都会重新生成，导致客户端重新连接 ssh 服务器时，会跳出警告，拒绝连接。为了避免这种情况，可以在重装 sshd 时，先备份<code>/etc/ssh</code>目录，重装后再恢复这个目录。</p>\n<p>配置文件<code>sshd_config</code>的格式是，每个命令占据一行。每行都是配置项和对应的值，配置项的大小写不敏感，与值之间使用空格分隔。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Port <span class=\"token number\">2034</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的配置命令指定，配置项<code>Port</code>的值是<code>2034</code>。<code>Port</code>写成<code>port</code>也可。</p>\n<p>配置文件还有另一种格式，就是配置项与值之间有一个等号，等号前后的空格可选。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Port <span class=\"token operator\">=</span> <span class=\"token number\">2034</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>配置文件里面，<code>#</code>开头的行表示注释。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 这是一行注释</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意，注释只能放在一行的开头，不能放在一行的结尾。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Port <span class=\"token number\">2034</span> <span class=\"token comment\"># 此处不允许注释</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的写法是错误的。</p>\n<p>另外，空行等同于注释。</p>\n<p>sshd 启动时会自动读取默认的配置文件。如果希望使用其他的配置文件，可以用 sshd 命令的<code>-f</code>参数指定。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sshd -f /usr/local/ssh/my_config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令指定 sshd 使用另一个配置文件<code>my_config</code>。</p>\n<p>修改配置文件以后，可以用 sshd 命令的<code>-t</code>（test）检查有没有语法错误。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sshd -t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>配置文件修改以后，并不会自动生效，必须重新启动 sshd。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> systemctl restart sshd.service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"sshd-密钥\"><a href=\"#sshd-密钥\" class=\"headerlink\" title=\"sshd 密钥\"></a>sshd 密钥</h2><p>sshd 有自己的一对或多对密钥。它使用密钥向客户端证明自己的身份。所有密钥都是公钥和私钥成对出现，公钥的文件名一般是私钥文件名加上后缀<code>.pub</code>。</p>\n<p>DSA 格式的密钥文件默认为<code>/etc/ssh/ssh_host_dsa_key</code>（公钥为<code>ssh_host_dsa_key.pub</code>），RSA 格式的密钥为<code>/etc/ssh/ssh_host_rsa_key</code>（公钥为<code>ssh_host_rsa_key.pub</code>）。如果需要支持 SSH 1 协议，则必须有密钥<code>/etc/ssh/ssh_host_key</code>。</p>\n<p>如果密钥不是默认文件，那么可以通过配置文件<code>sshd_config</code>的<code>HostKey</code>配置项指定。默认密钥的<code>HostKey</code>设置如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># HostKey for protocol version 1</span>\n<span class=\"token comment\"># HostKey /etc/ssh/ssh_host_key</span>\n\n<span class=\"token comment\"># HostKeys for protocol version 2</span>\n<span class=\"token comment\"># HostKey /etc/ssh/ssh_host_rsa_key</span>\n<span class=\"token comment\"># HostKey /etc/ssh/ssh_host_dsa_ke</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令前面的<code>#</code>表示这些行都是注释，因为这是默认值，有没有这几行都一样。</p>\n<p>如果要修改密钥，就要去掉行首的<code>#</code>，指定其他密钥。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">HostKey /usr/local/ssh/my_dsa_key\nHostKey /usr/local/ssh/my_rsa_key\nHostKey /usr/local/ssh/my_old_ssh1_key<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"sshd-配置项\"><a href=\"#sshd-配置项\" class=\"headerlink\" title=\"sshd 配置项\"></a>sshd 配置项</h2><p>以下是<code>/etc/ssh/sshd_config</code>文件里面的配置项。</p>\n<p><strong>AcceptEnv</strong></p>\n<p><code>AcceptEnv</code>指定允许接受客户端通过<code>SendEnv</code>命令发来的哪些环境变量，即允许客户端设置服务器的环境变量清单，变量名之间使用空格分隔（<code>AcceptEnv PATH TERM</code>）。</p>\n<p><strong>AllowGroups</strong></p>\n<p><code>AllowGroups</code>指定允许登录的用户组（<code>AllowGroups groupName</code>，多个组之间用空格分隔。如果不使用该项，则允许所有用户组登录。</p>\n<p><strong>AllowUsers</strong></p>\n<p><code>AllowUsers</code>指定允许登录的用户，用户名之间使用空格分隔（<code>AllowUsers user1 user2</code>），也可以使用多行<code>AllowUsers</code>命令指定，用户名支持使用通配符。如果不使用该项，则允许所有用户登录。该项也可以使用<code>用户名@域名</code>的格式（比如<code>AllowUsers jones@example.com</code>）。</p>\n<p><strong>AllowTcpForwarding</strong></p>\n<p><code>AllowTcpForwarding</code>指定是否允许端口转发，默认值为<code>yes</code>（<code>AllowTcpForwarding yes</code>），<code>local</code>表示只允许本地端口转发，<code>remote</code>表示只允许远程端口转发。</p>\n<p><strong>AuthorizedKeysFile</strong></p>\n<p><code>AuthorizedKeysFile</code>指定储存用户公钥的目录，默认是用户主目录的<code>ssh/authorized_keys</code>目录（<code>AuthorizedKeysFile .ssh/authorized_keys</code>）。</p>\n<p><strong>Banner</strong></p>\n<p><code>Banner</code>指定用户登录后，sshd 向其展示的信息文件（<code>Banner /usr/local/etc/warning.txt</code>），默认不展示任何内容。</p>\n<p><strong>ChallengeResponseAuthentication</strong></p>\n<p><code>ChallengeResponseAuthentication</code>指定是否使用“键盘交互”身份验证方案，默认值为<code>yes</code>（<code>ChallengeResponseAuthentication yes</code>）。</p>\n<p>从理论上讲，“键盘交互”身份验证方案可以向用户询问多重问题，但是实践中，通常仅询问用户密码。如果要完全禁用基于密码的身份验证，请将<code>PasswordAuthentication</code>和<code>ChallengeResponseAuthentication</code>都设置为<code>no</code>。</p>\n<p><strong>Ciphers</strong></p>\n<p><code>Ciphers</code>指定 sshd 可以接受的加密算法（<code>Ciphers 3des-cbc</code>），多个算法之间使用逗号分隔。</p>\n<p><strong>ClientAliveCountMax</strong></p>\n<p><code>ClientAliveCountMax</code>指定建立连接后，客户端失去响应时，服务器尝试连接的次数（<code>ClientAliveCountMax 8</code>）。</p>\n<p><strong>ClientAliveInterval</strong></p>\n<p><code>ClientAliveInterval</code>指定允许客户端发呆的时间，单位为秒（<code>ClientAliveInterval 180</code>）。如果这段时间里面，客户端没有发送任何信号，SSH 连接将关闭。</p>\n<p><strong>Compression</strong></p>\n<p><code>Compression</code>指定客户端与服务器之间的数据传输是否压缩。默认值为<code>yes</code>（<code>Compression yes</code>）</p>\n<p><strong>DenyGroups</strong></p>\n<p><code>DenyGroups</code>指定不允许登录的用户组（<code>DenyGroups groupName</code>）。</p>\n<p><strong>DenyUsers</strong></p>\n<p><code>DenyUsers</code>指定不允许登录的用户（<code>DenyUsers user1</code>），用户名之间使用空格分隔，也可以使用多行<code>DenyUsers</code>命令指定。</p>\n<p><strong>FascistLogging</strong></p>\n<p>SSH 1 版本专用，指定日志输出全部 Debug 信息（<code>FascistLogging yes</code>）。</p>\n<p><strong>HostKey</strong></p>\n<p><code>HostKey</code>指定 sshd 服务器的密钥，详见前文。</p>\n<p><strong>KeyRegenerationInterval</strong></p>\n<p><code>KeyRegenerationInterval</code>指定 SSH 1 版本的密钥重新生成时间间隔，单位为秒，默认是3600秒（<code>KeyRegenerationInterval 3600</code>）。</p>\n<p><strong>ListenAddress</strong></p>\n<p><code>ListenAddress</code>指定 sshd 监听的本机 IP 地址，即 sshd 启用的 IP 地址，默认是 0.0.0.0（<code>ListenAddress 0.0.0.0</code>）表示在本机所有网络接口启用。可以改成只在某个网络接口启用（比如<code>ListenAddress 192.168.10.23</code>），也可以指定某个域名启用（比如<code>ListenAddress server.example.com</code>）。</p>\n<p>如果要监听多个指定的 IP 地址，可以使用多行<code>ListenAddress</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ListenAddress <span class=\"token number\">172.16</span>.1.1\nListenAddress <span class=\"token number\">192.168</span>.0.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>LoginGraceTime</strong></p>\n<p><code>LoginGraceTime</code>指定允许客户端登录时发呆的最长时间，比如用户迟迟不输入密码，连接就会自动断开，单位为秒（<code>LoginGraceTime 60</code>）。如果设为<code>0</code>，就表示没有限制。</p>\n<p><strong>LogLevel</strong></p>\n<p><code>LogLevel</code>指定日志的详细程度，可能的值依次为<code>QUIET</code>、<code>FATAL</code>、<code>ERROR</code>、<code>INFO</code>、<code>VERBOSE</code>、<code>DEBUG</code>、<code>DEBUG1</code>、<code>DEBUG2</code>、<code>DEBUG3</code>，默认为<code>INFO</code>（<code>LogLevel INFO</code>）。</p>\n<p><strong>MACs</strong></p>\n<p><code>MACs</code>指定sshd 可以接受的数据校验算法（<code>MACs hmac-sha1</code>），多个算法之间使用逗号分隔。</p>\n<p><strong>MaxAuthTries</strong></p>\n<p><code>MaxAuthTries</code>指定允许 SSH 登录的最大尝试次数（<code>MaxAuthTries 3</code>），如果密码输入错误达到指定次数，SSH 连接将关闭。</p>\n<p><strong>MaxStartups</strong></p>\n<p><code>MaxStartups</code>指定允许同时并发的 SSH 连接数量（MaxStartups）。如果设为<code>0</code>，就表示没有限制。</p>\n<p>这个属性也可以设为<code>A:B:C</code>的形式，比如<code>MaxStartups 10:50:20</code>，表示如果达到10个并发连接，后面的连接将有50%的概率被拒绝；如果达到20个并发连接，则后面的连接将100%被拒绝。</p>\n<p><strong>PasswordAuthentication</strong></p>\n<p><code>PasswordAuthentication</code>指定是否允许密码登录，默认值为<code>yes</code>（<code>PasswordAuthentication yes</code>），建议改成<code>no</code>（禁止密码登录，只允许密钥登录）。</p>\n<p><strong>PermitEmptyPasswords</strong></p>\n<p><code>PermitEmptyPasswords</code>指定是否允许空密码登录，即用户的密码是否可以为空，默认为<code>yes</code>（<code>PermitEmptyPasswords yes</code>），建议改成<code>no</code>（禁止无密码登录）。</p>\n<p><strong>PermitRootLogin</strong></p>\n<p><code>PermitRootLogin</code>指定是否允许根用户登录，默认为<code>yes</code>（<code>PermitRootLogin yes</code>），建议改成<code>no</code>（禁止根用户登录）。</p>\n<p>还有一种写法是写成<code>prohibit-password</code>，表示 root 用户不能用密码登录，但是可以用密钥登录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">PermitRootLogin prohibit-password<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>PermitUserEnvironment</strong></p>\n<p><code>PermitUserEnvironment</code>指定是否允许 sshd 加载客户端的<code>~/.ssh/environment</code>文件和<code>~/.ssh/authorized_keys</code>文件里面的<code>environment= options</code>环境变量设置。默认值为<code>no</code>（<code>PermitUserEnvironment no</code>）。</p>\n<p><strong>Port</strong></p>\n<p><code>Port</code>指定 sshd 监听的端口，即客户端连接的端口，默认是22（<code>Port 22</code>）。出于安全考虑，可以改掉这个端口（比如<code>Port 8822</code>）。</p>\n<p>配置文件可以使用多个<code>Port</code>命令，同时监听多个端口。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Port <span class=\"token number\">22</span>\nPort <span class=\"token number\">80</span>\nPort <span class=\"token number\">443</span>\nPort <span class=\"token number\">8080</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的示例表示同时监听4个端口。</p>\n<p><strong>PrintMotd</strong></p>\n<p><code>PrintMotd</code>指定用户登录后，是否向其展示系统的 motd（Message of the day）的信息文件<code>/etc/motd</code>。该文件用于通知所有用户一些重要事项，比如系统维护时间、安全问题等等。默认值为<code>yes</code>（<code>PrintMotd yes</code>），由于 Shell 一般会展示这个信息文件，所以这里可以改为<code>no</code>。</p>\n<p><strong>PrintLastLog</strong></p>\n<p><code>PrintLastLog</code>指定是否打印上一次用户登录时间，默认值为<code>yes</code>（<code>PrintLastLog yes</code>）。</p>\n<p><strong>Protocol</strong></p>\n<p><code>Protocol</code>指定 sshd 使用的协议。<code>Protocol 1</code>表示使用 SSH 1 协议，建议改成<code>Protocol 2</code>（使用 SSH 2 协议）。<code>Protocol 2,1</code>表示同时支持两个版本的协议。</p>\n<p><strong>PubKeyAuthentication</strong></p>\n<p><code>PubKeyAuthentication</code>指定是否允许公钥登录，默认值为<code>yes</code>（<code>PubKeyAuthentication yes</code>）。</p>\n<p><strong>QuietMode</strong></p>\n<p>SSH 1 版本专用，指定日志只输出致命的错误信息（<code>QuietMode yes</code>）。</p>\n<p><strong>RSAAuthentication</strong></p>\n<p><code>RSAAuthentication</code>指定允许 RSA 认证，默认值为<code>yes</code>（<code>RSAAuthentication yes</code>）。</p>\n<p><strong>ServerKeyBits</strong></p>\n<p><code>ServerKeyBits</code>指定 SSH 1 版本的密钥重新生成时的位数，默认是768（<code>ServerKeyBits 768</code>）。</p>\n<p><strong>StrictModes</strong></p>\n<p><code>StrictModes</code>指定 sshd 是否检查用户的一些重要文件和目录的权限。默认为<code>yes</code>（<code>StrictModes yes</code>），即对于用户的 SSH 配置文件、密钥文件和所在目录，SSH 要求拥有者必须是根用户或用户本人，用户组和其他人的写权限必须关闭。</p>\n<p><strong>SyslogFacility</strong></p>\n<p><code>SyslogFacility</code>指定 Syslog 如何处理 sshd 的日志，默认是 Auth（<code>SyslogFacility AUTH</code>）。</p>\n<p><strong>TCPKeepAlive</strong></p>\n<p><code>TCPKeepAlive</code>指定打开 sshd 跟客户端 TCP 连接的 keepalive 参数（<code>TCPKeepAlive yes</code>）。</p>\n<p><strong>UseDNS</strong></p>\n<p><code>UseDNS</code>指定用户 SSH 登录一个域名时，服务器是否使用 DNS，确认该域名对应的 IP 地址包含本机（<code>UseDNS yes</code>）。打开该选项意义不大，而且如果 DNS 更新不及时，还有可能误判，建议关闭。</p>\n<p><strong>UseLogin</strong></p>\n<p><code>UseLogin</code>指定用户认证内部是否使用<code>/usr/bin/login</code>替代 SSH 工具，默认为<code>no</code>（<code>UseLogin no</code>）。</p>\n<p><strong>UserPrivilegeSeparation</strong></p>\n<p><code>UserPrivilegeSeparation</code>指定用户认证通过以后，使用另一个子线程处理用户权限相关的操作，这样有利于提高安全性。默认值为<code>yes</code>（<code>UsePrivilegeSeparation yes</code>）。</p>\n<p><strong>VerboseMode</strong></p>\n<p>SSH 2 版本专用，指定日志输出详细的 Debug 信息（<code>VerboseMode yes</code>）。</p>\n<p><strong>X11Forwarding</strong></p>\n<p><code>X11Forwarding</code>指定是否打开 X window 的转发，默认值为 no（<code>X11Forwarding no</code>）。</p>\n<p>修改配置文件以后，可以使用下面的命令验证，配置文件是否有语法错误。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sshd -t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>新的配置文件生效，必须重启 sshd。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> systemctl restart sshd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"sshd-的命令行配置项\"><a href=\"#sshd-的命令行配置项\" class=\"headerlink\" title=\"sshd 的命令行配置项\"></a>sshd 的命令行配置项</h2><p>sshd 命令有一些配置项。这些配置项在调用时指定，可以覆盖配置文件的设置。</p>\n<p>（1）<code>-d</code></p>\n<p><code>-d</code>参数用于显示 debug 信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sshd -d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（2）<code>-D</code></p>\n<p><code>-D</code>参数指定 sshd 不作为后台守护进程运行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sshd -D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（3）<code>-e</code></p>\n<p><code>-e</code>参数将 sshd 写入系统日志 syslog 的内容导向标准错误（standard error）。</p>\n<p>（4）<code>-f</code></p>\n<p><code>-f</code>参数指定配置文件的位置。</p>\n<p>（5）<code>-h</code></p>\n<p><code>-h</code>参数用于指定密钥。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sshd -h /usr/local/ssh/my_rsa_key<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（6）<code>-o</code></p>\n<p><code>-o</code>参数指定配置文件的一个配置项和对应的值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sshd -o <span class=\"token string\">\"Port 2034\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>配置项和对应值之间，可以使用等号。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sshd -o <span class=\"token string\">\"Port = 2034\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果省略等号前后的空格，也可以不使用引号。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sshd -o <span class=\"token assign-left variable\">Port</span><span class=\"token operator\">=</span><span class=\"token number\">2034</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>-o</code>参数可以多个一起使用，用来指定多个配置关键字。</p>\n<p>（7）<code>-p</code></p>\n<p><code>-p</code>参数指定 sshd 的服务端口。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sshd -p <span class=\"token number\">2034</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令指定 sshd 在<code>2034</code>端口启动。</p>\n<p><code>-p</code>参数可以指定多个端口。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sshd -p <span class=\"token number\">2222</span> -p <span class=\"token number\">3333</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（8）<code>-t</code></p>\n<p><code>-t</code>参数检查配置文件的语法是否正确。</p>\n<h1 id=\"sftp-命令\"><a href=\"#sftp-命令\" class=\"headerlink\" title=\"sftp 命令\"></a>sftp 命令</h1><p><code>sftp</code>是 SSH 提供的一个客户端应用程序，主要用来安全地访问 FTP。因为 FTP 是不加密协议，很不安全，<code>sftp</code>就相当于将 FTP 放入了 SSH。</p>\n<p>下面的命令连接 FTP 主机。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">sftp</span> username@hostname<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行上面的命令，会要求输入 FTP 的密码。密码验证成功以后，就会出现 FTP 的提示符<code>sftp&gt; </code>，下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">sftp</span> <span class=\"token environment constant\">USER</span>@penguin.example.com\n<span class=\"token environment constant\">USER</span>@penguin.example.com's password:\nConnected to penguin.example.com.\nsftp<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>FTP 的提示符下面，就可以输入各种 FTP 命令了，这部分完全跟传统的 FTP 用法完全一样。</p>\n<ul>\n<li><code>ls [directory]</code>：列出一个远程目录的内容。如果没有指定目标目录，则默认列出当前目录。</li>\n<li><code>cd directory</code>：从当前目录改到指定目录。</li>\n<li><code>mkdir directory</code>：创建一个远程目录。</li>\n<li><code>rmdir path</code>：删除一个远程目录。</li>\n<li><code>put localfile [remotefile]</code>：本地文件传输到远程主机。</li>\n<li><code>get remotefile [localfile]</code>：远程文件传输到本地。</li>\n<li><code>help</code>：显示帮助信息。</li>\n<li><code>bye</code>：退出 sftp。</li>\n<li><code>quit</code>：退出 sftp。</li>\n<li><code>exit</code>：退出 sftp。</li>\n</ul>\n","categories":["Programming","SSH","Shell","脚本"],"tags":["Programming","SSH","Shell","脚本"]},{"title":"C 语言——标准库","url":"/2021/10/11/C%20%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93/","content":"<h1 id=\"assert-h\"><a href=\"#assert-h\" class=\"headerlink\" title=\"assert.h\"></a>assert.h</h1><h2 id=\"assert\"><a href=\"#assert\" class=\"headerlink\" title=\"assert()\"></a>assert()</h2><p><code>assert.h</code>头文件定义了宏<code>assert()</code>，用于在运行时确保程序符合指定条件，如果不符合，就报错终止运行。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码在程序运行到这一行语句时，验证变量是否<code>PI</code>大于3。如果确实大于3，程序继续运行，否则就会终止运行，并且给出报错信息提示。</p>\n<p><code>assert()</code>宏接受一个表达式作为参数，如果表达式的返回值非零，<code>assert()</code>就会报错，在标准错误流<code>stderr</code>中写入一条错误信息，显示没有通过的表达式，以及包含这个表达式的文件名和行号。最后，调用<code>abort()</code>函数终止程序（<code>abort()</code>函数的原型在<code>stdlib.h</code>头文件中）。</p>\n<a id=\"more\"></a>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">z <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> x <span class=\"token operator\">-</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面的<code>assert()</code>语句类似于下面的代码。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z less than 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果断言失败，程序会中断执行，会显示下面的提示。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">Assertion failed<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> function main<span class=\"token punctuation\">,</span> file <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>assert<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span> line <span class=\"token number\">14.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面报错的格式如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">Assertion failed<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>expression<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> function <span class=\"token punctuation\">[</span>abc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> file <span class=\"token punctuation\">[</span>xyz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> line <span class=\"token punctuation\">[</span>nnn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，方括号的部分使用实际数据替换掉。</p>\n<p>使用 assert() 有几个好处：它不仅能自动标识文件和出问题的行号，还有一种无需更改代码就能开启或关闭 assert() 的机制。如果已经确认程序没有问题，不需要再做断言，就在<code>#include &lt;assert.h&gt;</code>语句的前面，定义一个宏<code>NDEBUG</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">NDEBUG</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>然后，重新编译程序，编译器就会禁用文件中所有的 assert() 语句。如果程序又出现问题，可以移除这条<code>#define NDBUG</code>指令（或者把它注释掉），再次编译，这样就重新启用了 assert() 语句。</p>\n<p>assert() 的缺点是，因为引入了额外的检查，增加了程序的运行时间。</p>\n<h2 id=\"static-assert\"><a href=\"#static-assert\" class=\"headerlink\" title=\"static_assert()\"></a>static_assert()</h2><p>C11 引入了静态断言<code>static_assert()</code>，用于在编译阶段进行断言判断。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">static_assert</span><span class=\"token punctuation\">(</span>constant<span class=\"token operator\">-</span>expression<span class=\"token punctuation\">,</span> string<span class=\"token operator\">-</span>literal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>static_assert()</code>接受两个参数，第一个参数<code>constant-expression</code>是一个常量表达式，第二个参数<code>string-literal</code>是一个提示字符串。如果第一个参数的值为false，会产生一条编译错误，第二个参数就是错误提示信息。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">static_assert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"64-bit code generation is not supported.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码的意思是，如果当前计算机的<code>int</code>类型不等于4个字节，就会编译报错。</p>\n<p>注意，<code>static_assert()</code>只在编译阶段运行，无法获得变量的值。如果对变量进行静态断言，就会导致编译错误。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">positive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">static_assert</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value must > 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码会导致编译报错，因为编译时无法知道变量<code>n</code>的值。</p>\n<p><code>static_assert()</code>的好处是，尽量在编译阶段发现错误，避免运行时再报错，节省开发时间。另外，有些<code>assert()</code>断言位于函数之中，如果不执行该函数，就不会报错，而<code>static_assert()</code>不管函数是否执行，都会进行断言判断。最后，<code>static_assert()</code>不会生成可执行代码，所以不会造成任何运行时的性能损失。</p>\n<h1 id=\"ctype-h\"><a href=\"#ctype-h\" class=\"headerlink\" title=\"ctype.h\"></a>ctype.h</h1><p><code>ctype.h</code>头文件定义了一系列字符处理函数的原型。</p>\n<h2 id=\"字符测试函数\"><a href=\"#字符测试函数\" class=\"headerlink\" title=\"字符测试函数\"></a>字符测试函数</h2><p>这些函数用来判断字符是否属于某种类型。</p>\n<ul>\n<li><code>isalnum()</code>：是否为字母数字</li>\n<li><code>isalpha()</code>：是否为字母</li>\n<li><code>isdigit()</code>：是否为数字</li>\n<li><code>isxdigit()</code>：是否为十六进制数字符</li>\n<li><code>islower()</code>：是否为小写字母</li>\n<li><code>isupper()</code>：是否为大写字母</li>\n<li><code>isblank()</code>：是否为标准的空白字符（包含空格、水平制表符或换行符）</li>\n<li><code>isspace()</code>：是否为空白字符（空格、换行符、换页符、回车符、垂直制表符、水平制表符等）</li>\n<li><code>iscntrl()</code>：是否为控制字符，比如 Ctrl + B</li>\n<li><code>isprint()</code>：是否为可打印字符</li>\n<li><code>isgraph()</code>：是否为空格以外的任意可打印字符</li>\n<li><code>ispunct()</code>：是否为标点符号（除了空格、字母、数字以外的可打印字符）</li>\n</ul>\n<p>它们接受一个待测试的字符作为参数。注意，参数类型为<code>int</code>，而不是<code>char</code>，因为它们允许 EOF 作为参数。</p>\n<p>如果参数字符属于指定类型，就返回一个非零整数（通常是<code>1</code>，表示为真），否则返回<code>0</code>（表示为伪）。</p>\n<p>下面是一个例子，用户输入一个字符，程序判断是否为英文字母。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isalpha</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it is an alpha character.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it is not an alpha character.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符映射函数\"><a href=\"#字符映射函数\" class=\"headerlink\" title=\"字符映射函数\"></a>字符映射函数</h2><p>这一类函数返回字符的某种对应形式，主要有两个函数。</p>\n<ul>\n<li><code>tolower()</code>：如果参数是大写字符，返回小写字符，否则返回原始参数。</li>\n<li><code>toupper()</code>：如果参数是小写字符，返回大写字符，否则返回原始参数。</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 将字符转为大写</span>\nch <span class=\"token operator\">=</span> <span class=\"token function\">toupper</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意，这两个函数不会改变原始字符。</p>\n<h1 id=\"errno-h\"><a href=\"#errno-h\" class=\"headerlink\" title=\"errno.h\"></a>errno.h</h1><h2 id=\"errno-变量\"><a href=\"#errno-变量\" class=\"headerlink\" title=\"errno 变量\"></a>errno 变量</h2><p><code>errno.h</code>声明了一个 int 类型的 errno 变量，用来存储错误码（正整数）。</p>\n<p>如果这个变量有非零值，表示已经执行的程序发生了错误。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\nerrno <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sqrt error; program terminated.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，计算一个负值的平方根是不允许的，会导致<code>errno</code>不等于<code>0</code>。</p>\n<p>如果要检查某个函数是否发生错误，必须在即将调用该函数之前，将<code>errno</code>的值置为0，防止其他函数改变<code>errno</code>的值。</p>\n<h2 id=\"宏\"><a href=\"#宏\" class=\"headerlink\" title=\"宏\"></a>宏</h2><p>变量<code>errno</code>的值通常是两个宏<code>EDOM</code>或<code>ERANGE</code>。这两个宏都定义在<code>errno.h</code>。它们表示调用数学函数时，可能发生的两种错误。</p>\n<ul>\n<li>定义域错误（EDOM）：传递给函数的一个参数超出了函数的定义域。例如，负数传入<code>sqrt()</code>作为参数。</li>\n<li>取值范围错误（ERANGE）：函数的返回值太大，无法用返回类型表示。例如，1000 传入<code>exp()</code>作为参数，因为 e^1000 太大，无法使用 double 类型表示。</li>\n</ul>\n<p>使用数学函数时，可以将<code>errno</code>的值与 EDOM 和 ERANGE 比较，用来确定到底发生了哪一类错误。</p>\n<h1 id=\"float-h\"><a href=\"#float-h\" class=\"headerlink\" title=\"float.h\"></a>float.h</h1><p><code>float.h</code>定义了浮点数类型 float、double、long double 的一些宏，规定了这些类型的范围和精度。</p>\n<p>(1) <code>FLT_ROUNDS</code></p>\n<p>宏<code>FLT_ROUNDS</code>表示当前浮点数加法的四舍五入方向。</p>\n<p>它有以下可能的值。</p>\n<ul>\n<li>-1：不确定。</li>\n<li>0：向零舍入。</li>\n<li>1：向最近的整数舍入。</li>\n<li>2：向正无穷方向舍入。</li>\n<li>3：向负无穷方向舍入。</li>\n</ul>\n<p>（2）<code>FLT_RADIX</code></p>\n<p>宏<code>FLT_RADIX</code>表示科学计数法的指数部分的底（base），一般总是2。</p>\n<p>（3）浮点数类型的最大值</p>\n<ul>\n<li><code>FLT_MAX</code></li>\n<li><code>DBL_MAX</code></li>\n<li><code>LDBL_MAX</code></li>\n</ul>\n<p>（4）浮点数类型的最小正值</p>\n<ul>\n<li><code>FLT_MIN</code></li>\n<li><code>DBL_MIN</code></li>\n<li><code>LDBL_MIN</code></li>\n</ul>\n<p>（5）两个同类型浮点数之间可表示的最小差值（最小精度）</p>\n<ul>\n<li><code>FLT_EPSILON</code></li>\n<li><code>DBL_EPSILON</code></li>\n<li><code>LDBL_EPSILON</code></li>\n</ul>\n<p>（6）<code>DECIMAL_DIG</code></p>\n<p>宏<code>DECIMAL_DIG</code>表示十进制有效位数。</p>\n<p>（7）<code>FLT_EVAL_METHOD</code></p>\n<p>宏<code>FLT_EVAL_METHOD</code>表示浮点数运算时的类型转换。</p>\n<p>它可能有以下值。</p>\n<ul>\n<li>-1：不确定。</li>\n<li>0：在当前类型中运算。</li>\n<li>1：float 和 double 类型的运算使用 double 类型的范围和精度求值。</li>\n<li>2：所有浮点数类型的运算使用 long double 类型的范围和精度求值。</li>\n</ul>\n<p>（8）浮点数尾数部分的个数</p>\n<ul>\n<li><code>FLT_MANT_DIG</code></li>\n<li><code>DBL_MANT_DIG</code></li>\n<li><code>LDBL_MANT_DIG</code></li>\n</ul>\n<p>（9）浮点数指数部分有效数字的个数（十进制）</p>\n<ul>\n<li><code>FLT_DIG</code></li>\n<li><code>DBL_DIG</code></li>\n<li><code>LDBL_DIG</code></li>\n</ul>\n<p>（10）科学计数法的指数部分的最小次幂（负数）</p>\n<ul>\n<li><code>FLT_MIN_EXP</code></li>\n<li><code>DBL_MIN_EXP</code></li>\n<li><code>LDBL_MIN_EXP</code></li>\n</ul>\n<p>（11）科学计数法的指数部分的十进制最小次幂（负数）</p>\n<ul>\n<li><code>FLT_MIN_10_EXP</code></li>\n<li><code>DBL_MIN_10_EXP</code></li>\n<li><code>LDBL_MIN_10_EXP</code></li>\n</ul>\n<p>（12）科学计数法的指数部分的最大次幂</p>\n<ul>\n<li><code>FLT_MAX_EXP</code></li>\n<li><code>DBL_MAX_EXP</code></li>\n<li><code>LDBL_MAX_EXP</code></li>\n</ul>\n<p>科学计数法的指数部分的十进制最大次幂</p>\n<ul>\n<li><code>FLT_MAX_10_EXP</code></li>\n<li><code>DBL_MAX_10_EXP</code></li>\n<li><code>LDBL_MAX_10_EXP</code></li>\n</ul>\n<h1 id=\"inttypes-h\"><a href=\"#inttypes-h\" class=\"headerlink\" title=\"inttypes.h\"></a>inttypes.h</h1><p>C 语言还在头文件 inttypes.h 里面，为 stdint.h 定义的四类整数类型，提供了<code>printf()</code>和<code>scanf()</code>的占位符。</p>\n<ul>\n<li>固定宽度整数类型，比如 int8_t。</li>\n<li>最小宽度整数类型，比如 int_least8_t。</li>\n<li>最快最小宽度整数类型，比如 int_fast8_t。</li>\n<li>最大宽度整数类型，比如 intmax_t。</li>\n</ul>\n<p><code>printf()</code>的占位符采用<code>PRI + 原始占位符 + 类型关键字/宽度</code>的形式构成。举例来说，原始占位符为<code>%d</code>，则对应的占位符如下。</p>\n<ul>\n<li>PRIdn （固定宽度类型）</li>\n<li>PRIdLEASTn （最小宽度类型）</li>\n<li>PRIdFASTn （最快最小宽度类型）</li>\n<li>PRIdMAX （最大宽度类型）</li>\n</ul>\n<p>上面占位符中的<code>n</code>，可以用8、16、32、64代入。</p>\n<p>下面是用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;inttypes.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  int_least16_t x <span class=\"token operator\">=</span> <span class=\"token number\">3490</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value is %\"</span> PRIdLEAST16 <span class=\"token string\">\"!\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>PRIdLEAST16</code>对应的整数类型为 int_least16_t，原始占位符为<code>%d</code>。另外，<code>printf()</code>的第一个参数用到了多个字符串自动合并的写法。</p>\n<p>下面是其它的原始占位符对应的占位符。</p>\n<ul>\n<li>%i：PRIin    PRIiLEASTn    PRIiFASTn    PRIiMAX</li>\n<li>%o：PRIon    PRIoLEASTn    PRIoFASTn    PRIoMAX</li>\n<li>%u：PRIun    PRIuLEASTn    PRIuFASTn    PRIuMAX</li>\n<li>%x：PRIxn    PRIxLEASTn    PRIxFASTn    PRIxMAX</li>\n<li>%X：PRIXn    PRIXLEASTn    PRIXFASTn    PRIXMAX</li>\n</ul>\n<p><code>scanf()</code>的占位符规则也与之类似。</p>\n<ul>\n<li>%d：SCNdn    SCNdLEASTn    SCNdFASTn    SCNdMAX</li>\n<li>%i：SCNin    SCNiLEASTn    SCNiFASTn    SCNiMAX</li>\n<li>%o：SCNon    SCNoLEASTn    SCNoFASTn    SCNoMAX</li>\n<li>%u：SCNun    SCNuLEASTn    SCNuFASTn    SCNuMAX</li>\n<li>%x：SCNxn    SCNxLEASTn    SCNxFASTn    SCNxMAX</li>\n</ul>\n<h1 id=\"iso646-h\"><a href=\"#iso646-h\" class=\"headerlink\" title=\"iso646.h\"></a>iso646.h</h1><p><code>iso646.h</code>头文件指定了一些常见运算符的替代拼写。比如，它用关键字<code>and</code>代替逻辑运算符<code>&amp;&amp;</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">6</span> and x <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">6</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>它定义的替代拼写如下。</p>\n<ul>\n<li>and    替代 &amp;&amp;</li>\n<li>and_eq 替代 &amp;=</li>\n<li>bitand 替代 &amp;</li>\n<li>bitor 替代 |</li>\n<li>compl 替代 ~</li>\n<li>not 替代 !</li>\n<li>not_eq 替代 !=</li>\n<li>or 替代 ||</li>\n<li>or_eq 替代 |=</li>\n<li>xor 替代 ^</li>\n<li>xor_eq 替代 ^=</li>\n</ul>\n<h1 id=\"limits-h\"><a href=\"#limits-h\" class=\"headerlink\" title=\"limits.h\"></a>limits.h</h1><p><code>limits.h</code>提供了用来定义各种整数类型（包括字符类型）取值范围的宏。</p>\n<ul>\n<li><code>CHAR_BIT</code>：每个字符包含的二进制位数。</li>\n<li><code>SCHAR_MIN</code>：signed char 类型的最小值。</li>\n<li><code>SCHAR_MAX</code>：signed char 类型的最大值。</li>\n<li><code>UCHAR_MAX</code>：unsiged char 类型的最大值。</li>\n<li><code>CHAR_MIN</code>：char 类型的最小值。</li>\n<li><code>CHAR_MAX</code>：char 类型的最大值。</li>\n<li><code>MB_LEN_MAX</code>：多字节字符最多包含的字节数。</li>\n<li><code>SHRT_MIN</code>：short int 类型的最小值。</li>\n<li><code>SHRT_MAX</code>：short int 类型的最大值。</li>\n<li><code>USHRT_MAX</code>：unsigned short int 类型的最大值。</li>\n<li><code>INT_MIN</code>：int 类型的最小值。</li>\n<li><code>INT_MAX</code>：int 类型的最大值。</li>\n<li><code>UINT_MAX</code>：unsigned int 类型的最大值。</li>\n<li><code>LONG_MIN</code>：long int 类型的最小值。</li>\n<li><code>LONG_MAX</code>：long int 类型的最大值。</li>\n<li><code>ULONG_MAX</code>：unsigned long int 类型的最大值。</li>\n<li><code>LLONG_MIN</code>：long long int 类型的最小值。</li>\n<li><code>LLONG_MAX</code>：long long int 类型的最大值。</li>\n<li><code>ULLONG_MAX</code>：unsigned long long int 类型的最大值。</li>\n</ul>\n<p>下面的示例是使用预处理指令判断，int 类型是否可以用来存储大于 100000 的数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">INT_MAX <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span></span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">error</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> type is too small</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，如果 int 类型太小，预处理器会显示一条出错消息。</p>\n<p>可以使用<code>limit.h</code>里面的宏，为类型别名选择正确的底层类型。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">INT_MAX <span class=\"token operator\">>=</span> <span class=\"token number\">100000</span></span></span>\n  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Quantity<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> Quantity<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，如果整数类型的最大值（<code>INT_MAX</code>）不小于100000，那么类型别名<code>Quantity</code>指向<code>int</code>，否则就指向<code>long int</code>。</p>\n<h1 id=\"locale-h\"><a href=\"#locale-h\" class=\"headerlink\" title=\"locale.h\"></a>locale.h</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>locale.h</code>是程序的本地化设置，主要影响以下的行为。</p>\n<ul>\n<li>数字格式</li>\n<li>货币格式</li>\n<li>字符集</li>\n<li>日期和时间格式</li>\n</ul>\n<p>它设置了以下几个宏。</p>\n<ul>\n<li>LC_COLLATE：影响字符串比较函数<code>strcoll()</code>和<code>strxfrm()</code>。</li>\n<li>LC_CTYPE：影响字符处理函数的行为。</li>\n<li>LC_MONETARY：影响货币格式。</li>\n<li>LC_NUMERIC：影响<code>printf()</code>的数字格式。</li>\n<li>LC_TIME：影响时间格式<code>strftime()</code>和<code>wcsftime()</code>。</li>\n<li>LC_ALL：将以上所有类别设置为给定的语言环境。</li>\n</ul>\n<h2 id=\"setlocale\"><a href=\"#setlocale\" class=\"headerlink\" title=\"setlocale()\"></a>setlocale()</h2><p><code>setlocale()</code>用来设置当前的地区。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">setlocal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> category<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数。第一个参数表示影响范围，如果值为前面五个表示类别的宏之一，则只影响该宏对应的类别，如果值为<code>LC_ALL</code>，则影响所有类别。第二个参数通常只为<code>&quot;C&quot;</code>（正常模式）或<code>&quot;&quot;</code>（本地模式）。</p>\n<p>任意程序开始时，都隐含下面的调用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">setlocale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面的语句将格式本地化。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">set_locale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，第二个参数为空字符，表示使用当前环境提供的本地化设置。</p>\n<p>理论上，第二个参数也可以设为当前系统支持的某种格式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">setlocale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"en_US.UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>但是这样的话，程序的可移植性就变差了，因为无法保证其他系统也会支持那种格式。所以，通常都将第二个参数设为空字符串，使用操作系统的当前设置。</p>\n<p><code>setlocale()</code>的返回值是一个字符串指针，表示已经设置好的格式。如果调用失败，则返回空指针 NULL。</p>\n<p><code>setlocale()</code>可以用来查询当前地区，这时第二个参数设为 NULL 就可以了。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>loc<span class=\"token punctuation\">;</span>\n\nloc <span class=\"token operator\">=</span> <span class=\"token function\">setlocale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 Starting locale: C</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting locale: %s\\n\"</span><span class=\"token punctuation\">,</span> loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nloc <span class=\"token operator\">=</span> <span class=\"token function\">setlocale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 Native locale: en_US.UTF-8    </span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Native locale: %s\\n\"</span><span class=\"token punctuation\">,</span> loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"localeconv\"><a href=\"#localeconv\" class=\"headerlink\" title=\"localeconv()\"></a>localeconv()</h2><p><code>localeconv()</code>用来获取当前格式的详细信息。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">lconv</span><span class=\"token operator\">*</span> <span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>该函数返回一个 Struct 结构指针，该结构里面包含了格式信息，它的主要属性如下。</p>\n<ul>\n<li>char* mon_decimal_point：货币的十进制小数点字符，比如<code>.</code>。</li>\n<li>char* mon_thousands_sep：货币的千位分隔符，比如<code>,</code>。</li>\n<li>char* mon_grouping：货币的分组描述符。</li>\n<li>char* positive_sign：货币的正值符号，比如<code>+</code>或为空字符串。</li>\n<li>char* negative_sign：货币的负值符号，比如<code>-</code>。</li>\n<li>char* currency_symbol：货币符号，比如<code>$</code>。</li>\n<li>char frac_digits：打印货币金额时，十进制小数点后面输出几位小数，比如设为<code>2</code>。</li>\n<li>char p_cs_precedes：设为<code>1</code>时，货币符号<code>currency_symbol</code>出现在非负金额前面。设为<code>0</code>时，出现在后面。</li>\n<li>char n_cs_precedes：设为<code>1</code>时，货币符号<code>currency_symbol</code>出现在负的货币金额前面。设为<code>0</code>时，出现在后面。</li>\n<li>char p_sep_by_space：决定了非负的货币金额与货币符号之间的分隔字符。</li>\n<li>char n_sep_by_space：决定了负的货币金额与货币符号之间的分隔字符。</li>\n<li>char p_sign_posn：决定了非负值的正值符号的位置。</li>\n<li>char n_sign_posn：决定了负值的负值符号的位置。</li>\n<li>char* int_curr_symbol：货币的国际符号，比如<code>USD</code>。</li>\n<li>char int_frac_digits：使用国际符号时，<code>frac_digits</code>的值。</li>\n<li>char int_p_cs_precedes：使用国际符号时，<code>p_cs_precedes</code>的值。</li>\n<li>char int_n_cs_precedes：使用国际符号时，<code>n_cs_precedes</code>的值。</li>\n<li>char int_p_sep_by_space：使用国际符号时，<code>p_sep_by_space</code>的值。</li>\n<li>char int_n_sep_by_space：使用国际符号时，<code>n_sep_by_space</code>的值。</li>\n<li>char int_p_sign_posn：使用国际符号时，<code>p_sign_posn</code>的值。</li>\n<li>char int_n_sign_posn：使用国际符号时，<code>n_sign_posn</code>的值。</li>\n</ul>\n<p>下面程序打印当前系统的属性值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;locale.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setlocale</span> <span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span><span class=\"token string\">\"zh_CN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lconv</span> <span class=\"token operator\">*</span> lc<span class=\"token punctuation\">;</span>\n    lc<span class=\"token operator\">=</span><span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"decimal_point: %s\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>decimal_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"thousands_sep: %s\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>thousands_sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"grouping: %s\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>grouping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"int_curr_symbol: %s\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>int_curr_symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"currency_symbol: %s\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>currency_symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"mon_decimal_point: %s\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>mon_decimal_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"mon_thousands_sep: %s\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>mon_thousands_sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"mon_grouping: %s\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>mon_grouping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"positive_sign: %s\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>positive_sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"negative_sign: %s\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>negative_sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"frac_digits: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>frac_digits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"p_cs_precedes: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>p_cs_precedes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"n_cs_precedes: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>n_cs_precedes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"p_sep_by_space: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>p_sep_by_space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"n_sep_by_space: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>n_sep_by_space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"p_sign_posn: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>p_sign_posn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"n_sign_posn: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>n_sign_posn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"int_frac_digits: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>int_frac_digits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"int_p_cs_precedes: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>int_p_cs_precedes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"int_n_cs_precedes: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>int_n_cs_precedes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"int_p_sep_by_space: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>int_p_sep_by_space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"int_n_sep_by_space: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>int_n_sep_by_space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"int_p_sign_posn: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>int_p_sign_posn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"int_n_sign_posn: %d\\n\"</span><span class=\"token punctuation\">,</span>lc<span class=\"token operator\">-></span>int_n_sign_posn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"math-h\"><a href=\"#math-h\" class=\"headerlink\" title=\"math.h\"></a>math.h</h1><p><code>math.h</code>头文件提供了很多数学函数。</p>\n<p>很多数学函数的返回值是 double 类型，但是同时提供 float 类型与 long double 类型的版本，比如<code>pow()</code>函数就还有<code>powf()</code>和<code>powl()</code>版本。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span>      <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">float</span>       <span class=\"token function\">powf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> <span class=\"token function\">powl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>为了简洁，下面就略去了函数的<code>f</code>后缀（float 类型）和<code>l</code>后缀（long double）版本。</p>\n<h2 id=\"类型和宏\"><a href=\"#类型和宏\" class=\"headerlink\" title=\"类型和宏\"></a>类型和宏</h2><p>math.h 新定义了两个类型别名。</p>\n<ul>\n<li>float_t：（当前系统）最有效执行 float 运算的类型，宽度至少与 float 一样。</li>\n<li>double_t`：（当前系统）最有效执行 double 运算的类型，宽度至少与 double 一样。</li>\n</ul>\n<p>它们的具体类型可以通过宏<code>FLT_EVAL_METHOD</code>来了解。</p>\n<table>\n<thead>\n<tr>\n<th>FLT_EVAL_METHOD 的值</th>\n<th>float_t 对应的类型</th>\n<th>double_t 对应的类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>float</td>\n<td>double</td>\n</tr>\n<tr>\n<td>1</td>\n<td>double</td>\n<td>double</td>\n</tr>\n<tr>\n<td>2</td>\n<td>long double</td>\n<td>long double</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>由实现决定</td>\n<td>由实现决定</td>\n</tr>\n</tbody></table>\n<p>math.h 还定义了一些宏。</p>\n<ul>\n<li><code>INFINITY</code>：表示正无穷，返回一个 float 类型的值。</li>\n<li><code>NAN</code>：表示非数字（Not-A-Number），返回一个 float 类型的值。</li>\n</ul>\n<h2 id=\"错误类型\"><a href=\"#错误类型\" class=\"headerlink\" title=\"错误类型\"></a>错误类型</h2><p>数学函数的报错有以下类型。</p>\n<ul>\n<li>Range errors：运算结果不能用函数返回类型表示。</li>\n<li>Domain errors：函数参数不适用当前函数。</li>\n<li>Pole errors：参数导致函数的极限值变成无限。</li>\n<li>Overflow errors：运算结果太大，导致溢出。</li>\n<li>Underflow errors：运算结果太小，导致溢出。</li>\n</ul>\n<p>变量<code>math_errhandling</code>提示了当前系统如何处理数学运算错误。</p>\n<table>\n<thead>\n<tr>\n<th>math_errhandling 的值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MATH_ERRNO</td>\n<td>系统使用 errno 表示数学错误</td>\n</tr>\n<tr>\n<td>MATH_ERREXCEPT</td>\n<td>系统使用异常表示数学错误</td>\n</tr>\n<tr>\n<td>MATH_ERRNO</td>\n<td>MATH_ERREXCEPT</td>\n</tr>\n</tbody></table>\n<h2 id=\"数值类型\"><a href=\"#数值类型\" class=\"headerlink\" title=\"数值类型\"></a>数值类型</h2><p>数学函数的参数可以分成以下几类：正常值，无限值，有限值和非数字。</p>\n<p>下面的函数用来判断一个值的类型。</p>\n<ul>\n<li>fpclassify()：返回给定浮点数的分类。</li>\n<li>isfinite()：如果参数不是无限或 NaN，则为真。</li>\n<li>isinf()：如果参数是无限的，则为真。</li>\n<li>isnan()：如果参数不是数字，则为真。</li>\n<li>isnormal()：如果参数是正常数字，则为真。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">isfinite</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.23</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 1</span>\n<span class=\"token function\">isinf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token function\">tan</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 1</span>\n<span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 1</span>\n<span class=\"token function\">isnormal</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e-310</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"signbit\"><a href=\"#signbit\" class=\"headerlink\" title=\"signbit()\"></a>signbit()</h2><p><code>signbit()</code>判断参数是否带有符号。如果参数为负值，则返回1，否则返回0。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">signbit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3490.0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n<span class=\"token function\">signbit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">37.0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"三角函数\"><a href=\"#三角函数\" class=\"headerlink\" title=\"三角函数\"></a>三角函数</h2><p>以下是三角函数，参数为弧度值。</p>\n<ul>\n<li>acos()：反余弦。</li>\n<li>asin()：反正弦。</li>\n<li>atan()：反正切</li>\n<li>atan2()：反正切。</li>\n<li>cos()：余弦。</li>\n<li>sin()：正弦。</li>\n<li>tan()：正切。</li>\n</ul>\n<p>不要忘了，上面所有函数都有 float 版本（函数名加上 f 后缀）和 long double 版本（函数名加上 l 后缀）。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>PI<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0.707107</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"双曲函数\"><a href=\"#双曲函数\" class=\"headerlink\" title=\"双曲函数\"></a>双曲函数</h2><p>以下是双曲函数，参数都为浮点数。</p>\n<ul>\n<li>acosh()：反双曲余弦。 </li>\n<li>asinh()：反双曲正弦。</li>\n<li>atanh()：反双曲正切。</li>\n<li>cosh()：双曲余弦。</li>\n<li>tanh()：双曲正切。</li>\n<li>sinh()：双曲正弦。 </li>\n</ul>\n<h2 id=\"指数函数和对数函数\"><a href=\"#指数函数和对数函数\" class=\"headerlink\" title=\"指数函数和对数函数\"></a>指数函数和对数函数</h2><p>以下是指数函数和对数函数，它们的返回值都是 double 类型。</p>\n<ul>\n<li>exp()：计算欧拉数 e 的乘方，即 e<sup>x</sup>。</li>\n<li>exp2()：计算 2 的乘方，即 2<sup>x</sup>。</li>\n<li>expm1()：计算 e<sup>x</sup> - 1。</li>\n<li>log()：计算自然对数，<code>exp()</code>的逆运算。</li>\n<li>log2()：计算以2为底的对数。</li>\n<li>log10()：计算以10为底的对数。</li>\n<li>logp1()：计算一个数加 1 的自然对数，即<code>ln(x + 1)</code>。</li>\n<li>logb()：计算以宏<code>FLT_RADIX</code>（一般为2）为底的对数，但只返回整数部分。</li>\n</ul>\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">exp</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 20.085500</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">20.0855</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3.000000</span>\n<span class=\"token function\">log10</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3.000000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果结果值超出了 C 语言可以表示的最大值，函数将返回<code>HUGE_VAL</code>，它是一个在<code>math.h</code>中定义的 double 类型的值。</p>\n<p>如果结果值太小，无法用 double 值表示，函数将返回0。以上这两种情况都属于出错。</p>\n<h2 id=\"frexp\"><a href=\"#frexp\" class=\"headerlink\" title=\"frexp()\"></a>frexp()</h2><p><code>frexp()</code>将参数分解成浮点数和指数部分（2为底数），比如 1234.56 可以写成 0.6028125 * 2<sup>11</sup>，这个函数就能分解出 0.6028125 和 11。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">frexp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> exp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数，第一个参数是用来分解的浮点数，第二个参数是一个整数变量指针。</p>\n<p>它返回小数部分，并将指数部分放入变量<code>exp</code>。如果参数为<code>0</code>，则返回的小数部分和指数部分都为<code>0</code>。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> frac<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> expt<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// expt 的值是 11</span>\nfrac <span class=\"token operator\">=</span> <span class=\"token function\">frexp</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234.56</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>expt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 1234.56 = 0.6028125 x 2^11</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234.56 = %.7f x 2^%d\\n\"</span><span class=\"token punctuation\">,</span> frac<span class=\"token punctuation\">,</span> expt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"ilogb\"><a href=\"#ilogb\" class=\"headerlink\" title=\"ilogb()\"></a>ilogb()</h2><p><code>ilogb()</code>返回一个浮点数的指数部分，指数的基数是宏<code>FLT_RADIX</code>（一般是<code>2</code>）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">ilogb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的参数为<code>x</code>，返回值是 log<sub>r</sub>|x|，其中<code>r</code>为宏<code>FLT_RADIX</code>。</p>\n<p>下面是用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">ilogb</span><span class=\"token punctuation\">(</span><span class=\"token number\">257</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 8</span>\n<span class=\"token function\">ilogb</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 8</span>\n<span class=\"token function\">ilogb</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 7</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"ldexp\"><a href=\"#ldexp\" class=\"headerlink\" title=\"ldexp()\"></a>ldexp()</h2><p><code>ldexp()</code>将一个数乘以2的乘方。它可以看成是<code>frexp()</code>的逆运算，将小数部分和指数部分合成一个<code>f * 2^n</code>形式的浮点数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">ldexp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> exp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数，第一个参数是乘数<code>x</code>，第二个参数是2的指数部分<code>exp</code>，返回“x * 2<sup>exp</sup>”。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">ldexp</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1024.000000</span>\n<span class=\"token function\">ldexp</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 12.000000</span>\n<span class=\"token function\">ldexp</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 12.000000</span>\n<span class=\"token function\">ldexp</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0.250000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"modf\"><a href=\"#modf\" class=\"headerlink\" title=\"modf()\"></a>modf()</h2><p><code>modf()</code>函数提取一个数的整数部分和小数部分。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">modf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">*</span> iptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数，第一个参数<code>value</code>表示待分解的数值，第二个参数是浮点数变量<code>iptr</code>。返回值是<code>value</code>的小数部分，整数部分放入变量<code>double</code>。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// int_part 的值是 3.0</span>\n<span class=\"token function\">modf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14159</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>int_part<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 0.14159</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"scalbn\"><a href=\"#scalbn\" class=\"headerlink\" title=\"scalbn()\"></a>scalbn()</h2><p><code>scalbn()</code>用来计算“x * r<sup>n</sup>”，其中<code>r</code>是宏<code>FLT_RADIX</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">scalbn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数，第一个参数<code>x</code>是乘数部分，第二个参数<code>n</code>是指数部分，返回值是“x * r<sup>n</sup>”。</p>\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">scalbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 512.000000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个函数有多个版本。</p>\n<ul>\n<li>scalbn()：指数 n 是 int 类型。</li>\n<li>scalbnf()：float 版本的 scalbn()。</li>\n<li>scalbnl()：long double 版本的 scalbn()。</li>\n<li>scalbln()：指数 n 是 long int 类型。</li>\n<li>scalblnf()：float 版本的 scalbln()。</li>\n<li>scalblnl()：long double 版本的 scalbln()。</li>\n</ul>\n<h2 id=\"round\"><a href=\"#round\" class=\"headerlink\" title=\"round()\"></a>round()</h2><p><code>round()</code>函数以传统方式进行四舍五入，比如<code>1.5</code>舍入到<code>2</code>，<code>-1.5</code>舍入到<code>-2</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它返回一个浮点数。</p>\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 3.000000</span>\n<span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 4.000000</span>\n<span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// -2.000000</span>\n<span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.14</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1.000000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它还有一些其他版本。</p>\n<ul>\n<li>lround()：返回值是 long int 类型。</li>\n<li>llround()：返回值是 long long int 类型。</li>\n</ul>\n<h2 id=\"trunc\"><a href=\"#trunc\" class=\"headerlink\" title=\"trunc()\"></a>trunc()</h2><p><code>trunc()</code>用来截去一个浮点数的小数部分，将剩下的整数部分以浮点数的形式返回。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 3.000000</span>\n<span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 3.000000</span>\n<span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// -1.000000</span>\n<span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.14</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1.000000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"ceil\"><a href=\"#ceil\" class=\"headerlink\" title=\"ceil()\"></a>ceil()</h2><p><code>ceil()</code>返回不小于其参数的最小整数（double 类型），属于“向上舍入”。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">7.1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 8.0</span>\n<span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">7.9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 8.0</span>\n<span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">7.1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -7.0</span>\n<span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">7.9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -7.0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"floor\"><a href=\"#floor\" class=\"headerlink\" title=\"floor()\"></a>floor()</h2><p><code>floor()</code>返回不大于其参数的最大整数，属于“向下舍入”。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">7.1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 7.0</span>\n<span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">7.9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 7.0</span>\n<span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">7.1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -8.0</span>\n<span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">7.9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -8.0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面的函数可以实现“四舍五入”。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">round_nearest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.0</span> <span class=\"token operator\">?</span> <span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"fmod\"><a href=\"#fmod\" class=\"headerlink\" title=\"fmod()\"></a>fmod()</h2><p><code>fmod()</code>返回第一个参数除以第二个参数的余数，就是余值运算符<code>%</code>的浮点数版本，因为<code>%</code>只能用于整数运算。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">fmod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它在幕后执行的计算是<code>x - trunc(x / y) * y</code>，返回值的符号与<code>x</code>的符号相同。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fmod</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//  1.100000</span>\n<span class=\"token function\">fmod</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">9.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -4.100000</span>\n<span class=\"token function\">fmod</span><span class=\"token punctuation\">(</span><span class=\"token number\">9.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//  4.100000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"浮点数比较函数\"><a href=\"#浮点数比较函数\" class=\"headerlink\" title=\"浮点数比较函数\"></a>浮点数比较函数</h2><p>以下函数用于两个浮点数的比较，返回值的类型是整数。</p>\n<ul>\n<li>isgreater()：返回<code>x &gt; y</code>的结果。</li>\n<li>isgreaterequal()：返回<code>x &gt;= y</code>的结果。</li>\n<li>isless()：返回<code>x &lt; y</code>的结果。</li>\n<li>islessequal()：返回<code>x &lt;= y</code>的结果。</li>\n<li>islessgreater()：返回<code>(x &lt; y) || (x &gt; y)</code>的结果。</li>\n</ul>\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">isgreater</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 1</span>\n<span class=\"token function\">isgreaterequal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 1</span>\n<span class=\"token function\">isless</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 0</span>\n<span class=\"token function\">islessequal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 0</span>\n<span class=\"token function\">islessgreater</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 1</span>\n<span class=\"token function\">islessgreater</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 1</span>\n<span class=\"token function\">islessgreater</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"isunordered\"><a href=\"#isunordered\" class=\"headerlink\" title=\"isunordered()\"></a>isunordered()</h2><p><code>isunordered()</code>返回两个参数之中，是否存在 NAN。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">isunordered</span><span class=\"token punctuation\">(</span>any_floating_type x<span class=\"token punctuation\">,</span> any_floating_type y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">isunordered</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 0</span>\n<span class=\"token function\">isunordered</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 1</span>\n<span class=\"token function\">isunordered</span><span class=\"token punctuation\">(</span>NAN<span class=\"token punctuation\">,</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 1</span>\n<span class=\"token function\">isunordered</span><span class=\"token punctuation\">(</span>NAN<span class=\"token punctuation\">,</span> NAN<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"其他函数\"><a href=\"#其他函数\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h2><p>下面是 math.h 包含的其它函数。</p>\n<ul>\n<li>pow()：计算参数<code>x</code>的<code>y</code>次方。</li>\n<li>sqrt()：计算一个数的平方根。</li>\n<li>cbrt()：计算立方根。</li>\n<li>fabs()：计算绝对值。</li>\n<li>hypot()：根据直角三角形的两条直角边，计算斜边。</li>\n<li>fmax()：返回两个参数之中的最大值。</li>\n<li>fmin()：返回两个参数之中的最小值。</li>\n<li>remainder()：返回 IEC 60559 标准的余数，类似于<code>fmod()</code>，但是余数范围是从<code>-y/2</code>到<code>y/2</code>，而不是从<code>0</code>到<code>y</code>。</li>\n<li>remquo()：同时返回余数和商，余数的计算方法与<code>remainder()</code>相同。</li>\n<li>copysign()：返回一个大小等于第一个参数、符号等于第二个参数的值。</li>\n<li>nan()：返回 NAN。  </li>\n<li>nextafter()：获取下一个（或者上一个，具体方向取决于第二个参数<code>y</code>）当前系统可以表示的浮点值。</li>\n<li>nextoward()：与<code>nextafter()</code>相同，除了第二个参数是 long double 类型。</li>\n<li>fdim()：如果第一个参数减去第二个参数大于<code>0</code>，则返回差值，否则返回<code>0</code>。</li>\n<li>fma()：以快速计算的方式，返回<code>x * y + z</code>的结果。</li>\n<li>nearbyint()：在当前舍入方向上，舍入到最接近的整数。当前舍入方向可以使用<code>fesetround()</code>函数设定。</li>\n<li>rint()：在当前舍入方向上，舍入到最接近的整数，与<code>nearbyint()</code>相同。不同之处是，它会触发浮点数的<code>INEXACT</code>异常。</li>\n<li>lrint()：在当前舍入方向上，舍入到最接近的整数，与<code>rint()</code>相同。不同之处是，返回值是一个整数，而不是浮点数。</li>\n<li>erf()：计算一个值的误差函数。</li>\n<li>erfc()：计算一个值的互补误差函数。</li>\n<li>tgamma()：计算 Gamma 函数。</li>\n<li>lgamma()：计算 Gamma 函数绝对值的自然对数。</li>\n</ul>\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 81.000000</span>\n<span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1.73205</span>\n<span class=\"token function\">cbrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1729.03</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 12.002384</span>\n<span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3490.0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3490.000000</span>\n<span class=\"token function\">hypot</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5.000000</span>\n<span class=\"token function\">fmax</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10.000000</span>\n<span class=\"token function\">fmin</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  3.000000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"signal-h\"><a href=\"#signal-h\" class=\"headerlink\" title=\"signal.h\"></a>signal.h</h1><h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>signal.h</code>提供了信号（即异常情况）的处理工具。所谓“信号”（signal），可以理解成系统与程序之间的短消息，主要用来表示运行时错误，或者发生了异常事件。</p>\n<p>头文件<code>signal.h</code>定义了一系列宏，表示不同的信号。</p>\n<ul>\n<li>SIGABRT：异常中止（可能由于调用了 abort() 方法）。</li>\n<li>SIGFPE：算术运算发生了错误（可能是除以 0 或者溢出）。</li>\n<li>SIGILL：无效指令。</li>\n<li>SIGINT：中断。</li>\n<li>SIGSEGV：无效内存访问。</li>\n<li>SIGTERM：终止请求。</li>\n</ul>\n<p>上面每个宏的值都是一个正整数常量。</p>\n<h2 id=\"signal\"><a href=\"#signal\" class=\"headerlink\" title=\"signal()\"></a>signal()</h2><p>头文件<code>signal.h</code>还定义了一个<code>signal()</code>函数，用来指定某种信号的处理函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGINT<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>signal()</code>接受两个参数，第一个参数是某种信号的宏，第二个参数是处理这个信号的函数指针<code>handler</code>。</p>\n<p>信号处理函数<code>handler</code>接受一个 int 类型的参数，表示信号类型。它的原型如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>handler</code>函数体内部可以根据这个整数，判断到底接受到了哪种信号，因为多个信号可以共用同一个处理函数。一旦处理函数执行完成，程序会从信号发生点恢复执行。但是，如果遇到 SIGABRT 信号，处理函数执行完成，系统会让程序中止。</p>\n<p>当系统向程序发送信号时，程序可以忽略信号，即不指定处理函数。</p>\n<p><code>signal()</code>的返回值是前一个处理函数的指针，常常把它保存在变量之中，当新的处理函数执行完，再恢复以前的处理函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>orig_handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\norig_handler <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGINT<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// SIGINT 信号发生之后</span>\n<span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGINT<span class=\"token punctuation\">,</span> orig_handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>signal()</code>为信号<code>SIGINT</code>指定了新的处理函数<code>handler</code>，把原来的处理函数保存在变量<code>orig_handler</code>里面。等到<code>handler</code>这个函数用过之后，再恢复原来的处理函数。</p>\n<h2 id=\"信号相关的宏\"><a href=\"#信号相关的宏\" class=\"headerlink\" title=\"信号相关的宏\"></a>信号相关的宏</h2><p><code>signal.h</code>还提供了信号相关的宏。</p>\n<p>（1）SIG_DFL</p>\n<p>SIG_DFL 表示默认的处理函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGINT<span class=\"token punctuation\">,</span> SIG_IGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，SIGINT 的处理函数是默认处理函数，由当前实现决定。</p>\n<p>（2）SIG_IGN</p>\n<p>SIG_IGN 表示忽略该信号。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGINT<span class=\"token punctuation\">,</span> SIG_IGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例表示不对 SIGINT 信号进行处理。由于程序运行时按下 Ctrl + c 是发出 SIGINT 信号，所以使用该语句后，程序无法用 Ctrl + c 终止。</p>\n<p>（3）SIG_ERR</p>\n<p>SIG_ERR 是信号处理函数发生错误时，<code>signal()</code>的返回值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGINT<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SIG_ERR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"signal(SIGINT, handler) failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例可以判断<code>handler</code>处理 SIGINT 时，是否发生错误。</p>\n<h2 id=\"raise\"><a href=\"#raise\" class=\"headerlink\" title=\"raise()\"></a>raise()</h2><p><code>raise()</code>函数用来在程序中发出信号。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">raise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受一个信号值作为参数，表示发出该信号。它的返回值是一个整数，可以用来判断信号发出是否成功，0 表示成功，非 0 表示失败。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Handler called for signal %d\\n\"</span><span class=\"token punctuation\">,</span> sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGINT<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">raise</span><span class=\"token punctuation\">(</span>SIGINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>raise()</code>触发 SIGINT 信号，导致 handler 函数执行。</p>\n<h1 id=\"stdarg-h\"><a href=\"#stdarg-h\" class=\"headerlink\" title=\"stdarg.h\"></a>stdarg.h</h1><p><code>stdarg.h</code>定义于函数的可变参数相关的一些方法。</p>\n<ul>\n<li>va_list 类型</li>\n<li>va_start()</li>\n<li>va_arg()：获取当前参数</li>\n<li>va_end()。</li>\n</ul>\n<p>va_copy()：it makes a copy of your va_list variable in the exact same state.<br>va_copy() can be useful if you need to scan ahead through the arguments but need to also remember your current place.</p>\n<p>接受可变函数作为参数的一些方法。</p>\n<ul>\n<li>vprintf()</li>\n<li>vfprintf()</li>\n<li>vsprintf()</li>\n<li>vsnprintf()</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdarg.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">my_printf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> serial<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    va_list va<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Do my custom work</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The serial number is: %d\\n\"</span><span class=\"token punctuation\">,</span> serial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Then pass the rest off to vprintf()</span>\n    <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rv <span class=\"token operator\">=</span> <span class=\"token function\">vprintf</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> rv<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token number\">3.2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">my_printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3490</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x is %d, y is %f\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"stdbool-h\"><a href=\"#stdbool-h\" class=\"headerlink\" title=\"stdbool.h\"></a>stdbool.h</h1><p><code>stdbool.h</code>头文件定义了4个宏。</p>\n<ul>\n<li><code>bool</code>：定义为<code>_Bool</code>。</li>\n<li><code>true</code>：定义为1。</li>\n<li><code>false</code>：定义为0。</li>\n<li><code>__bool_true_false_are_defined</code>：定义为1。</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">bool <span class=\"token function\">isEven</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> div<span class=\"token punctuation\">;</span>\n  bool isPrime <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\n  num <span class=\"token operator\">=</span> <span class=\"token number\">64457</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>div <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>div <span class=\"token operator\">*</span> div<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> div<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> div <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> isPrime <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPrime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lu is prime.\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lu is not prime.\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"stddef-h\"><a href=\"#stddef-h\" class=\"headerlink\" title=\"stddef.h\"></a>stddef.h</h1><p><code>stddef.h</code>提供了常用类型和宏的定义，但没有声明任何函数。</p>\n<p>这个头文件定义的类型如下。</p>\n<ul>\n<li>ptrdiff_t：指针相减运算时，返回结果的数据类型。</li>\n<li>size_t：<code>sizeof</code>运算符返回的类型。</li>\n<li>wchar_t：一种足够大、能容纳各种字符的类型。</li>\n</ul>\n<p>以上三个类型都是整数类型，其中<code>ptrdiff_t</code>是有符号整数，<code>size_t</code>是无符号整数。</p>\n<p><code>stddef.h</code>定义了两个宏。</p>\n<ul>\n<li>NULL：空指针。</li>\n<li>offsetof()</li>\n</ul>\n<h2 id=\"offsetof\"><a href=\"#offsetof\" class=\"headerlink\" title=\"offsetof()\"></a>offsetof()</h2><p><code>offsetof()</code>是<code>stddef.h</code>定义的一个宏，用来返回某个属性在 Struct 结构内部的起始位置。由于系统为了字节对齐，可能会在 Struct 结构的属性之间插入空字节，这个宏对于确定某个属性的内存位置很有用。</p>\n<p>它是一个带参数的宏，接受两个参数。第一个参数是 Struct 结构，第二个参数是该结构的一个属性，返回 Struct 起始位置到该属性之间的字节数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">s</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%zu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">offsetof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">s</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%zu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">offsetof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">s</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%zu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">offsetof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">s</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于上面这个 Struct 结构，<code>offsetof(struct s, a)</code>一定等于<code>0</code>，因为<code>a</code>属性是第一个属性，与 Struct 结构自身的地址相同。</p>\n<p>系统为了字节对齐，在<code>a</code>属性后面分配了3个空字节，导致<code>b</code>属性存储在第4个字节，所以<code>offsetof(struct s, b)</code>和<code>offsetof(struct s, c)</code>分别是4和12。</p>\n<h1 id=\"stdint-h\"><a href=\"#stdint-h\" class=\"headerlink\" title=\"stdint.h\"></a>stdint.h</h1><h2 id=\"固定宽度的整数类型\"><a href=\"#固定宽度的整数类型\" class=\"headerlink\" title=\"固定宽度的整数类型\"></a>固定宽度的整数类型</h2><p>stdint.h 定义了一些固定宽度的整数类型别名，主要有下面三类。</p>\n<ul>\n<li>宽度完全确定的整数<code>intN_t</code>，比如<code>int32_t</code>。</li>\n<li>宽度不小少于某个大小的整数<code>int_leastN_t</code>，比如<code>int_least8_t</code>。</li>\n<li>宽度不小于某个大小、并且处理速度尽可能快的整数<code>int_fastN_t</code>，比如<code>int_fast64_t</code>。</li>\n</ul>\n<p>上面所有类型都是有符号的，类型名前面可以加一个前缀<code>u</code>，表示无符号类型，比如<code>uint16_t</code>。</p>\n<p>C 语言标准要求至少定义以下类型。</p>\n<ul>\n<li>int8_t      uint8_t</li>\n<li>int16_t     uint16_t</li>\n<li>int32_t     uint32_t</li>\n<li>int64_t     uint64_t</li>\n<li>int_least8_t      uint_least8_t</li>\n<li>int_least16_t     uint_least16_t</li>\n<li>int_least32_t     uint_least32_t</li>\n<li>int_least64_t     uint_least64_t</li>\n<li>int_fast8_t       uint_fast8_t</li>\n<li>int_fast16_t      uint_fast16_t</li>\n<li>int_fast32_t      uint_fast32_t</li>\n<li>int_fast64_t      uint_fast64_t</li>\n</ul>\n<h2 id=\"最大宽度的整数类型\"><a href=\"#最大宽度的整数类型\" class=\"headerlink\" title=\"最大宽度的整数类型\"></a>最大宽度的整数类型</h2><p>以下两个类型表示当前系统可用的最大宽度整数。</p>\n<ul>\n<li>intmax_t</li>\n<li>uintmax_t</li>\n</ul>\n<p>如果想要尽可能大的整数时，可以使用上面类型。</p>\n<h2 id=\"固定宽度的整数常量\"><a href=\"#固定宽度的整数常量\" class=\"headerlink\" title=\"固定宽度的整数常量\"></a>固定宽度的整数常量</h2><p>以下一些带参数的宏，可以生成固定宽度的整数常量。</p>\n<ul>\n<li>INT8_C(x)     UINT8_C(x)</li>\n<li>INT16_C(x)    UINT16_C(x)</li>\n<li>INT32_C(x)    UINT32_C(x)</li>\n<li>INT64_C(x)    UINT64_C(x)</li>\n<li>INTMAX_C(x)   UINTMAX_C(x)</li>\n</ul>\n<p>下面是用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">uint16_t x <span class=\"token operator\">=</span> <span class=\"token function\">UINT16_C</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nintmax_t y <span class=\"token operator\">=</span> <span class=\"token function\">INTMAX_C</span><span class=\"token punctuation\">(</span><span class=\"token number\">3490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"固定宽度的整数极限值\"><a href=\"#固定宽度的整数极限值\" class=\"headerlink\" title=\"固定宽度的整数极限值\"></a>固定宽度的整数极限值</h2><p>下面一些宏代表了固定宽度的整数最大值和最小值。</p>\n<ul>\n<li>INT8_MAX           INT8_MIN           UINT8_MAX</li>\n<li>INT16_MAX          INT16_MIN          UINT16_MAX</li>\n<li>INT32_MAX          INT32_MIN          UINT32_MAX</li>\n<li>INT64_MAX          INT64_MIN          UINT64_MAX</li>\n<li>INT_LEAST8_MAX     INT_LEAST8_MIN     UINT_LEAST8_MAX</li>\n<li>INT_LEAST16_MAX    INT_LEAST16_MIN    UINT_LEAST16_MAX</li>\n<li>INT_LEAST32_MAX    INT_LEAST32_MIN    UINT_LEAST32_MAX</li>\n<li>INT_LEAST64_MAX    INT_LEAST64_MIN    UINT_LEAST64_MAX</li>\n<li>INT_FAST8_MAX      INT_FAST8_MIN      UINT_FAST8_MAX</li>\n<li>INT_FAST16_MAX     INT_FAST16_MIN     UINT_FAST16_MAX</li>\n<li>INT_FAST32_MAX     INT_FAST32_MIN     UINT_FAST32_MAX</li>\n<li>INT_FAST64_MAX     INT_FAST64_MIN     UINT_FAST64_MAX</li>\n<li>INTMAX_MAX         INTMAX_MIN         UINTMAX_MAX</li>\n</ul>\n<p>注意，所有无符号整数类型的最小值都为0，所以没有对应的宏。</p>\n<h2 id=\"占位符\"><a href=\"#占位符\" class=\"headerlink\" title=\"占位符\"></a>占位符</h2><p>C 语言还在头文件 inttypes.h 里面，为上面类型定义了<code>printf()</code>和<code>scanf()</code>的占位符，参见《inttypes.h》一章。</p>\n<h1 id=\"stdio-h\"><a href=\"#stdio-h\" class=\"headerlink\" title=\"stdio.h\"></a>stdio.h</h1><p><code>stdio.h</code>是 C 语言的标准 I/O 库，用于读取和写入文件，也用于控制台的输入和输出。</p>\n<h2 id=\"标准-I-O-函数\"><a href=\"#标准-I-O-函数\" class=\"headerlink\" title=\"标准 I/O 函数\"></a>标准 I/O 函数</h2><p>以下函数用于控制台的输入和输出。</p>\n<ul>\n<li>printf()：输出到控制台，详见《基本语法》一章。</li>\n<li>scanf()：从控制台读取输入，详见《I/O 函数》一章。</li>\n<li>getchar()：从控制台读取一个字符，详见《I/O 函数》一章。</li>\n<li>putchar()：向控制台写入一个字符，详见《I/O 函数》一章。</li>\n<li>gets()：从控制台读取整行输入（已废除），详见《I/O 函数》一章。</li>\n<li>puts()：向控制台写入一个字符串，详见《I/O 函数》一章。</li>\n</ul>\n<h2 id=\"文件操作函数\"><a href=\"#文件操作函数\" class=\"headerlink\" title=\"文件操作函数\"></a>文件操作函数</h2><p>以下函数用于文件操作，详见《文件操作》一章。</p>\n<ul>\n<li>fopen()：打开文件。</li>\n<li>fclose()：关闭文件。</li>\n<li>freopen()：打开一个新文件，关联一个已经打开的文件指针。</li>\n<li>fprintf()：输出到文件。</li>\n<li>fscanf()：从文件读取数据。</li>\n<li>getc()：从文件读取一个字符。</li>\n<li>fgetc()：从文件读取一个字符。</li>\n<li>putc()：向文件写入一个字符。</li>\n<li>fputc()：向文件写入一个字符。</li>\n<li>fgets()：从文件读取整行。</li>\n<li>fputs()：向文件写入字符串。</li>\n<li>fread()：从文件读取二进制数据。</li>\n<li>fwrite()：向文件写入二进制数据。</li>\n<li>fseek()：将文件内部指针移到指定位置。</li>\n<li>ftell()：获取文件内部指针的当前位置。</li>\n<li>rewind()：将文件内部指针重置到文件开始处。</li>\n<li>fgetpos()：获取文件内部指针的当前位置。</li>\n<li>fsetpos()：设置文件内部指针的当前位置。</li>\n<li>feof()：判断文件内部指针是否指向文件结尾。</li>\n<li>ferror()：返回文件错误指示器的状态。</li>\n<li>clearerr()：重置文件错误指示器。</li>\n<li>remove()：删除文件。</li>\n<li>rename()：文件改名，以及移动文件。</li>\n</ul>\n<h2 id=\"字符串操作函数\"><a href=\"#字符串操作函数\" class=\"headerlink\" title=\"字符串操作函数\"></a>字符串操作函数</h2><p>以下函数用于操作字符串，详见《字符串操作》一章。</p>\n<ul>\n<li>sscanf()：从字符串读取数据，详见《I/O 函数》一章。</li>\n<li>sprintf()：输出到字符串。</li>\n<li>snprintf()：输出到字符串的更安全版本，指定了输出字符串的数量。</li>\n</ul>\n<h2 id=\"tmpfile\"><a href=\"#tmpfile\" class=\"headerlink\" title=\"tmpfile()\"></a>tmpfile()</h2><p><code>tmpfile()</code>函数创建一个临时文件，该文件只在程序运行期间存在，除非手动关闭它。它的原型如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">FILE<span class=\"token operator\">*</span> <span class=\"token function\">tmpfile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>tmpfile()</code>返回一个文件指针，可以用于访问该函数创建的临时文件。如果创建失败，返回一个空指针 NULL。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">FILE<span class=\"token operator\">*</span> tempptr<span class=\"token punctuation\">;</span>\ntempptr <span class=\"token operator\">=</span> <span class=\"token function\">tmpfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>调用<code>close()</code>方法关闭临时文件后，该文件将被自动删除。</p>\n<p><code>tmpfile()</code>有两个缺点。一是无法知道临时文件的文件名，二是无法让该文件成为永久文件。</p>\n<h2 id=\"tmpnam\"><a href=\"#tmpnam\" class=\"headerlink\" title=\"tmpnam()\"></a>tmpnam()</h2><p><code>tmpname()</code>函数为临时文件生成一个名字，确保不会与其他文件重名。它的原型如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">tmpname</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的参数是一个字符串变量，<code>tmpnam()</code>会把临时文件的文件名复制到这个变量里面，并返回指向该字符串变量的指针。如果生成文件名失败，<code>tmpnam()</code>返回空指针 NULL。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> filename<span class=\"token punctuation\">[</span>L_tmpname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tmpnam</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 输出诸如 /tmp/filew9PMuZ 的文件名</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something wrong!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>L_tmpname</code>是<code>stdio.h</code>定义的一个宏，指定了临时文件的文件名长度。</p>\n<p><code>tmpname()</code>的参数也可以是一个空指针 NULL，同样返回指向文件名字符串的指针。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">;</span>\nfilename <span class=\"token operator\">=</span> <span class=\"token function\">tmpnam</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>filename</code>就是<code>tmpnam()</code>生成的文件名。</p>\n<p>该函数只是生成一个文件名，稍后可以使用<code>fopen()</code>打开该文件并使用它。</p>\n<h2 id=\"fflush\"><a href=\"#fflush\" class=\"headerlink\" title=\"fflush()\"></a>fflush()</h2><p><code>fflush()</code>用于清空缓存区。它接受一个文件指针作为参数，将缓存区内容写入该文件。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果不需要保存缓存区内容，则可以传入空指针 NULL。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果清空成功，<code>fflush()</code>返回0，否则返回 EOF。</p>\n<p>注意，<code>fflush()</code>一般只用来清空输出缓存区（比如写文件）。如果使用它来清空输入缓存区（比如读文件），属于未定义行为。</p>\n<p><code>fflush()</code>的一个用途是不等回车键，就强迫输出缓存区。大多数系统都是行缓存，这意味着只有遇到回车键（或者缓存区满了，或者文件读到结尾），缓存区的内容才会输出，<code>fflush()</code>可以不等回车键，立即输出。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r%d\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例是一个倒计时效果，<code>\\r</code>是回车键，表示每轮循环都会回到当前行的行首，等于删除上一轮循环的输出。<code>fflush(stdout)</code>表示立即将缓存输出到显示器，这一行是必需的，否则由于上一行的输出没有回车键，不会触发缓存输出，屏幕上不会显示任何内容，只会等到程序运行结束再一次性输出。</p>\n<h2 id=\"setvbuf\"><a href=\"#setvbuf\" class=\"headerlink\" title=\"setvbuf()\"></a>setvbuf()</h2><p><code>setvbuf()</code>函数用于定义某个字节流应该如何缓存。它可以接受四个参数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第一个参数<code>stream</code>是文件流。</p>\n<p>第二个参数<code>buffer</code>是缓存区的地址。</p>\n<p>第三个参数<code>mode</code>指定缓存的行为模式，它是下面三个宏之一，这些宏都定义在<code>stdio.h</code>。</p>\n<ul>\n<li><code>_IOFBF</code>：满缓存。当缓存为空时，才从流读入数据；当缓存满了，才向流写入数据。一般情况下，这是默认设置。</li>\n<li><code>_IOLBF</code>：行缓存。每次从流读入一行数据，或向流写入一行数据，即以行为单位读写缓存。</li>\n<li><code>_IONBF</code>：无缓存。不使用缓存区，直接读写设备。</li>\n</ul>\n<p>第四个参数<code>size</code>指定缓存区的大小。较大的缓存区提供更好的性能，而较小的缓存区可以节省空间。<code>stdio.h</code>提供了一个宏<code>BUFSIZ</code>，表示系统默认的缓存区大小。</p>\n<p>它的意义在于，使得用户可以在打开一个文件之前，定义自己的文件缓冲区，而不必使用<code>fopen()</code>函数打开文件时设定的默认缓冲区。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> _IOFBF<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例设置文件流<code>stream</code>的缓存区从地址<code>buffer</code>开始，大小为<code>N</code>，模式为<code>_IOFBF</code>。</p>\n<p><code>setvbuf()</code>的第二个参数可以为空指针 NULL。这样的话，<code>setvbuf()</code>会自己创建一个缓存区。</p>\n<p>注意，<code>setvbuf()</code>的调用必须在对文件流执行任何操作之前。</p>\n<p>如果调用成功，<code>setvbuf()</code>的返回值为<code>0</code>，否则返回非零值。</p>\n<p>下面的例子是将缓存区调整为行缓存。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> lineBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nfp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"somefile.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> lineBuf<span class=\"token punctuation\">,</span> _IOLBF<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"setbuf\"><a href=\"#setbuf\" class=\"headerlink\" title=\"setbuf()\"></a>setbuf()</h2><p><code>setbuf()</code>是<code>setvbuf()</code>的早期版本，可以视为后者的简化版本，也用来定义某个字节流的缓存区。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">setbuf</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的第一个参数<code>stream</code>是文件流，第二个参数<code>buffer</code>是缓存区的地址。</p>\n<p>它总是可以改写成<code>setvbuf()</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span>BUFSIZ<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setbuf</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> _IOFBF<span class=\"token punctuation\">,</span> BUFSIZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>BUFSIZ</code>是<code>stdio.h</code>定义的宏，表示系统默认的缓存区大小。</p>\n<p><code>setbuf()</code>函数没有返回值。</p>\n<p><code>setbuf()</code>的第二个参数如果设置为 NULL，表示不进行缓存。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">setbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> _IONBF<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"ungetc\"><a href=\"#ungetc\" class=\"headerlink\" title=\"ungetc()\"></a>ungetc()</h2><p><code>ungetc()</code>将从缓存里面读取的上一个字符，重新放回缓存，下一个读取缓存的操作会从这个字符串开始。有些操作需要了解下一个字符是什么，再决定应该怎么处理，这时这个函数就很有用。</p>\n<p>它的原型如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">ungetc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的第一个参数是一个字符变量，第二个参数是一个打开的文件流。它的返回值是放回缓存的那个字符，操作失败时，返回 EOF。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ch <span class=\"token operator\">=</span> <span class=\"token function\">fgetd</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">ungetc</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，如果读取的字符不是数字，就将其放回缓存。</p>\n<h2 id=\"perror\"><a href=\"#perror\" class=\"headerlink\" title=\"perror()\"></a>perror()</h2><p><code>perror()</code>用于在 stderr 的错误信息之前，添加一个自定义字符串。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>该函数的参数就是在报错信息前添加的字符串。它没有返回值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  errno <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sqrt error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，求<code>-1</code>的平方根，导致报错。头文件<code>errno.h</code>提供宏<code>errno</code>，只要上一步操作出错，这个宏就会设置成非零值。<code>perror()</code>用来在报错信息前，加上<code>sqrt error</code>的自定义字符串。</p>\n<p>执行上面的程序，就会得到下面的报错信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ gcc test.c -lm\n$ ./a.out\nsqrt error: Numerical argument out of domain<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"可变参数操作函数\"><a href=\"#可变参数操作函数\" class=\"headerlink\" title=\"可变参数操作函数\"></a>可变参数操作函数</h2><p>（1）输出函数</p>\n<p>下面是<code>printf()</code>的变体函数，用于按照给定格式，输出函数的可变参数列表（va_list）。</p>\n<ul>\n<li>vprintf()：按照给定格式，输出到控制台，默认是显示器。</li>\n<li>vfprintf()：按照给定格式，输出到文件。</li>\n<li>vsprintf()：按照给定格式，输出到字符串。</li>\n<li>vsnprintf()：按照给定格式，输出到字符串的安全版本。</li>\n</ul>\n<p>它们的原型如下，基本与对应的<code>printf()</code>系列函数一致，除了最后一个参数是可变参数对象。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdarg.h></span></span>\n    \n<span class=\"token keyword\">int</span> <span class=\"token function\">vprintf</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict format<span class=\"token punctuation\">,</span>\n  va_list arg\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">vfprintf</span><span class=\"token punctuation\">(</span>\n  FILE <span class=\"token operator\">*</span> restrict stream<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict format<span class=\"token punctuation\">,</span>\n  va_list arg\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">int</span> <span class=\"token function\">vsprintf</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict s<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict format<span class=\"token punctuation\">,</span>\n  va_list arg\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">int</span> <span class=\"token function\">vsnprintf</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict s<span class=\"token punctuation\">,</span>\n  size_t n<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict format<span class=\"token punctuation\">,</span>\n  va_list arg\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它们的返回值都为输出的字符数，如果出错，返回负值。</p>\n<p><code>vsprintf()</code>和<code>vsnprintf()</code>的第一个参数可以为 NULL，用来查看多少个字符会被写入。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  va_list va<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">vprintf</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 输出 x = 12 and y = 3.20</span>\n<span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x = %d and y = %.2f\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（2）输入函数</p>\n<p>下面是<code>scanf()</code>的变体函数，用于按照给定格式，输入可变参数列表 (va_list)。</p>\n<ul>\n<li>vscanf()：按照给定格式，从控制台读取（默认为键盘）。</li>\n<li>vfscanf()：按照给定格式，从文件读取。</li>\n<li>vsscanf()：按照给定格式，从字符串读取。</li>\n</ul>\n<p>它们的原型如下，跟对应的<code>scanf()</code>函数基本一致，除了最后一个参数是可变参数对象。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdarg.h></span></span>\n    \n<span class=\"token keyword\">int</span> <span class=\"token function\">vscanf</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict format<span class=\"token punctuation\">,</span>\n  va_list arg\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">int</span> <span class=\"token function\">vfscanf</span><span class=\"token punctuation\">(</span>\n  FILE <span class=\"token operator\">*</span> restrict stream<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict format<span class=\"token punctuation\">,</span>\n  va_list arg\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">int</span> <span class=\"token function\">vsscanf</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict s<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict format<span class=\"token punctuation\">,</span>\n  va_list arg\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它们返回成功读取的项数，遇到文件结尾或错误，则返回 EOF。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">error_check_scanf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> expected_count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  va_list va<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">vscanf</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> expected_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">error_check_scanf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d, %d/%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"stdlib-h\"><a href=\"#stdlib-h\" class=\"headerlink\" title=\"stdlib.h\"></a>stdlib.h</h1><h2 id=\"类型别名和宏\"><a href=\"#类型别名和宏\" class=\"headerlink\" title=\"类型别名和宏\"></a>类型别名和宏</h2><p>stdlib.h 定义了下面的类型别名。</p>\n<ul>\n<li>size_t：sizeof 的返回类型。</li>\n<li>wchar_t：宽字符类型。</li>\n</ul>\n<p>stdlib.h 定义了下面的宏。</p>\n<ul>\n<li>NULL：空指针。</li>\n<li>EXIT_SUCCESS：函数运行成功时的退出状态。</li>\n<li>EXIT_FAILURE：函数运行错误时的退出状态。</li>\n<li>RAND_MAX：rand() 函数可以返回的最大值。</li>\n<li>MB_CUR_MAX：当前语言环境中，多字节字符占用的最大字节数。</li>\n</ul>\n<h2 id=\"abs-，labs-，llabs\"><a href=\"#abs-，labs-，llabs\" class=\"headerlink\" title=\"abs()，labs()，llabs()\"></a>abs()，labs()，llabs()</h2><p>这三个函数用于计算整数的绝对值。<code>abs()</code>用于 int 类型，<code>labs()</code>用于 long int 类型，<code>llabs()</code>用于 long long int 类型。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">labs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">llabs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 输出 |-2| = 2</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|-2| = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 |4|  = 4</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|4|  = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"div-，ldiv-，lldiv\"><a href=\"#div-，ldiv-，lldiv\" class=\"headerlink\" title=\"div()，ldiv()，lldiv()\"></a>div()，ldiv()，lldiv()</h2><p>这三个函数用来计算两个参数的商和余数。<code>div()</code>用于 int 类型的相除，<code>ldiv()</code>用于 long int 类型的相除，<code>lldiv()</code>用于 long long int 类型的相除。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">div_t <span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> denom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nldiv_t <span class=\"token function\">ldiv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> numer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> denom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlldiv_t <span class=\"token function\">lldiv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> numer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> denom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这些函数把第2个参数（分母）除以第1个参数（分子），产生商和余数。这两个值通过一个数据结构返回，<code>div()</code>返回 div_t 结构，<code>ldiv()</code>返回 ldiv_t 结构，<code>lldiv()</code>返回 lldiv_t 结构。</p>\n<p>这些结构都包含下面两个字段，</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>　quot<span class=\"token punctuation\">;</span>　 <span class=\"token comment\">//　商</span>\n<span class=\"token keyword\">int</span>　rem<span class=\"token punctuation\">;</span>　 <span class=\"token comment\">//　余数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>它们完整的定义如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> quot<span class=\"token punctuation\">,</span> rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> div_t<span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> quot<span class=\"token punctuation\">,</span> rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> ldiv_t<span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> quot<span class=\"token punctuation\">,</span> rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> lldiv_t<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">div_t d <span class=\"token operator\">=</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 64 / -7 = -9</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"64 / -7 = %d\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>quot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 64 % -7 = 1</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"64 %% -7 = %d\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符串转成数值\"><a href=\"#字符串转成数值\" class=\"headerlink\" title=\"字符串转成数值\"></a>字符串转成数值</h2><h3 id=\"a-系列函数\"><a href=\"#a-系列函数\" class=\"headerlink\" title=\"a 系列函数\"></a>a 系列函数</h3><p><code>stdlib.h</code>定义了一系列函数，可以将字符串转为数组。</p>\n<ul>\n<li>atoi()：字符串转成 int 类型。</li>\n<li>atof()：字符串转成 double 类型。</li>\n<li>atol()：字符串转成 long int 类型。</li>\n<li>atoll()：字符串转成 long long int 类型。</li>\n</ul>\n<p>它们的原型如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">atof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">atol</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">atoll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面函数的参数都是一个字符串指针，字符串开头的空格会被忽略，转换到第一个无效字符处停止。函数名称里面的<code>a</code>代表 ASCII，所以<code>atoi()</code>的意思是“ASCII to int”。</p>\n<p>它们返回转换后的数值，如果字符串无法转换，则返回<code>0</code>。</p>\n<p>下面是用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3490\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 3490</span>\n<span class=\"token function\">atof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3.141593\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 3.141593</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果参数是数字开头的字符串，<code>atoi()</code>会只转换数字部分，比如<code>atoi(&quot;42regular&quot;)</code>会返回整数<code>42</code>。如果首字符不是数字，比如“hello world”，则会返回<code>0</code>。</p>\n<h3 id=\"str-系列函数（浮点数转换）\"><a href=\"#str-系列函数（浮点数转换）\" class=\"headerlink\" title=\"str 系列函数（浮点数转换）\"></a>str 系列函数（浮点数转换）</h3><p><code>stdlib.h</code>还定义了一些更强功能的浮点数转换函数。</p>\n<ul>\n<li>strtof()：字符串转成 float 类型。</li>\n<li>strtod()：字符串转成 double 类型。</li>\n<li>strtold()：字符串转成 long double 类型。</li>\n</ul>\n<p>它们的原型如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">float</span> <span class=\"token function\">strtof</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> restrict nptr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> restrict endptr\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">strtod</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> restrict nptr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> restrict endptr\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> <span class=\"token function\">strtold</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> restrict nptr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> restrict endptr\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它们都接受两个参数，第一个参数是需要转换的字符串，第二个参数是一个指针，指向原始字符串里面无法转换的部分。</p>\n<ul>\n<li><code>nptr</code>：待转换的字符串（起首的空白字符会被忽略）。</li>\n<li><code>endprt</code>：一个指针，指向不能转换部分的第一个字符。如果字符串可以完全转成数值，该指针指向字符串末尾的终止符<code>\\0</code>。这个参数如果设为 NULL，就表示不需要处理字符串剩余部分。</li>\n</ul>\n<p>它们的返回值是已经转换后的数值。如果字符串无法转换，则返回<code>0</code>。如果转换结果发生溢出，errno 会被设置为 ERANGE。如果值太大（无论是正数还是负数），函数返回<code>HUGE_VAL</code>；如果值太小，函数返回零。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>inp <span class=\"token operator\">=</span> <span class=\"token string\">\"   123.4567abdc\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>badchar<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> val <span class=\"token operator\">=</span> <span class=\"token function\">strtod</span><span class=\"token punctuation\">(</span>inp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>badchar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123.456700</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> badchar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// abdc</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>字符串可以完全转换的情况下，第二个参数指向<code>\\0</code>，因此可以用下面的写法判断是否完全转换。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>endptr <span class=\"token operator\">==</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 完全转换</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 存在无法转换的字符</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果不关心没有转换的部分，则可以将 endptr 设置为 NULL。</p>\n<p>这些函数还可以将字符串转换为特殊值 Infinity 和 NaN。如果字符串包含 INF 或 INFINITY（大写或小写皆可），则将转换为 Infinity；如果字符串包含 NAN，则将返回 NaN。</p>\n<h3 id=\"str-系列函数（整数转换）\"><a href=\"#str-系列函数（整数转换）\" class=\"headerlink\" title=\"str 系列函数（整数转换）\"></a>str 系列函数（整数转换）</h3><p>str 系列函数也有整数转换的对应函数。</p>\n<ul>\n<li>strtol()：字符串转成 long int 类型。</li>\n<li>strtoll()：字符串转成 long long int 类型。</li>\n<li>strtoul()：字符串转成 unsigned long int 类型。</li>\n<li>strtoull()：字符串转成 unsigned long long int 类型。</li>\n</ul>\n<p>它们的原型如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strtol</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> restrict nptr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> restrict endptr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">int</span> base\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strtoll</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> restrict nptr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> restrict endptr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">int</span> base\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> restrict nptr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> restrict endptr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">int</span> base\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strtoull</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> restrict nptr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> restrict endptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它们接受三个参数。</p>\n<p>（1）<code>nPtr</code>：待转换的字符串（起首的空白字符会被忽略）。</p>\n<p>（2）<code>endPrt</code>：一个指针，指向不能转换部分的第一个字符。如果字符串可以完全转成数值，该指针指向字符串末尾的终止符<code>\\0</code>。这个参数如果设为 NULL，就表示不需要处理字符串剩余部分。</p>\n<p>（3）<code>base</code>：待转换整数的进制。这个值应该是<code>2</code>到<code>36</code>之间的整数，代表相应的进制，如果是特殊值<code>0</code>，表示让函数根据数值的前缀，自己确定进制，即如果数字有前缀<code>0</code>，则为八进制，如果数字有前缀<code>0x</code>或<code>0X</code>，则为十六进制。</p>\n<p>它们的返回值是转换后的数值，如果转换不成功，返回<code>0</code>。</p>\n<p>下面是转换十进制整数的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"3490\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lu\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3490</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是转换十六进制整数的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> end<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">long</span> value <span class=\"token operator\">=</span> <span class=\"token function\">strtol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0xff\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\\n\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 255</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无内容</span>\n\nvalue <span class=\"token operator\">=</span> <span class=\"token function\">strtol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0xffxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\\n\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 255</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// xx</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>strtol()</code>可以指定字符串包含的是16进制整数。不能转换的部分，可以使用指针<code>end</code>进行访问。</p>\n<p>下面是转换二进制整数的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"101010\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lu\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是让函数自行判断整数进制的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"-1234567abc\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> remainderPtr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> x <span class=\"token operator\">=</span> <span class=\"token function\">strtol</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>remainderPtr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\\"%s\\\"\\n%s%ld\\n%s\\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"The original string is \"</span><span class=\"token punctuation\">,</span>\n    string<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"The converted value is \"</span><span class=\"token punctuation\">,</span>\n    x<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"The remainder of the original string is \"</span><span class=\"token punctuation\">,</span>\n    remainderPtr\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码的输出结果如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">The original string is <span class=\"token string\">\"-1234567abc\"</span>\nThe converted value is <span class=\"token operator\">-</span><span class=\"token number\">1234567</span>\nThe remainder of the original string is <span class=\"token string\">\"abc\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果被转换的值太大，<code>strtol()</code>函数在<code>errno</code>中存储<code>ERANGE</code>这个值，并返回<code>LONG_MIN</code>（原值为负数）或<code>LONG_MAX</code>（原值为正数），<code>strtoul()</code>则返回<code>ULONG_MAX</code>。</p>\n<h2 id=\"rand\"><a href=\"#rand\" class=\"headerlink\" title=\"rand()\"></a>rand()</h2><p><code>rand()</code>函数用来生成 0～RAND_MAX 之间的随机整数。<code>RAND_MAX</code>是一个定义在<code>stdlib.h</code>里面的宏，通常等于 INT_MAX。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 原型</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 示例</span>\n<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果希望获得整数 N 到 M 之间的随机数（包括 N 和 M 两个端点值），可以使用下面的写法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> （M <span class=\"token operator\">-</span> N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> N<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>比如，1 到 6 之间的随机数，写法如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">6</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>获得浮点数的随机值，可以使用下面的写法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 0 到 0.999999 之间的随机数</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0 to 0.99999: %f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// n 到 m 之间的随机数：</span>\n<span class=\"token comment\">// n + m * (rand() / (float)RAND_MAX)</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.5 to 15.7: %f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.5</span> <span class=\"token operator\">+</span> <span class=\"token number\">5.2</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>RAND_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，由于<code>rand()</code>和<code>RAND_MAX</code>都是 int 类型，要用显示的类型转换转为浮点数。</p>\n<h2 id=\"srand\"><a href=\"#srand\" class=\"headerlink\" title=\"srand()\"></a>srand()</h2><p><code>rand()</code>是伪随机数函数，为了增加随机性，必须在调用它之前，使用<code>srand()</code>函数重置一下种子值。</p>\n<p><code>srand()</code>函数接受一个无符号整数（unsigned int）作为种子值，没有返回值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>通常使用<code>time(NULL)</code>函数返回当前距离时间纪元的秒数，作为<code>srand()</code>的参数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>time()</code>的原型定义在头文件<code>time.h</code>里面，返回值的类型是类型别名<code>time_t</code>，具体的类型与系统有关，所以要强制转换一下类型。<code>time()</code>的参数是一个指针，指向一个具体的 time_t 类型的时间值，这里传入空指针<code>NULL</code>作为参数，由于 NULL 一般是<code>0</code>，所以也可以写成<code>time(0)</code>。</p>\n<h2 id=\"abort\"><a href=\"#abort\" class=\"headerlink\" title=\"abort()\"></a>abort()</h2><p><code>abort()</code>用于不正常地终止一个正在执行的程序。使用这个函数的目的，主要是它会触发 SIGABRT 信号，开发者可以在程序中为这个信号设置一个处理函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>该函数没有参数。</p>\n<h2 id=\"exit-，quick-exit-，-Exit\"><a href=\"#exit-，quick-exit-，-Exit\" class=\"headerlink\" title=\"exit()，quick_exit()，_Exit()\"></a>exit()，quick_exit()，_Exit()</h2><p>这三个函数都用来退出当前正在执行的程序。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">quick_exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">_Exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>它们都接受一个整数，表示程序的退出状态，<code>0</code>是正常退出，非零值表示发生错误，可以使用宏<code>EXIT_SUCCESS</code>和<code>EXIT_FAILURE</code>当作参数。它们本身没有返回值。</p>\n<p>它们的区别是，退出时所做的清理工作不同。<code>exit()</code>是正常退出，系统会做完整的清理，比如更新所有文件流，并且删除临时文件。<code>quick_exit()</code>是快速退出，系统的清理工作稍微少一点。<code>_Exit()</code>是立即退出，不做任何清理工作。</p>\n<p>下面是一些用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">quick_exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">_Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"atexit-，at-quick-exit\"><a href=\"#atexit-，at-quick-exit\" class=\"headerlink\" title=\"atexit()，at_quick_exit()\"></a>atexit()，at_quick_exit()</h2><p><code>atexit()</code>用来登记当前程序退出时（调用<code>exit()</code>或<code>main()</code>正常退出），所要执行的其他函数。</p>\n<p><code>at_quick_exit()</code>则是登记使用<code>quick_exit()</code>方法退出当前程序时，所要执行的其他函数。</p>\n<p><code>exit()</code>只能触发<code>atexit()</code>登记的函数，<code>quick_exit()</code>只能触发<code>at_quick_exit()</code>登记的函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">atexit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">at_quick_exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>它们的参数是要执行的函数地址，即函数名。它们的返回值都是调用成功时返回<code>0</code>，调用失败时返回非零值。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">sign_off</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">too_bad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">atexit</span><span class=\"token punctuation\">(</span>sign_off<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　 <span class=\"token comment\">/* 注册 sign_off()函数 */</span>\n\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter an integer:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"That's no integer!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">atexit</span><span class=\"token punctuation\">(</span>too_bad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">/* 注册 too_bad()函数 */</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is %s.\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"even\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"odd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">sign_off</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign_off\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">too_bad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"too bad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，用户输入失败时，会调用<code>sign_off()</code>和<code>too_bad()</code>函数；但是输入成功时只会调用<code>sign_off()</code>。因为只有输入失败时，才会进入<code>if</code>语句登记<code>too_bad()</code>。</p>\n<p>另外，如果有多条<code>atexit()</code>语句，函数退出时最先调用的，是最后一个登记的函数。</p>\n<p><code>atexit()</code>登记的函数（如上例的<code>sign_off</code>和<code>too_bad</code>）应该不带任何参数且返回类型为<code>void</code>。通常，这些函数会执行一些清理任务，例如删除临时文件或重置环境变量。</p>\n<p><code>at_quick_exit()</code>也是同样的规则，下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">exit_handler_1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">exit_handler_2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">at_quick_exit</span><span class=\"token punctuation\">(</span>exit_handler_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">at_quick_exit</span><span class=\"token punctuation\">(</span>exit_handler_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">quick_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行上面的示例，命令行会先输出2，再输出1。</p>\n<h2 id=\"getenv\"><a href=\"#getenv\" class=\"headerlink\" title=\"getenv()\"></a>getenv()</h2><p><code>getenv()</code>用于获取环境变量的值。环境变量是操作系统提供的程序之外的一些环境参数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的参数是一个字符串，表示环境变量名。返回值也是一个字符串，表示环境变量的值。如果指定的环境变量不存在，则返回 NULL。</p>\n<p>下面是输出环境变量<code>$PATH</code>的值的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH is %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"system\"><a href=\"#system\" class=\"headerlink\" title=\"system()\"></a>system()</h2><p><code>system()</code>函数用于执行外部程序。它会把它的参数字符串传递给操作系统，让操作系统的命令处理器来执行。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> command <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个函数的返回值因编译器而异。但是标准规定，如果 NULL 作为参数，表示询问操作系统，是否有可用的命令处理器，如果有的话，返回一个非零值，否则返回零。</p>\n<p>下面是执行<code>ls</code>命令的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ls -l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"内存管理函数\"><a href=\"#内存管理函数\" class=\"headerlink\" title=\"内存管理函数\"></a>内存管理函数</h2><p>stdlib.h 提供了一些内存操作函数，下面几个函数详见《内存管理》一章，其余在本节介绍。</p>\n<ul>\n<li>malloc()：分配内存区域</li>\n<li>calloc()：分配内存区域。</li>\n<li>realloc()：调节内存区域大小。</li>\n<li>free()：释放内存区域。</li>\n</ul>\n<h3 id=\"aligned-alloc\"><a href=\"#aligned-alloc\" class=\"headerlink\" title=\"aligned_alloc()\"></a>aligned_alloc()</h3><p>很多系统有内存对齐的要求，即内存块的大小必须是某个值（比如64字节）的倍数，这样有利于提高处理速度。<code>aligned_alloc()</code>就用于分配满足内存对齐要求的内存块，它的原型如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">aligned_alloc</span><span class=\"token punctuation\">(</span>size_t alignment<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数。</p>\n<ul>\n<li>alignment：整数，表示内存对齐的单位大小，一般是2的整数次幂（2、4、8、16……）。</li>\n<li>size：整数，表示内存块的大小。</li>\n</ul>\n<p>分配成功时，它返回一个无类型指针，指向新分配的内存块。分配失败时，返回 NULL。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">aligned_alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>aligned_alloc()</code>分配的内存块，单位大小是64字节，要分配的字节数是256字节。</p>\n<h2 id=\"qsort\"><a href=\"#qsort\" class=\"headerlink\" title=\"qsort()\"></a>qsort()</h2><p><code>qsort()</code>用来快速排序一个数组。它对数组成员的类型没有要求，任何类型数组都可以用这个函数排序。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span>\n  size_t nmemb<span class=\"token punctuation\">,</span> \n  size_t size<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>compar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该函数接受四个参数。</p>\n<ul>\n<li>base：指向要排序的数组开始位置的指针。</li>\n<li>nmemb：数组成员的数量。</li>\n<li>size：数组每个成员占用的字节长度。</li>\n<li>compar：一个函数指针，指向一个比较两个成员的函数。</li>\n</ul>\n<p>比较函数<code>compar</code>将指向数组两个成员的指针作为参数，并比较两个成员。如果第一个参数小于第二个参数，该函数应该返回一个负值；如果两个函数相等，返回<code>0</code>；如果第一个参数大于第二个参数，应该返回一个正数。</p>\n<p>下面是一个用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">compar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> elem0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> elem1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> x <span class=\"token operator\">=</span> elem0<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> y <span class=\"token operator\">=</span> elem1<span class=\"token punctuation\">;</span> \n  \n  <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>x <span class=\"token operator\">-</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> compar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行上面示例，会输出排序好的数组“1 2 3 6 8 10 13 14 17”。</p>\n<h2 id=\"bsearch\"><a href=\"#bsearch\" class=\"headerlink\" title=\"bsearch()\"></a>bsearch()</h2><p><code>bsearch()</code>使用二分法搜索，在数组中搜索一个值。它对数组成员的类型没有要求，任何类型数组都可以用这个函数搜索值。</p>\n<p>注意，该方法只对已经排序好的数组有效。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">bsearch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> key<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> base<span class=\"token punctuation\">,</span>\n  size_t nmemb<span class=\"token punctuation\">,</span>\n  size_t size<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>compar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个函数接受5个参数。</p>\n<ul>\n<li>key：指向要查找的值的指针。</li>\n<li>base：指向数组开始位置的指针，数组必须已经排序。</li>\n<li>nmemb：数组成员的数量。</li>\n<li>size：数组每个成员占用的字节长度。</li>\n<li>compar：指向一个将待查找值与其他值进行比较的函数的指针。</li>\n</ul>\n<p>比较函数<code>compar</code>将待查找的值作为第一个参数，将要比较的值作为第二个参数。如果第一个参数小于第二个参数，该函数应该返回一个负值；如果两个参数相等，返回<code>0</code>；如果第一个参数大于第二个参数，返回一个正值。</p>\n<p>如果找到待查找的值，<code>bsearch()</code>返回指向该值的指针，如果找不到，返回 NULL。</p>\n<p>下面是一个用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">compar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> k <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> v <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>k <span class=\"token operator\">-</span> <span class=\"token operator\">*</span>v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">47</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">;</span>\n\n  key <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 包括在数组中</span>\n  r <span class=\"token operator\">=</span> <span class=\"token function\">bsearch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> compar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  key <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 不包括在数组中</span>\n  r <span class=\"token operator\">=</span> <span class=\"token function\">bsearch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> compar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Didn't find 30\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行上面的示例，会输出下面的结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Found <span class=\"token number\">12</span>\nDidn't <span class=\"token function\">find</span> <span class=\"token number\">30</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"多字节字符函数\"><a href=\"#多字节字符函数\" class=\"headerlink\" title=\"多字节字符函数\"></a>多字节字符函数</h2><p>stdlib.h 提供了下面的函数，用来操作多字节字符，详见《多字节字符》一章。</p>\n<ul>\n<li>mblen()：多字节字符的字节长度。</li>\n<li>mbtowc()：将多字节字符转换为宽字符。</li>\n<li>wctomb()：将宽字符转换为多字节字符。</li>\n<li>mbstowcs()：将多字节字符串转换为宽字符串。</li>\n<li>wcstombs()：将宽字符串转换为多字节字符串。</li>\n</ul>\n<h1 id=\"string-h\"><a href=\"#string-h\" class=\"headerlink\" title=\"string.h\"></a>string.h</h1><p><code>string.h</code>主要定义了字符串处理函数和内存操作函数。</p>\n<h2 id=\"字符串处理函数\"><a href=\"#字符串处理函数\" class=\"headerlink\" title=\"字符串处理函数\"></a>字符串处理函数</h2><p>以下字符串处理函数，详见《字符串》一章。</p>\n<ul>\n<li>strcpy()：复制字符串。</li>\n<li>strncpy()：复制字符串，有长度限制。</li>\n<li>strcat()：连接两个字符串。</li>\n<li>strncat()：连接两个字符串，有长度限制。</li>\n<li>strcmp()：比较两个字符串。</li>\n<li>strncmp()：比较两个字符串，有长度限制。</li>\n<li>strlen()：返回字符串的字节数。</li>\n</ul>\n<h3 id=\"strchr-，strrchr\"><a href=\"#strchr-，strrchr\" class=\"headerlink\" title=\"strchr()，strrchr()\"></a>strchr()，strrchr()</h3><p><code>strchr()</code>和<code>strrchr()</code>都用于在字符串中查找指定字符。不同之处是，<code>strchr()</code>从字符串开头开始查找，<code>strrchr()</code>从字符串结尾开始查找，函数名里面多出来的那个<code>r</code>表示 reverse（反向）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>它们都接受两个参数，第一个参数是字符串指针，第二个参数是所要查找的字符。</p>\n<p>一旦找到该字符，它们就会停止查找，并返回指向该字符的指针。如果没有找到，则返回 NULL。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\np <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// p 指向逗号的位置</span>\np <span class=\"token operator\">=</span> <span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// p 指向 world 里面 o 的位置</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"strspn-，strcspn\"><a href=\"#strspn-，strcspn\" class=\"headerlink\" title=\"strspn()，strcspn()\"></a>strspn()，strcspn()</h3><p><code>strspn()</code>用来查找属于指定字符集的字符串长度，<code>strcspn()</code>正好相反，用来查找不属于指定字符集的字符串长度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">size_t <span class=\"token function\">strspn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> accept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsize_t <span class=\"token function\">strcspn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这两个函数接受两个参数，第一个参数是源字符串，第二个参数是由指定字符组成的字符串。</p>\n<p><code>strspn()</code>从第一个参数的开头开始查找，一旦发现第一个不属于指定字符集范围的字符，就停止查找，返回到目前为止的字符串长度。如果始终没有不在指定字符集的字符，则返回第一个参数字符串的长度。</p>\n<p><code>strcspn()</code>则是一旦发现第一个属于指定字符集范围的字符，就停止查找，返回到目前为止的字符串长度。如果始终没有发现指定字符集的字符，则返回第一个参数字符串的长度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token function\">strspn</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aeiou\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// n == 0</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token function\">strcspn</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aeiou\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n == 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，第一个<code>n</code>等于0，因为0号位置的字符<code>h</code>就不属于指定字符集<code>aeiou</code>，可以理解为开头有0个字符属于指定字符集。第二个<code>n</code>等于1，因为1号位置的字符<code>e</code>属于指定字符集<code>aeiou</code>，可以理解为开头有1个字符不属于指定字符集。</p>\n<h3 id=\"strpbrk\"><a href=\"#strpbrk\" class=\"headerlink\" title=\"strpbrk()\"></a>strpbrk()</h3><p><code>strpbrk()</code>在字符串中搜索指定字符集的任一个字符。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strpbrk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数，第一个参数是源字符串，第二个参数是由指定字符组成的字符串。</p>\n<p>它返回一个指向第一个匹配字符的指针，如果未找到匹配字符，则返回 NULL。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"dow!\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">strpbrk</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"o, world!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，指定字符集是“dow!”，那么<code>s1</code>里面第一个匹配字符是“Hello”的“o”，所以指针<code>p</code>指向这个字符。输出的话，就会输出从这个字符直到字符串末尾的“o, world!”。</p>\n<h3 id=\"strstr\"><a href=\"#strstr\" class=\"headerlink\" title=\"strstr()\"></a>strstr()</h3><p><code>strstr()</code>在一个字符串里面，查找另一个字符串。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> substr\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它接受两个参数，第一个参数是源字符串，第二个参数是所要查找的子字符串。</p>\n<p>如果匹配成功，就返回一个指针，指向源字符串里面的子字符串。如果匹配失败，就返回 NULL，表示无法找到子字符串。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"The quick brown fox jumped over the lazy dogs.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lazy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"null\"</span><span class=\"token operator\">:</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"lazy dogs.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>strstr()</code>用来在源字符串<code>str</code>里面，查找子字符串<code>lazy</code>。从返回的指针到字符串结尾，就是“lazy dogs.”。</p>\n<h3 id=\"strtok\"><a href=\"#strtok\" class=\"headerlink\" title=\"strtok()\"></a>strtok()</h3><p><code>strtok()</code>用来将一个字符串按照指定的分隔符（delimiter），分解成一系列词元（tokens）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> delim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数，第一个参数是待拆分的字符串，第二个参数是指定的分隔符。</p>\n<p>它返回一个指针，指向分解出来的第一个词元，并将词元结束之处的分隔符替换成字符串结尾标志<code>\\0</code>。如果没有待分解的词元，它返回 NULL。</p>\n<p>如果要遍历所有词元，就必须循环调用，参考下面的例子。</p>\n<p><code>strtok()</code>的第一个参数如果是 NULL，则表示从上一次<code>strtok()</code>分解结束的位置，继续往下分解。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a sentence with 7 tokens\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> tokenPtr <span class=\"token operator\">=</span> <span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tokenPtr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> tokenPtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tokenPtr <span class=\"token operator\">=</span> <span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例将源字符串按照空格，分解词元。它的输出结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">This\nis\na\nsentence\nwith\n<span class=\"token number\">7</span>\ntokens<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，<code>strtok()</code>会修改原始字符串，将所有分隔符都替换成字符串结尾符号<code>\\0</code>。因此，最好生成一个原始字符串的拷贝，然后再对这个拷贝执行<code>strtok()</code>。</p>\n<h3 id=\"strcoll\"><a href=\"#strcoll\" class=\"headerlink\" title=\"strcoll()\"></a>strcoll()</h3><p><code>strcoll()</code>用于比较两个启用了本地化设置的字符串，用法基本与<code>strcmp()</code>相同。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">strcoll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>请看下面的示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">setlocale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 报告 é > f</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"é\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token comment\">// 报告 é &lt; f</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strcoll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"é\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例比较带重音符号的<code>é</code>与<code>f</code>，<code>strcmp()</code>会返回<code>é</code>大于<code>f</code>，而<code>strcoll()</code>就会正确识别<code>é</code>排在<code>f</code>前面，所以小于<code>f</code>。注意，在比较之前，需要使用<code>setlocale(LC_ALL, &quot;&quot;)</code>，启用本地化设置。</p>\n<h3 id=\"strxfrm\"><a href=\"#strxfrm\" class=\"headerlink\" title=\"strxfrm()\"></a>strxfrm()</h3><p><code>strxfrm()</code>将一个本地化字符串转成可以使用<code>strcmp()</code>进行比较的形式，相当于<code>strcoll()</code>内部的第一部分操作。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">size_t <span class=\"token function\">strxfrm</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict s1<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict s2<span class=\"token punctuation\">,</span> \n  size_t n\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它接受三个参数，将第二个参数<code>s2</code>转为可以使用<code>strcmp()</code>比较的形式，并将结果存入第一个参数<code>s1</code>。第三个参数<code>n</code>用来限定写入的字符数，防止超出<code>s1</code>的边界。</p>\n<p>它返回转换后的字符串长度，不包括结尾的终止符。</p>\n<p>如果第一个参数是 NULL，第三个参数是0，则不进行实际的转换，只返回转换后所需的字符串长度。</p>\n<p>下面的示例是用这个函数自己实现一个<code>strcoll()</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">my_strcoll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> len1 <span class=\"token operator\">=</span> <span class=\"token function\">strxfrm</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> len2 <span class=\"token operator\">=</span> <span class=\"token function\">strxfrm</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>d1 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>d2 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">strxfrm</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">,</span> len1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">strxfrm</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> len2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，先为两个进行比较的本地化字符串，分配转换后的存储空间，使用<code>strxfrm()</code>将它们转为可比较的形式，再用<code>strcmp()</code>进行比较。</p>\n<h3 id=\"strerror\"><a href=\"#strerror\" class=\"headerlink\" title=\"strerror()\"></a>strerror()</h3><p><code>strerror()</code>函数返回特定错误的说明字符串。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> errornum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的参数是错误的编号，由<code>errno.h</code>定义。返回值是一个指向说明字符串的指针。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 输出 No such file or directory</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例输出2号错误的说明字符“No such file or directory“。</p>\n<p>下面的例子是自定义报错信息。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  FILE<span class=\"token operator\">*</span> fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NONEXISTENT_FILE.TXT\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> errmsg <span class=\"token operator\">=</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error %d opening file: %s\\n\"</span><span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> errmsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，通过<code>strerror(errno)</code>拿到当前的默认报错信息，其中<code>errno</code>是<code>errno.h</code>定义的宏，表示当前的报错编号。然后，再输出一条自定义的报错信息。</p>\n<h2 id=\"内存操作函数\"><a href=\"#内存操作函数\" class=\"headerlink\" title=\"内存操作函数\"></a>内存操作函数</h2><p>以下内存操作函数，详见《内存管理》一章。</p>\n<ul>\n<li>memcpy()：内存复制函数。</li>\n<li>memmove()：内存复制函数（允许重叠）。</li>\n<li>memcmp()：比较两个内存区域。</li>\n</ul>\n<h3 id=\"memchr\"><a href=\"#memchr\" class=\"headerlink\" title=\"memchr()\"></a>memchr()</h3><p><code>memchr()</code>用于在内存区域中查找指定字符。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">memchr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受三个参数，第一个参数是内存区域的指针，第二个参数是所要查找的字符，第三个参数是内存区域的字节长度。</p>\n<p>一旦找到，它就会停止查找，并返回指向该位置的指针。如果直到检查完指定的字节数，依然没有发现指定字符，则返回 NULL。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\np <span class=\"token operator\">=</span> <span class=\"token function\">memchr</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// p 指向感叹号的位置</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"memset\"><a href=\"#memset\" class=\"headerlink\" title=\"memset()\"></a>memset()</h3><p><code>memset()</code>将一段内存全部格式化为指定值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的第一个参数是一个指针，指向内存区域的开始位置，第二个参数是待写入的字符值，第三个参数是一个整数，表示需要格式化的字节数。它返回第一个参数（指针）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，p 是一个指针，指向一个长度为 N 个字节的内存区域。<code>memset()</code>将该块内存区域的每个字节，都改写为空格字符。</p>\n<p>下面是另一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> string1<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"BBBBBBBBBBBBBB\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 bbbbbbbBBBBBBB</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>memset()</code>的一个重要用途，就是将数组成员全部初始化为0。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面是将 Struct 结构都初始化为0的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">banana</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">float</span> ripeness<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>peel_color<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> grams<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">banana</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nb<span class=\"token punctuation\">.</span>ripeness <span class=\"token operator\">==</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// True</span>\nb<span class=\"token punctuation\">.</span>peel_color <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// True</span>\nb<span class=\"token punctuation\">.</span>grams <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例，将 Struct banana 的实例 b 的所有属性都初始化为0。</p>\n<h2 id=\"其他函数-1\"><a href=\"#其他函数-1\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsize_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"time-h\"><a href=\"#time-h\" class=\"headerlink\" title=\"time.h\"></a>time.h</h1><h2 id=\"time-t\"><a href=\"#time-t\" class=\"headerlink\" title=\"time_t\"></a>time_t</h2><p>time_t 是一个表示时间的类型别名，可以视为国际标准时 UTC。它可能是浮点数，也可能是整数，Unix 系统一般是整数。</p>\n<p>许多系统上，time_t 表示自时间纪元（time epoch）以来的秒数。Unix 的时间纪元是国际标准时 UTC 的1970年1月1日的零分零秒。time_t 如果为负数，则表示时间纪元之前的时间。</p>\n<p>time_t 一般是32位或64位整数类型的别名，具体类型取决于当前系统。如果是32位带符号整数，time_t 可以表示的时间到 2038年1月19日03:14:07 UTC 为止；如果是32位无符号整数，则表示到2106年。如果是64位带符号整数，可以表示<code>-2930</code>亿年到<code>+2930</code>亿年的时间范围。</p>\n<h2 id=\"struct-tm\"><a href=\"#struct-tm\" class=\"headerlink\" title=\"struct tm\"></a>struct tm</h2><p>struct tm 是一个数据结构，用来保存时间的各个组成部分，比如小时、分钟、秒、日、月、年等。下面是它的结构。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> tm_sec<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 秒数 [0, 60]</span>\n  <span class=\"token keyword\">int</span> tm_min<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 分钟 [0, 59]</span>\n  <span class=\"token keyword\">int</span> tm_hour<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 小时 [0, 23]</span>\n  <span class=\"token keyword\">int</span> tm_mday<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 月份的天数 [1, 31]</span>\n  <span class=\"token keyword\">int</span> tm_mon<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 月份 [0, 11]，一月用 0 表示</span>\n  <span class=\"token keyword\">int</span> tm_year<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 距离 1900 的年数</span>\n  <span class=\"token keyword\">int</span> tm_wday<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 星期几 [0, 6]，星期天用 0 表示</span>\n  <span class=\"token keyword\">int</span> tm_yday<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 距离1月1日的天数 [0, 365]</span>\n  <span class=\"token keyword\">int</span> tm_isdst<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 是否采用夏令时，1 表示采用，0 表示未采用</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"time\"><a href=\"#time\" class=\"headerlink\" title=\"time()\"></a>time()</h2><p><code>time()</code>函数返回从时间纪元到现在经过的秒数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">time_t <span class=\"token function\">time</span><span class=\"token punctuation\">(</span>time_t<span class=\"token operator\">*</span> returned_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>time()</code>接受一个 time_t 指针作为参数，返回值会写入指针地址。参数可以是空指针 NULL。</p>\n<p><code>time()</code>的返回值是 time_t 类型的当前时间。 如果计算机无法提供当前的秒数，或者返回值太大，无法用<code>time_t</code>类型表示，<code>time()</code>函数就返回<code>-1</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">time_t now<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 写法一    </span>\nnow <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 写法二    </span>\n<span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例展示了将当前时间存入变量<code>now</code>的两种写法。</p>\n<p>如果要知道某个操作耗费的精确时间，需要调用两次<code>time()</code>，再将两次的返回值相减。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">time_t begin <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ... 执行某些操作</span>\n\ntime_t end <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，上面的方法只能精确到秒。</p>\n<h2 id=\"ctime\"><a href=\"#ctime\" class=\"headerlink\" title=\"ctime()\"></a>ctime()</h2><p><code>ctime()</code>用来将 time_t 类型的值直接输出为人类可读的格式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span> time_t <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> time_value <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>ctime()</code>的参数是一个 time_t 指针，返回一个字符串指针。该字符串的格式类似“Sun Jul 4 04:02:48 1976\\n\\0”，尾部包含换行符和字符串终止标志。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">time_t now<span class=\"token punctuation\">;</span> \n\nnow <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 Sun Feb 28 18:47:25 2021</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，<code>ctime()</code>会在字符串尾部自动添加换行符。</p>\n<h2 id=\"localtime-，gmtime\"><a href=\"#localtime-，gmtime\" class=\"headerlink\" title=\"localtime()，gmtime()\"></a>localtime()，gmtime()</h2><p><code>localtime()</code>函数用来将 time_t 类型的时间，转换为当前时区的 struct tm 结构。</p>\n<p><code>gmtime()</code>函数用来将 time_t 类型的时间，转换为 UTC 时间的 struct tm 结构。</p>\n<p>它们的区别就是返回值，前者是本地时间，后者是 UTC 时间。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span><span class=\"token operator\">*</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> time_t<span class=\"token operator\">*</span> timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span><span class=\"token operator\">*</span> <span class=\"token function\">gmtime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> time_t<span class=\"token operator\">*</span> timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 Local: Sun Feb 28 20:15:27 2021</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Local: %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">asctime</span><span class=\"token punctuation\">(</span><span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 UTC  : Mon Mar  1 04:15:27 2021</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTC  : %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">asctime</span><span class=\"token punctuation\">(</span><span class=\"token function\">gmtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"asctime\"><a href=\"#asctime\" class=\"headerlink\" title=\"asctime()\"></a>asctime()</h2><p><code>asctime()</code>函数用来将 struct tm 结构，直接输出为人类可读的格式。该函数会自动在输出的尾部添加换行符。</p>\n<p>用法示例参考上一小节。</p>\n<h2 id=\"mktime\"><a href=\"#mktime\" class=\"headerlink\" title=\"mktime()\"></a>mktime()</h2><p><code>mktime()</code>函数用于把一个 struct tm 结构转换为 time_t 值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">time_t　<span class=\"token function\">mktime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span><span class=\"token operator\">*</span> tm_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>mktime()</code>的参数是一个 struct tm 指针。</p>\n<p><code>mktime()</code>会自动设置 struct tm 结构里面的<code>tm_wday</code>属性和<code>tm_yday</code>属性，开发者自己不必填写这两个属性。所以，这个函数常用来获得指定时间是星期几（<code>tm_wday</code>）。</p>\n<p>struct tm 结构的<code>tm_isdst</code>属性也可以设为<code>-1</code>，让<code>mktime()</code>决定是否应该采用夏令时。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> some_time <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">.</span>tm_year<span class=\"token operator\">=</span><span class=\"token number\">82</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 距离 1900 的年数</span>\n  <span class=\"token punctuation\">.</span>tm_mon<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 月份 [0, 11]</span>\n  <span class=\"token punctuation\">.</span>tm_mday<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 天数 [1, 31]</span>\n  <span class=\"token punctuation\">.</span>tm_hour<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 小时 [0, 23]</span>\n  <span class=\"token punctuation\">.</span>tm_min<span class=\"token operator\">=</span><span class=\"token number\">00</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 分钟 [0, 59]</span>\n  <span class=\"token punctuation\">.</span>tm_sec<span class=\"token operator\">=</span><span class=\"token number\">04</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 秒数 [0, 60]</span>\n  <span class=\"token punctuation\">.</span>tm_isdst<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 夏令时</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    \ntime_t some_time_epoch<span class=\"token punctuation\">;</span>\nsome_time_epoch <span class=\"token operator\">=</span> <span class=\"token function\">mktime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>some_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token comment\">// 输出 Mon Apr 12 12:00:04 1982</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>some_time_epoch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 Is DST: 0</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is DST: %d\\n\"</span><span class=\"token punctuation\">,</span> some_time<span class=\"token punctuation\">.</span>tm_isdst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"difftime\"><a href=\"#difftime\" class=\"headerlink\" title=\"difftime()\"></a>difftime()</h2><p><code>difftime()</code>用来计算两个时间之间的差异。Unix 系统上，直接相减两个 time_t 值，就可以得到相差的秒数，但是为了程序的可移植性，最好还是使用这个函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">difftime</span><span class=\"token punctuation\">(</span> time_t time1<span class=\"token punctuation\">,</span> time_t time2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>difftime()</code>函数接受两个 time_t 类型的时间作为参数，计算 time1 - time2 的差，并把结果转换为秒。</p>\n<p>注意它的返回值是 double 类型。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n    \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> time_a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span>tm_year<span class=\"token operator\">=</span><span class=\"token number\">82</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">.</span>tm_mon<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>   \n    <span class=\"token punctuation\">.</span>tm_mday<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">.</span>tm_hour<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">.</span>tm_min<span class=\"token operator\">=</span><span class=\"token number\">00</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">.</span>tm_sec<span class=\"token operator\">=</span><span class=\"token number\">04</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">.</span>tm_isdst<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    \n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> time_b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span>tm_year<span class=\"token operator\">=</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>tm_mon<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">.</span>tm_mday<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">.</span>tm_hour<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">.</span>tm_min<span class=\"token operator\">=</span><span class=\"token number\">27</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">.</span>tm_sec<span class=\"token operator\">=</span><span class=\"token number\">00</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">.</span>tm_isdst<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    \n  time_t cal_a <span class=\"token operator\">=</span> <span class=\"token function\">mktime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>time_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  time_t cal_b <span class=\"token operator\">=</span> <span class=\"token function\">mktime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>time_b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n  <span class=\"token keyword\">double</span> diff <span class=\"token operator\">=</span> <span class=\"token function\">difftime</span><span class=\"token punctuation\">(</span>cal_b<span class=\"token punctuation\">,</span> cal_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n  <span class=\"token keyword\">double</span> years <span class=\"token operator\">=</span> diff <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">24</span> <span class=\"token operator\">/</span> <span class=\"token number\">365.2425</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// 输出 1217996816.000000 seconds (38.596783 years) between events</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f seconds (%f years) between events\\n\"</span><span class=\"token punctuation\">,</span> diff<span class=\"token punctuation\">,</span> years<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，折算年份时，为了尽量准确，使用了一年的准确长度 365.2425 天，这样可以抵消闰年的影响。</p>\n<h2 id=\"strftime\"><a href=\"#strftime\" class=\"headerlink\" title=\"strftime()\"></a>strftime()</h2><p><code>strftime()</code>函数用来将 struct tm 结构转换为一个指定格式的字符串，并复制到指定地址。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">size_t <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> \n  size_t maxsize<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span><span class=\"token operator\">*</span> timeptr\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>strftime()</code>接受四个参数。</p>\n<ul>\n<li>第一个参数：目标字符串的指针。</li>\n<li>第二个参数：目标字符串可以接受的最大长度。</li>\n<li>第三个参数：格式字符串。</li>\n<li>第四个参数：struct tm 结构。</li>\n</ul>\n<p>如果执行成功（转换并复制），<code>strftime()</code>函数返回复制的字符串长度；如果执行失败，返回<code>-1</code>。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  time_t now <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// %c: 本地时间</span>\n  <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Sun Feb 28 22:29:00 2021</span>\n\n  <span class=\"token comment\">// %A: 完整的星期日期的名称</span>\n  <span class=\"token comment\">// %B: 完整的月份名称</span>\n  <span class=\"token comment\">// %d: 月份的天数</span>\n  <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%A, %B %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Sunday, February 28</span>\n\n  <span class=\"token comment\">// %I: 小时（12小时制）</span>\n  <span class=\"token comment\">// %M: 分钟</span>\n  <span class=\"token comment\">// %S: 秒数</span>\n  <span class=\"token comment\">// %p: AM 或 PM</span>\n  <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"It's %I:%M:%S %p\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// It's 10:29:00 PM</span>\n\n  <span class=\"token comment\">// %F: ISO 8601 yyyy-mm-dd 格式</span>\n  <span class=\"token comment\">// %T: ISO 8601 hh:mm:ss 格式</span>\n  <span class=\"token comment\">// %z: ISO 8601 时区</span>\n  <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ISO 8601: %FT%T%z\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ISO 8601: 2021-02-28T22:29:00-0800</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是常用的格式占位符。</p>\n<ul>\n<li>%%：输出 % 字符。</li>\n<li>%a：星期几的简写形式，以当地时间计算。</li>\n<li>%A：星期几的完整形式，以当地时间计算。</li>\n<li>%b：月份的简写形式，以当地时间计算。</li>\n<li>%B：月份的完整形式，以当地时间计算。</li>\n<li>%c：日期和时间，使用“%x %X”。</li>\n<li>%d：月份的天数（01-31）。</li>\n<li>%H：小时，采用24小时制（00-23）。</li>\n<li>%I：小时，采用12小时制（00-12）。</li>\n<li>%J：一年的第几天（001-366）。</li>\n<li>%m：月数（01-12）。</li>\n<li>%M：分钟（00～59）。</li>\n<li>%P：AM 或 PM。</li>\n<li>%R：相当于”%H:%M”。</li>\n<li>%S：秒（00-61）。</li>\n<li>%U：一年的第几星期（00-53），以星期日为第1天。</li>\n<li>%w：一星期的第几天，星期日为第0天。</li>\n<li>%W：一年的第几星期(00-53)，以星期一为第1天。</li>\n<li>%x：完整的年月日的日期，以当地时间计算。</li>\n<li>%X：完整的时分秒的时间，以当地时间计算。</li>\n<li>%y：两位数年份（00-99）。</li>\n<li>%Y：四位数年份（例如 1984）。</li>\n<li>%Z：时区的简写。</li>\n</ul>\n<h2 id=\"timespec-get\"><a href=\"#timespec-get\" class=\"headerlink\" title=\"timespec_get()\"></a>timespec_get()</h2><p><code>timespec_get()</code>用来将当前时间转成距离时间纪元的纳秒数（十亿分之一秒）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">timespec_get</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span><span class=\"token operator\">*</span> ts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>timespec_get()</code>接受两个参数。</p>\n<p>第一个参数是 struct timespec 结构指针，用来保存转换后的时间信息。struct timespec 的结构如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span> <span class=\"token punctuation\">&#123;</span>\n  time_t tv_sec<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 秒数</span>\n  <span class=\"token keyword\">long</span>   tv_nsec<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 纳秒</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第二个参数是一个整数，表示时间计算的起点。标准只给出了宏 TIME_UTC 这一个可能的值，表示返回距离时间纪元的秒数。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span> ts<span class=\"token punctuation\">;</span>\n    \n<span class=\"token function\">timespec_get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ts<span class=\"token punctuation\">,</span> TIME_UTC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token comment\">// 1614581530 s, 806325800 ns</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld s, %ld ns\\n\"</span><span class=\"token punctuation\">,</span> ts<span class=\"token punctuation\">.</span>tv_sec<span class=\"token punctuation\">,</span> ts<span class=\"token punctuation\">.</span>tv_nsec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">double</span> float_time <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">+</span> ts<span class=\"token punctuation\">.</span>tv_nsec<span class=\"token operator\">/</span><span class=\"token number\">1000000000.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1614581530.806326 seconds since epoch</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f seconds since epoch\\n\"</span><span class=\"token punctuation\">,</span> float_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"clock\"><a href=\"#clock\" class=\"headerlink\" title=\"clock()\"></a>clock()</h2><p><code>clock()</code>函数返回从程序开始执行到当前的 CPU 时钟周期。一个时钟周期等于 CPU 频率的倒数，比如 CPU 的频率如果是 1G Hz，表示1秒内时钟信号可以变化 10^9 次，那么每个时钟周期就是 10^-9 秒。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">clock_t　<span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>clock()</code>函数返回一个数字，表示从程序开始到现在的 CPU 时钟周期的次数。这个值的类型是 clock_t，一般是 long int 类型。 </p>\n<p>为了把这个值转换为秒，应该把它除以常量<code>CLOCKS_PER_SEC</code>（每秒的时钟周期），这个常量也由<code>time.h</code>定义。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CPU time: %f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>CLOCKS_PER_SEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例可以输出程序从开始到运行到这一行所花费的秒数。</p>\n<p>如果计算机无法提供 CPU 时间，或者返回值太大，无法用<code>clock_t</code>类型表示，<code>clock()</code>函数就返回<code>-1</code>。</p>\n<p>为了知道某个操作所耗费的精确时间，需要调用两次<code>clock()</code>，然后将两次的返回值相减。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">clock_t start <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ... 执行某些操作</span>\n\nclock_t end <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> seconds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> CLOCKS_PER_SEC<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://serhack.me/articles/measure-execution-time-program/\">How to Measure Execution Time of a Program</a></li>\n</ul>\n<h1 id=\"wchar-h\"><a href=\"#wchar-h\" class=\"headerlink\" title=\"wchar.h\"></a>wchar.h</h1><p>宽字符使用两个或四个字节表示一个字符，导致 C 语言常规的字符处理函数都会失效。wchar.h 定义了许多宽字符专用的处理函数。</p>\n<h2 id=\"类型别名和宏-1\"><a href=\"#类型别名和宏-1\" class=\"headerlink\" title=\"类型别名和宏\"></a>类型别名和宏</h2><p>wchar.h 定义了一个类型别名 wint_t，表示宽字符对应整数值。</p>\n<p>wchar.h 还定义了一个宏 WEOF，表示文件结束字符 EOF 的宽字符版。</p>\n<h2 id=\"btowc-，wctob\"><a href=\"#btowc-，wctob\" class=\"headerlink\" title=\"btowc()，wctob()\"></a>btowc()，wctob()</h2><p><code>btowc()</code>将单字节字符转换为宽字符，<code>wctob()</code>将宽字符转换为单字节字符。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">wint_t <span class=\"token function\">btowc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">wctob</span><span class=\"token punctuation\">(</span>wint_t c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>btowc()</code>返回一个宽字符。如果参数是 EOF，或转换失败，则返回 WEOF。</p>\n<p><code>wctob()</code>返回一个单字节字符。如果参数是 WEOF，或者参数宽字符无法对应单个的单字节字符，则返回 EOF。</p>\n<p>下面是用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">wint_t wc <span class=\"token operator\">=</span> <span class=\"token function\">btowc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// 输出宽字符 B</span>\n<span class=\"token function\">wprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Wide character: %lc\\n\"</span><span class=\"token punctuation\">,</span> wc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token function\">wctob</span><span class=\"token punctuation\">(</span>wc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出单字节字符 B</span>\n<span class=\"token function\">wprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Single-byte character: %c\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"fwide\"><a href=\"#fwide\" class=\"headerlink\" title=\"fwide()\"></a>fwide()</h2><p><code>fwide()</code>用来设置一个字节流是宽字符流，还是多字节字符流。</p>\n<p>如果使用宽字符专用函数处理字节流，就会默认设置字节流为宽字符流，否则就需要使用<code>fwide()</code>显式设置。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fwide</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数，第一个参数是文件指针，第二个参数是字节流模式，有三种选择。</p>\n<ul>\n<li>0：字节流模式保持原样。</li>\n<li>-1（或其他负值）：设为多字节字符流。</li>\n<li>1（或其他正值）：设为宽字符流。</li>\n</ul>\n<p><code>fwide()</code>的返回值也分成三种情况：如果是宽字符流，返回一个正值；如果是多字节字符流，返回一个负值；如果是普通字符流，返回<code>0</code>。</p>\n<p>一旦设置了字节流模式，就无法再更改。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;wchar.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">wprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Hello world!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> mode <span class=\"token operator\">=</span> <span class=\"token function\">fwide</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">wprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Stream is %ls-oriented\\n\"</span><span class=\"token punctuation\">,</span> mode <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> L<span class=\"token string\">\"byte\"</span> <span class=\"token operator\">:</span> L<span class=\"token string\">\"wide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>wprintf()</code>将字节流隐式设为宽字符模式，所以<code>fwide(stdout, 0)</code>的返回值大于零。</p>\n<h2 id=\"宽字符专用函数\"><a href=\"#宽字符专用函数\" class=\"headerlink\" title=\"宽字符专用函数\"></a>宽字符专用函数</h2><p>下面这些函数基本都是 stdio.h 里面的字符处理函数的宽字符版本，必须使用这些函数来操作宽字符。</p>\n<ul>\n<li>fgetwc()    从宽字符流中获取宽字符，对应 fgetc()。</li>\n<li>fgetws()    从宽字符流中读取宽字符串，对应 fgets()。</li>\n<li>fputwc()    将宽字符写入宽字符流，对应 fputc()。</li>\n<li>fputws()    将宽字符串写入宽字符流，对应 fputs()。</li>\n<li>fwprintf()    格式化宽输出到宽字符流，对应 fprintf()。</li>\n<li>fwscanf()    来自宽字符流的格式化宽字符输入，对应 fscanf()。</li>\n<li>getwchar()    从 stdin 获取一个宽字符，对应 getchar()。</li>\n<li>getwc()    从 stdin 获取一个宽字符，对应 getc()。</li>\n<li>putwchar()    写一个宽字符到 stdout，对应 putchar()。</li>\n<li>putwc()    写一个宽字符到 stdout，对应 putc()。</li>\n<li>swprintf()    格式化宽输出到宽字符串，对应 sprintf()。</li>\n<li>swscanf()    来自宽字符串的格式化宽输入，对应 sscanf()。</li>\n<li>ungetwc()    将宽字符推回输入流，对应 ungetc()。</li>\n<li>vfwprintf()    可变参数的格式化宽字符输出到宽字符流，对应 vfprintf()。</li>\n<li>vfwscanf()    来自宽字符流的可变参数格式化宽字符输入，对应 vfscanf()。</li>\n<li>vswprintf()    可变参数的格式化宽字符输出到宽字符串，对应 vswprintf()。</li>\n<li>vswscanf()    来自宽字符串的可变参数格式化宽字符输入，对应 vsscanf()。</li>\n<li>vwprintf()    可变参数格式化宽字符输出，对应 vprintf()。</li>\n<li>vwscanf()    可变参数的格式化宽字符输入，对应 vscanf()。</li>\n<li>wcscat()    危险地连接宽字符串，对应 strcat()。</li>\n<li>wcschr()    在宽字符串中查找宽字符，对应 strchr()。</li>\n<li>wcscmp()    比较宽字符串，对应 strcmp()。</li>\n<li>wcscoll()    比较两个考虑语言环境的宽字符串，对应 strcoll()。</li>\n<li>wcscpy()    危险地复制宽字符串，对应 strcpy()。</li>\n<li>wcscspn()    不是从宽字符串前面开始计算字符，对应 strcspn()。</li>\n<li>wcsftime()    格式化的日期和时间输出，对应 strftime()。</li>\n<li>wcslen()    返回宽字符串的长度，对应 strlen()。</li>\n<li>wcsncat()    更安全地连接宽字符串，对应 strncat()。</li>\n<li>wcsncmp()    比较宽字符串，长度有限，对应 strncmp()。</li>\n<li>wcsncpy()    更安全地复制宽字符串，对应 strncpy()。</li>\n<li>wcspbrk()    在宽字符串中搜索一组宽字符中的一个，对应 strpbrk()。</li>\n<li>wcsrchr()    从末尾开始在宽字符串中查找宽字符，对应 strrchr()。</li>\n<li>wcsspn()    从宽字符串前面的集合中计算字符，对应 strspn()。</li>\n<li>wcsstr()    在另一个宽字符串中找到一个宽字符串，对应 strstr()。</li>\n<li>wcstod()    将宽字符串转换为 double，对应 strtod()。</li>\n<li>wcstof()    将宽字符串转换为 float，对应 strtof()。</li>\n<li>wcstok()    标记一个宽字符串，对应 strtok()。</li>\n<li>wcstold()    将宽字符串转换为 long double，对应 strtold()。</li>\n<li>wcstoll()    将宽字符串转换为 long long，对应 strtoll()。</li>\n<li>wcstol()    将宽字符串转换为 long，对应 strtol()。</li>\n<li>wcstoull()    将宽字符串转换为 unsigned long long，对应 strtoull()。</li>\n<li>wcstoul()    将宽字符串转换为 unsigned long，对应 strtoul()。</li>\n<li>wcsxfrm()    转换宽字符串以根据语言环境进行比较，对应 strxfrm()。</li>\n<li>wmemcmp()    比较内存中的宽字符，对应 memcmp()。</li>\n<li>wmemcpy()    复制宽字符内存，对应 memcpy()。</li>\n<li>wmemmove()    复制宽字符内存，可能重叠，对应 memmove()。</li>\n<li>wprintf()    格式化宽输出，对应 printf()。</li>\n<li>wscanf()    格式化宽输入，对应 scanf()。</li>\n</ul>\n<h2 id=\"多字节字符专用函数\"><a href=\"#多字节字符专用函数\" class=\"headerlink\" title=\"多字节字符专用函数\"></a>多字节字符专用函数</h2><p>wchar.h 也定义了一些多字节字符的专用函数。</p>\n<ul>\n<li>mbsinit() 判断 mbstate_t 是否处于初始转换状态。</li>\n<li>mbrlen()    给定转换状态时，计算多字节字符串的字节数，对应 mblen()。</li>\n<li>mbrtowc()    给定转换状态时，将多字节字符转换为宽字符，对应 mbtowc()。</li>\n<li>wctombr()    给定转换状态时，将宽字符转换为多字节字符，对应 wctomb()。</li>\n<li>mbsrtowcs()    给定转换状态时，将多字节字符串转换为宽字符串，对应 mbstowcs()。</li>\n<li>wcsrtombs() 给定转换状态时，将宽字符串转换为多字节字符串，对应 wcstombs()。</li>\n</ul>\n<h1 id=\"wctype-h\"><a href=\"#wctype-h\" class=\"headerlink\" title=\"wctype.h\"></a>wctype.h</h1><p>wctype.h 提供 ctype.h 里面函数的宽字符版本。</p>\n<h2 id=\"宽字符类型判断函数\"><a href=\"#宽字符类型判断函数\" class=\"headerlink\" title=\"宽字符类型判断函数\"></a>宽字符类型判断函数</h2><p>下面函数判断宽字符的类型。</p>\n<ul>\n<li>iswalnum()    测试宽字符是否为字母数字</li>\n<li>iswalpha()    测试宽字符是否为字母</li>\n<li>iswblank()    测试这是否是一个宽空白字符</li>\n<li>iswcntrl()    测试这是否是一个宽控制字符。</li>\n<li>iswdigit()    测试这个宽字符是否是数字</li>\n<li>iswgraph()    测试宽字符是否是可打印的非空格字符</li>\n<li>iswlower()    测试宽字符是否为小写</li>\n<li>iswprint()    测试宽字符是否可打印</li>\n<li>iswpunct()    测试宽字符是否为标点符号</li>\n<li>iswspace()    测试宽字符是否为空格</li>\n<li>iswupper()    测试宽字符是否为大写</li>\n<li>iswxdigit()    测试宽字符是否为十六进制数字</li>\n</ul>\n<h2 id=\"wctype-，iswctype\"><a href=\"#wctype-，iswctype\" class=\"headerlink\" title=\"wctype()，iswctype()\"></a>wctype()，iswctype()</h2><p><code>iswctype()</code>是上一节各种宽字符类型判断函数的通用版本，必须与<code>wctype()</code>配合使用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>wint_t wc<span class=\"token punctuation\">,</span> wctype_t desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>iswctype()</code>接受两个参数，第一个参数是一个需要判断类型的宽字符，第二个参数是宽字符类型描述，来自<code>wctype()</code>的返回值。</p>\n<p>如果宽字符属于指定类型，<code>iswctype()</code>返回一个非零值，否则返回零。</p>\n<p><code>wctype()</code>用来获取某个种类宽字符的类型描述。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">wctype_t <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>wctype()</code>的参数是一个给定的字符串，可用的值如下：alnum、alpha、blank、cntrl、digit、graph、lower、print、punct、space、upper、xdigit。</p>\n<p><code>wctype()</code>的返回值的类型为 wctype_t，通常是一个整数。如果参数是一个无效值，则返回<code>0</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"digit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 相当于</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">iswdigit</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例用来判断宽字符<code>c</code>是否为数值，相当于<code>iswdigit()</code>。</p>\n<p><code>iswctype()</code>的完整类型判断如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alnum\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 iswalnum(c)</span>\n<span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alpha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 iswalpha(c)</span>\n<span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blank\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 iswblank(c)</span>\n<span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cntrl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 iswcntrl(c)</span>\n<span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"digit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 iswdigit(c)</span>\n<span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"graph\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 iswgraph(c)</span>\n<span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lower\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 iswlower(c)</span>\n<span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"print\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 iswprint(c)</span>\n<span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"punct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 iswpunct(c)</span>\n<span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"space\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 iswspace(c)</span>\n<span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"upper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 iswupper(c)</span>\n<span class=\"token function\">iswctype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xdigit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 iswxdigit(c)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"大小写转换函数\"><a href=\"#大小写转换函数\" class=\"headerlink\" title=\"大小写转换函数\"></a>大小写转换函数</h2><p>wctype.h 提供以下宽字符大小写转换函数。</p>\n<ul>\n<li>towlower()    将大写宽字符转换为小写</li>\n<li>towupper()    将小写宽字符转换为大写</li>\n<li>towctrans()    宽字符大小写转换的通用函数</li>\n<li>wctrans()    大小写转换的辅助函数，配合 towctrans() 使用</li>\n</ul>\n<p>先看<code>towlower()</code>和<code>towupper()</code>的用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">towlower</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// b</span>\n<span class=\"token function\">towupper</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// E</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>towctrans()</code>和<code>wctrans()</code>的原型如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">wint_t <span class=\"token function\">towctrans</span><span class=\"token punctuation\">(</span>wint_t wc<span class=\"token punctuation\">,</span> wctrans_t desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwctrans_t <span class=\"token function\">wctrans</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面是它们的用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">towctrans</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctrans</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toupper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 towupper(c)</span>\n<span class=\"token function\">towctrans</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token function\">wctrans</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tolower\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 相当于 towlower(c)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n","categories":["Programming","C 语言"],"tags":["Programming","C 语言"]},{"title":"Bash 脚本教程","url":"/2021/10/12/Bash%20%E8%84%9A%E6%9C%AC%E6%95%99%E7%A8%8B/","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Bash 是 Unix 系统和 Linux 系统的一种 Shell（命令行环境），是目前绝大多数 Linux 发行版的默认 Shell。</p>\n<h2 id=\"Shell-的含义\"><a href=\"#Shell-的含义\" class=\"headerlink\" title=\"Shell 的含义\"></a>Shell 的含义</h2><p>学习 Bash，首先需要理解 Shell 是什么。Shell 这个单词的原意是“外壳”，跟 kernel（内核）相对应，比喻内核外面的一层，即用户跟内核交互的对话界面。</p>\n<p>具体来说，Shell 这个词有多种含义。</p>\n<p>首先，Shell 是一个程序，提供一个与用户对话的环境。这个环境只有一个命令提示符，让用户从键盘输入命令，所以又称为命令行环境（command line interface，简写为 CLI）。Shell 接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。本书中，除非特别指明，Shell 指的就是命令行环境。</p>\n<a id=\"more\"></a>\n<p>其次，Shell 是一个命令解释器，解释用户输入的命令。它支持变量、条件判断、循环操作等语法，所以用户可以用 Shell 命令写出各种小程序，又称为脚本（script）。这些脚本都通过 Shell 的解释执行，而不通过编译。</p>\n<p>最后，Shell 是一个工具箱，提供了各种小工具，供用户方便地使用操作系统的功能。</p>\n<h2 id=\"Shell-的种类\"><a href=\"#Shell-的种类\" class=\"headerlink\" title=\"Shell 的种类\"></a>Shell 的种类</h2><p>Shell 有很多种，只要能给用户提供命令行环境的程序，都可以看作是 Shell。</p>\n<p>历史上，主要的 Shell 有下面这些。</p>\n<ul>\n<li>Bourne Shell（sh）</li>\n<li>Bourne Again shell（bash）</li>\n<li>C Shell（csh）</li>\n<li>TENEX C Shell（tcsh）</li>\n<li>Korn shell（ksh）</li>\n<li>Z Shell（zsh）</li>\n<li>Friendly Interactive Shell（fish）</li>\n</ul>\n<p>Bash 是目前最常用的 Shell，除非特别指明，下文的 Shell 和 Bash 当作同义词使用，可以互换。</p>\n<p>下面的命令可以查看当前运行的 Shell。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span>\n/bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面的命令可以查看当前的 Linux 系统安装的所有 Shell。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> /etc/shells<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面两个命令中，<code>$</code>是命令行环境的提示符，用户只需要输入提示符后面的内容。</p>\n<p>Linux 允许每个用户使用不同的 Shell，用户的默认 Shell 一般都是 Bash，或者与 Bash 兼容。</p>\n<h2 id=\"命令行环境\"><a href=\"#命令行环境\" class=\"headerlink\" title=\"命令行环境\"></a>命令行环境</h2><h3 id=\"终端模拟器\"><a href=\"#终端模拟器\" class=\"headerlink\" title=\"终端模拟器\"></a>终端模拟器</h3><p>如果是不带有图形环境的 Linux 系统（比如专用于服务器的系统），启动后就直接是命令行环境。</p>\n<p>不过，现在大部分的 Linux 发行版，尤其是针对普通用户的发行版，都是图形环境。用户登录系统后，自动进入图形环境，需要自己启动终端模拟器，才能进入命令行环境。</p>\n<p>所谓“终端模拟器”（terminal emulator）就是一个模拟命令行窗口的程序，让用户在一个窗口中使用命令行环境，并且提供各种附加功能，比如调整颜色、字体大小、行距等等。</p>\n<p>不同 Linux 发行版（准确地说是不同的桌面环境）带有的终端程序是不一样的，比如 KDE 桌面环境的终端程序是 konsole，Gnome 桌面环境的终端程序是 gnome-terminal，用户也可以安装第三方的终端程序。所有终端程序，尽管名字不同，基本功能都是一样的，就是让用户可以进入命令行环境，使用 Shell。</p>\n<h3 id=\"命令行提示符\"><a href=\"#命令行提示符\" class=\"headerlink\" title=\"命令行提示符\"></a>命令行提示符</h3><p>进入命令行环境以后，用户会看到 Shell 的提示符。提示符往往是一串前缀，最后以一个美元符号<code>$</code>结尾，用户可以在这个符号后面输入各种命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>user@hostname<span class=\"token punctuation\">]</span> $<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，完整的提示符是<code>[user@hostname] $</code>，其中前缀是用户名（<code>user</code>）加上<code>@</code>，再加主机名（<code>hostname</code>）。比如，用户名是<code>bill</code>，主机名是<code>home-machine</code>，前缀就是<code>bill@home-machine</code>。</p>\n<p>注意，根用户（root）的提示符，不以美元符号（<code>$</code>）结尾，而以井号（<code>#</code>）结尾，用来提醒用户，现在具有根权限，可以执行各种操作，务必小心，不要出现误操作。这个符号是可以自己定义的，详见《命令提示符》一章。</p>\n<p>为了简洁，后文的命令行提示符都只使用<code>$</code>表示。</p>\n<h3 id=\"进入和退出方法\"><a href=\"#进入和退出方法\" class=\"headerlink\" title=\"进入和退出方法\"></a>进入和退出方法</h3><p>进入命令行环境以后，一般就已经打开 Bash 了。如果你的 Shell 不是 Bash，可以输入<code>bash</code>命令启动 Bash。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>退出 Bash 环境，可以使用<code>exit</code>命令，也可以同时按下<code>Ctrl + d</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">exit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Bash 的基本用法就是在命令行输入各种命令，非常直观。作为练习，可以试着输入<code>pwd</code>命令。按下回车键，就会显示当前所在的目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">pwd</span>\n/home/me<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果不小心输入了<code>pwe</code>，会返回一个提示，表示输入出错，没有对应的可执行程序。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ pwe\nbash: pwe：未找到命令<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"Shell-和-Bash-的历史\"><a href=\"#Shell-和-Bash-的历史\" class=\"headerlink\" title=\"Shell 和 Bash 的历史\"></a>Shell 和 Bash 的历史</h2><p>Shell 伴随着 Unix 系统的诞生而诞生。</p>\n<p>1969年，Ken Thompson 和 Dennis Ritchie 开发了第一版的 Unix。</p>\n<p>1971年，Ken Thompson 编写了最初的 Shell，称为 Thompson shell，程序名是<code>sh</code>，方便用户使用 Unix。</p>\n<p>1973年至1975年间，John R. Mashey 扩展了最初的 Thompson shell，添加了编程功能，使得 Shell 成为一种编程语言。这个版本的 Shell 称为 Mashey shell。</p>\n<p>1976年，Stephen Bourne 结合 Mashey shell 的功能，重写一个新的 Shell，称为 Bourne shell。</p>\n<p>1978年，加州大学伯克利分校的 Bill Joy 开发了 C shell，为 Shell 提供 C 语言的语法，程序名是<code>csh</code>。它是第一个真正替代<code>sh</code>的 UNIX shell，被合并到 Berkeley UNIX 的 2BSD 版本中。</p>\n<p>1979年，UNIX 第七版发布，内置了 Bourne Shell，导致它成为 Unix 的默认 Shell。注意，Thompson shell、Mashey shell 和 Bourne shell 都是贝尔实验室的产品，程序名都是<code>sh</code>。对于用户来说，它们是同一个东西，只是底层代码不同而已。</p>\n<p>1983年，David Korn 开发了Korn shell，程序名是<code>ksh</code>。</p>\n<p>1985年，Richard Stallman 成立了自由软件基金会（FSF），由于 Shell 的版权属于贝尔公司，所以他决定写一个自由版权的、使用 GNU 许可证的 Shell 程序，避免 Unix 的版权争议。</p>\n<p>1988年，自由软件基金会的第一个付薪程序员 Brian Fox 写了一个 Shell，功能基本上是 Bourne shell 的克隆，叫做 Bourne-Again SHell，简称 Bash，程序名为<code>bash</code>，任何人都可以免费使用。后来，它逐渐成为 Linux 系统的标准 Shell。</p>\n<p>1989年，Bash 发布1.0版。</p>\n<p>1996年，Bash 发布2.0版。</p>\n<p>2004年，Bash 发布3.0版。</p>\n<p>2009年，Bash 发布4.0版。</p>\n<p>2019年，Bash 发布5.0版。</p>\n<p>用户可以通过<code>bash</code>命令的<code>--version</code>参数或者环境变量<code>$BASH_VERSION</code>，查看本机的 Bash 版本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> --version\nGNU bash，版本 <span class=\"token number\">5.0</span>.3<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>-release <span class=\"token punctuation\">(</span>x86_64-pc-linux-gnu<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$BASH_VERSION</span>\n<span class=\"token number\">5.0</span>.3<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>-release<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><p>本章介绍 Bash 的最基本语法。</p>\n<h2 id=\"echo-命令\"><a href=\"#echo-命令\" class=\"headerlink\" title=\"echo 命令\"></a>echo 命令</h2><p>由于后面的例子会大量用到<code>echo</code>命令，这里先介绍这个命令。</p>\n<p><code>echo</code>命令的作用是在屏幕输出一行文本，可以将该命令的参数原样输出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> hello world\nhello world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>echo</code>的参数是<code>hello world</code>，可以原样输出。</p>\n<p>如果想要输出的是多行文本，即包括换行符。这时就需要把多行文本放在引号里面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"&lt;HTML>\n    &lt;HEAD>\n          &lt;TITLE>Page Title&lt;/TITLE>\n    &lt;/HEAD>\n    &lt;BODY>\n          Page body.\n    &lt;/BODY>\n&lt;/HTML>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>echo</code>可以原样输出多行文本。</p>\n<h3 id=\"n参数\"><a href=\"#n参数\" class=\"headerlink\" title=\"-n参数\"></a><code>-n</code>参数</h3><p>默认情况下，<code>echo</code>输出的文本末尾会有一个回车符。<code>-n</code>参数可以取消末尾的回车符，使得下一个提示符紧跟在输出内容的后面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> -n hello world\nhello world$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>world</code>后面直接就是下一行的提示符<code>$</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> a<span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">echo</span> b\na\nb\n\n$ <span class=\"token builtin class-name\">echo</span> -n a<span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">echo</span> b\nab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>-n</code>参数可以让两个<code>echo</code>命令的输出连在一起，出现在同一行。</p>\n<h3 id=\"e参数\"><a href=\"#e参数\" class=\"headerlink\" title=\"-e参数\"></a><code>-e</code>参数</h3><p><code>-e</code>参数会解释引号（双引号和单引号）里面的特殊字符（比如换行符<code>\\n</code>）。如果不使用<code>-e</code>参数，即默认情况下，引号会让特殊字符变成普通字符，<code>echo</code>不解释它们，原样输出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello<span class=\"token entity\" title=\"\\n\">\\n</span>World\"</span>\nHello<span class=\"token punctuation\">\\</span>nWorld\n\n<span class=\"token comment\"># 双引号的情况</span>\n$ <span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"Hello<span class=\"token entity\" title=\"\\n\">\\n</span>World\"</span>\nHello\nWorld\n\n<span class=\"token comment\"># 单引号的情况</span>\n$ <span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">'Hello<span class=\"token entity\" title=\"\\n\">\\n</span>World'</span>\nHello\nWorld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>-e</code>参数使得<code>\\n</code>解释为换行符，导致输出内容里面出现换行。</p>\n<h2 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h2><p>命令行环境中，主要通过使用 Shell 命令，进行各种操作。Shell 命令基本都是下面的格式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">command</span> <span class=\"token punctuation\">[</span> arg1 <span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span> argN <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，<code>command</code>是具体的命令或者一个可执行文件，<code>arg1 ... argN</code>是传递给命令的参数，它们是可选的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面这个命令中，<code>ls</code>是命令，<code>-l</code>是参数。</p>\n<p>有些参数是命令的配置项，这些配置项一般都以一个连词线开头，比如上面的<code>-l</code>。同一个配置项往往有长和短两种形式，比如<code>-l</code>是短形式，<code>--list</code>是长形式，它们的作用完全相同。短形式便于手动输入，长形式一般用在脚本之中，可读性更好，利于解释自身的含义。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 短形式</span>\n$ <span class=\"token function\">ls</span> -r\n\n<span class=\"token comment\"># 长形式</span>\n$ <span class=\"token function\">ls</span> --reverse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令中，<code>-r</code>是短形式，<code>--reverse</code>是长形式，作用完全一样。前者便于输入，后者便于理解。</p>\n<p>Bash 单个命令一般都是一行，用户按下回车键，就开始执行。有些命令比较长，写成多行会有利于阅读和编辑，这时可以在每一行的结尾加上反斜杠，Bash 就会将下一行跟当前行放在一起解释。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> foo bar\n\n<span class=\"token comment\"># 等同于</span>\n$ <span class=\"token builtin class-name\">echo</span> foo <span class=\"token punctuation\">\\</span>\nbar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h2><p>Bash 使用空格（或 Tab 键）区分不同的参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">command</span> foo bar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>foo</code>和<code>bar</code>之间有一个空格，所以 Bash 认为它们是两个参数。</p>\n<p>如果参数之间有多个空格，Bash 会自动忽略多余的空格。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> this is a     <span class=\"token builtin class-name\">test</span>\nthis is a <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面命令中，<code>a</code>和<code>test</code>之间有多个空格，Bash 会忽略多余的空格。</p>\n<h2 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h2><p>分号（<code>;</code>）是命令的结束符，使得一行可以放置多个命令，上一个命令执行结束后，再执行第二个命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">clear</span><span class=\"token punctuation\">;</span> <span class=\"token function\">ls</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，Bash 先执行<code>clear</code>命令，执行完成后，再执行<code>ls</code>命令。</p>\n<p>注意，使用分号时，第二个命令总是接着第一个命令执行，不管第一个命令执行成功或失败。</p>\n<h2 id=\"命令的组合符-amp-amp-和\"><a href=\"#命令的组合符-amp-amp-和\" class=\"headerlink\" title=\"命令的组合符&amp;&amp;和||\"></a>命令的组合符<code>&amp;&amp;</code>和<code>||</code></h2><p>除了分号，Bash 还提供两个命令组合符<code>&amp;&amp;</code>和<code>||</code>，允许更好地控制多个命令之间的继发关系。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Command1 <span class=\"token operator\">&amp;&amp;</span> Command2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令的意思是，如果<code>Command1</code>命令运行成功，则继续运行<code>Command2</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Command1 <span class=\"token operator\">||</span> Command2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令的意思是，如果<code>Command1</code>命令运行失败，则继续运行<code>Command2</code>命令。</p>\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> filelist.txt <span class=\"token punctuation\">;</span> <span class=\"token function\">ls</span> -l filelist.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，只要<code>cat</code>命令执行结束，不管成功或失败，都会继续执行<code>ls</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> filelist.txt <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">ls</span> -l filelist.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，只有<code>cat</code>命令执行成功，才会继续执行<code>ls</code>命令。如果<code>cat</code>执行失败（比如不存在文件<code>flielist.txt</code>），那么<code>ls</code>命令就不会执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> foo <span class=\"token operator\">||</span> <span class=\"token function\">mkdir</span> bar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，只有<code>mkdir foo</code>命令执行失败（比如<code>foo</code>目录已经存在），才会继续执行<code>mkdir bar</code>命令。如果<code>mkdir foo</code>命令执行成功，就不会创建<code>bar</code>目录了。</p>\n<h2 id=\"type-命令\"><a href=\"#type-命令\" class=\"headerlink\" title=\"type 命令\"></a>type 命令</h2><p>Bash 本身内置了很多命令，同时也可以执行外部程序。怎么知道一个命令是内置命令，还是外部程序呢？</p>\n<p><code>type</code>命令用来判断命令的来源。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">type</span> <span class=\"token builtin class-name\">echo</span>\n<span class=\"token builtin class-name\">echo</span> is a shell <span class=\"token builtin class-name\">builtin</span>\n$ <span class=\"token builtin class-name\">type</span> <span class=\"token function\">ls</span>\n<span class=\"token function\">ls</span> is hashed <span class=\"token punctuation\">(</span>/bin/ls<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>type</code>命令告诉我们，<code>echo</code>是内部命令，<code>ls</code>是外部程序（<code>/bin/ls</code>）。</p>\n<p><code>type</code>命令本身也是内置命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">type</span> <span class=\"token builtin class-name\">type</span>\n<span class=\"token builtin class-name\">type</span> is a shell <span class=\"token builtin class-name\">builtin</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果要查看一个命令的所有定义，可以使用<code>type</code>命令的<code>-a</code>参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">type</span> -a <span class=\"token builtin class-name\">echo</span>\n<span class=\"token builtin class-name\">echo</span> is shell <span class=\"token builtin class-name\">builtin</span>\n<span class=\"token builtin class-name\">echo</span> is /usr/bin/echo\n<span class=\"token builtin class-name\">echo</span> is /bin/echo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码表示，<code>echo</code>命令既是内置命令，也有对应的外部程序。</p>\n<p><code>type</code>命令的<code>-t</code>参数，可以返回一个命令的类型：别名（alias），关键词（keyword），函数（function），内置命令（builtin）和文件（file）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">type</span> -t <span class=\"token function\">bash</span>\n<span class=\"token function\">file</span>\n$ <span class=\"token builtin class-name\">type</span> -t <span class=\"token keyword\">if</span>\nkeyword<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>bash</code>是文件，<code>if</code>是关键词。</p>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><p>Bash 提供很多快捷键，可以大大方便操作。下面是一些最常用的快捷键，完整的介绍参见《行操作》一章。</p>\n<ul>\n<li><code>Ctrl + L</code>：清除屏幕并将当前行移到页面顶部。</li>\n<li><code>Ctrl + C</code>：中止当前正在执行的命令。</li>\n<li><code>Shift + PageUp</code>：向上滚动。</li>\n<li><code>Shift + PageDown</code>：向下滚动。</li>\n<li><code>Ctrl + U</code>：从光标位置删除到行首。</li>\n<li><code>Ctrl + K</code>：从光标位置删除到行尾。</li>\n<li><code>Ctrl + D</code>：关闭 Shell 会话。</li>\n<li><code>↑</code>，<code>↓</code>：浏览已执行命令的历史记录。</li>\n</ul>\n<p>除了上面的快捷键，Bash 还具有自动补全功能。命令输入到一半的时候，可以按下 Tab 键，Bash 会自动完成剩下的部分。比如，输入<code>pw</code>，然后按一下 Tab 键，Bash 会自动补上<code>d</code>。</p>\n<p>除了命令的自动补全，Bash 还支持路径的自动补全。有时，需要输入很长的路径，这时只需要输入前面的部分，然后按下 Tab 键，就会自动补全后面的部分。如果有多个可能的选择，按两次 Tab 键，Bash 会显示所有选项，让你选择。</p>\n<h1 id=\"模式扩展\"><a href=\"#模式扩展\" class=\"headerlink\" title=\"模式扩展\"></a>模式扩展</h1><h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Shell 接收到用户输入的命令以后，会根据空格将用户的输入，拆分成一个个词元（token）。然后，Shell 会扩展词元里面的特殊字符，扩展完成后才会调用相应的命令。</p>\n<p>这种特殊字符的扩展，称为模式扩展（globbing）。其中有些用到通配符，又称为通配符扩展（wildcard expansion）。Bash 一共提供八种扩展。</p>\n<ul>\n<li>波浪线扩展</li>\n<li><code>?</code> 字符扩展</li>\n<li><code>*</code> 字符扩展</li>\n<li>方括号扩展</li>\n<li>大括号扩展</li>\n<li>变量扩展</li>\n<li>子命令扩展</li>\n<li>算术扩展</li>\n</ul>\n<p>本章介绍这八种扩展。</p>\n<p>Bash 是先进行扩展，再执行命令。因此，扩展的结果是由 Bash 负责的，与所要执行的命令无关。命令本身并不存在参数扩展，收到什么参数就原样执行。这一点务必需要记住。</p>\n<p>模块扩展的英文单词是<code>globbing</code>，这个词来自于早期的 Unix 系统有一个<code>/etc/glob</code>文件，保存扩展的模板。后来 Bash 内置了这个功能，但是这个名字就保留了下来。</p>\n<p>模式扩展与正则表达式的关系是，模式扩展早于正则表达式出现，可以看作是原始的正则表达式。它的功能没有正则那么强大灵活，但是优点是简单和方便。</p>\n<p>Bash 允许用户关闭扩展。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">set</span> -o noglob\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token builtin class-name\">set</span> -f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>下面的命令可以重新打开扩展。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">set</span> +o noglob\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token builtin class-name\">set</span> +f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"波浪线扩展\"><a href=\"#波浪线扩展\" class=\"headerlink\" title=\"波浪线扩展\"></a>波浪线扩展</h2><p>波浪线<code>~</code>会自动扩展成当前用户的主目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> ~\n/home/me<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>~/dir</code>表示扩展成主目录的某个子目录，<code>dir</code>是主目录里面的一个子目录名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 进入 /home/me/foo 目录</span>\n$ <span class=\"token builtin class-name\">cd</span> ~/foo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>~user</code>表示扩展成用户<code>user</code>的主目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> ~foo\n/home/foo\n\n$ <span class=\"token builtin class-name\">echo</span> ~root\n/root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，Bash 会根据波浪号后面的用户名，返回该用户的主目录。</p>\n<p>如果<code>~user</code>的<code>user</code>是不存在的用户名，则波浪号扩展不起作用。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> ~nonExistedUser\n~nonExistedUser<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>~+</code>会扩展成当前所在的目录，等同于<code>pwd</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> ~/foo\n$ <span class=\"token builtin class-name\">echo</span> ~+\n/home/me/foo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符扩展\"><a href=\"#字符扩展\" class=\"headerlink\" title=\"? 字符扩展\"></a><code>?</code> 字符扩展</h2><p><code>?</code>字符代表文件路径里面的任意单个字符，不包括空字符。比如，<code>Data???</code>匹配所有<code>Data</code>后面跟着三个字符的文件名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 存在文件 a.txt 和 b.txt</span>\n$ <span class=\"token function\">ls</span> ?.txt\na.txt b.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令中，<code>?</code>表示单个字符，所以会同时匹配<code>a.txt</code>和<code>b.txt</code>。</p>\n<p>如果匹配多个字符，就需要多个<code>?</code>连用。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 存在文件 a.txt、b.txt 和 ab.txt</span>\n$ <span class=\"token function\">ls</span> ??.txt\nab.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令中，<code>??</code>匹配了两个字符。</p>\n<p><code>?</code> 字符扩展属于文件名扩展，只有文件确实存在的前提下，才会发生扩展。如果文件不存在，扩展就不会发生。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 当前目录有 a.txt 文件</span>\n$ <span class=\"token builtin class-name\">echo</span> ?.txt\na.txt\n\n<span class=\"token comment\"># 当前目录为空目录</span>\n$ <span class=\"token builtin class-name\">echo</span> ?.txt\n?.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，如果<code>?.txt</code>可以扩展成文件名，<code>echo</code>命令会输出扩展后的结果；如果不能扩展成文件名，<code>echo</code>就会原样输出<code>?.txt</code>。</p>\n<h2 id=\"字符扩展-1\"><a href=\"#字符扩展-1\" class=\"headerlink\" title=\"* 字符扩展\"></a><code>*</code> 字符扩展</h2><p><code>*</code>字符代表文件路径里面的任意数量的任意字符，包括零个字符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 存在文件 a.txt、b.txt 和 ab.txt</span>\n$ <span class=\"token function\">ls</span> *.txt\na.txt b.txt ab.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>*.txt</code>代表后缀名为<code>.txt</code>的所有文件。</p>\n<p>如果想输出当前目录的所有文件，直接用<code>*</code>即可。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> *<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>*</code>可以匹配空字符，下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 存在文件 a.txt、b.txt 和 ab.txt</span>\n$ <span class=\"token function\">ls</span> a*.txt\na.txt ab.txt\n\n$ <span class=\"token function\">ls</span> *b*\nb.txt ab.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，<code>*</code>不会匹配隐藏文件（以<code>.</code>开头的文件），即<code>ls *</code>不会输出隐藏文件。</p>\n<p>如果要匹配隐藏文件，需要写成<code>.*</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 显示所有隐藏文件</span>\n$ <span class=\"token builtin class-name\">echo</span> .*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果要匹配隐藏文件，同时要排除<code>.</code>和<code>..</code>这两个特殊的隐藏文件，可以与方括号扩展结合使用，写成<code>.[!.]*</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> .<span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>.<span class=\"token punctuation\">]</span>*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意，<code>*</code>字符扩展属于文件名扩展，只有文件确实存在的前提下才会扩展。如果文件不存在，就会原样输出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 当前目录不存在 c 开头的文件</span>\n$ <span class=\"token builtin class-name\">echo</span> c*.txt\nc*.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，当前目录里面没有<code>c</code>开头的文件，导致<code>c*.txt</code>会原样输出。</p>\n<p><code>*</code>只匹配当前目录，不会匹配子目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 子目录有一个 a.txt</span>\n<span class=\"token comment\"># 无效的写法</span>\n$ <span class=\"token function\">ls</span> *.txt\n\n<span class=\"token comment\"># 有效的写法</span>\n$ <span class=\"token function\">ls</span> */*.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子，文本文件在子目录，<code>*.txt</code>不会产生匹配，必须写成<code>*/*.txt</code>。有几层子目录，就必须写几层星号。</p>\n<p>Bash 4.0 引入了一个参数<code>globstar</code>，当该参数打开时，允许<code>**</code>匹配零个或多个子目录。因此，<code>**/*.txt</code>可以匹配顶层的文本文件和任意深度子目录的文本文件。详细介绍请看后面<code>shopt</code>命令的介绍。</p>\n<h2 id=\"方括号扩展\"><a href=\"#方括号扩展\" class=\"headerlink\" title=\"方括号扩展\"></a>方括号扩展</h2><p>方括号扩展的形式是<code>[...]</code>，只有文件确实存在的前提下才会扩展。如果文件不存在，就会原样输出。括号之中的任意一个字符。比如，<code>[aeiou]</code>可以匹配五个元音字母中的任意一个。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 存在文件 a.txt 和 b.txt</span>\n$ <span class=\"token function\">ls</span> <span class=\"token punctuation\">[</span>ab<span class=\"token punctuation\">]</span>.txt\na.txt b.txt\n\n<span class=\"token comment\"># 只存在文件 a.txt</span>\n$ <span class=\"token function\">ls</span> <span class=\"token punctuation\">[</span>ab<span class=\"token punctuation\">]</span>.txt\na.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>[ab]</code>可以匹配<code>a</code>或<code>b</code>，前提是确实存在相应的文件。</p>\n<p>方括号扩展属于文件名匹配，即扩展后的结果必须符合现有的文件路径。如果不存在匹配，就会保持原样，不进行扩展。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 不存在文件 a.txt 和 b.txt</span>\n$ <span class=\"token function\">ls</span> <span class=\"token punctuation\">[</span>ab<span class=\"token punctuation\">]</span>.txt\nls: 无法访问<span class=\"token string\">'[ab].txt'</span><span class=\"token builtin class-name\">:</span> 没有那个文件或目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，由于扩展后的文件不存在，<code>[ab].txt</code>就原样输出了，导致<code>ls</code>命名报错。</p>\n<p>方括号扩展还有两种变体：<code>[^...]</code>和<code>[!...]</code>。它们表示匹配不在方括号里面的字符，这两种写法是等价的。比如，<code>[^abc]</code>或<code>[!abc]</code>表示匹配除了<code>a</code>、<code>b</code>、<code>c</code>以外的字符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 存在 aaa、bbb、aba 三个文件</span>\n$ <span class=\"token function\">ls</span> ?<span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>a<span class=\"token punctuation\">]</span>?\naba bbb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令中，<code>[!a]</code>表示文件名第二个字符不是<code>a</code>的文件名，所以返回了<code>aba</code>和<code>bbb</code>两个文件。</p>\n<p>注意，如果需要匹配<code>[</code>字符，可以放在方括号内，比如<code>[[aeiou]</code>。如果需要匹配连字号<code>-</code>，只能放在方括号内部的开头或结尾，比如<code>[-aeiou]</code>或<code>[aeiou-]</code>。</p>\n<h2 id=\"start-end-扩展\"><a href=\"#start-end-扩展\" class=\"headerlink\" title=\"[start-end] 扩展\"></a>[start-end] 扩展</h2><p>方括号扩展有一个简写形式<code>[start-end]</code>，表示匹配一个连续的范围。比如，<code>[a-c]</code>等同于<code>[abc]</code>，<code>[0-9]</code>匹配<code>[0123456789]</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 存在文件 a.txt、b.txt 和 c.txt</span>\n$ <span class=\"token function\">ls</span> <span class=\"token punctuation\">[</span>a-c<span class=\"token punctuation\">]</span>.txt\na.txt\nb.txt\nc.txt\n\n<span class=\"token comment\"># 存在文件 report1.txt、report2.txt 和 report3.txt</span>\n$ <span class=\"token function\">ls</span> report<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span>.txt\nreport1.txt\nreport2.txt\nreport3.txt\n<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是一些常用简写的例子。</p>\n<ul>\n<li><code>[a-z]</code>：所有小写字母。</li>\n<li><code>[a-zA-Z]</code>：所有小写字母与大写字母。</li>\n<li><code>[a-zA-Z0-9]</code>：所有小写字母、大写字母与数字。</li>\n<li><code>[abc]*</code>：所有以<code>a</code>、<code>b</code>、<code>c</code>字符之一开头的文件名。</li>\n<li><code>program.[co]</code>：文件<code>program.c</code>与文件<code>program.o</code>。</li>\n<li><code>BACKUP.[0-9][0-9][0-9]</code>：所有以<code>BACKUP.</code>开头，后面是三个数字的文件名。</li>\n</ul>\n<p>这种简写形式有一个否定形式<code>[!start-end]</code>，表示匹配不属于这个范围的字符。比如，<code>[!a-zA-Z]</code>表示匹配非英文字母的字符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> report<span class=\"token punctuation\">[</span><span class=\"token operator\">!</span><span class=\"token number\">1</span>–3<span class=\"token punctuation\">]</span>.txt\nreport4.txt report5.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>[!1-3]</code>表示排除1、2和3。</p>\n<h2 id=\"大括号扩展\"><a href=\"#大括号扩展\" class=\"headerlink\" title=\"大括号扩展\"></a>大括号扩展</h2><p>大括号扩展<code>&#123;...&#125;</code>表示分别扩展成大括号里面的所有值，各个值之间使用逗号分隔。比如，<code>&#123;1,2,3&#125;</code>扩展成<code>1 2 3</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1,2</span>,3<span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span>\n\n$ <span class=\"token builtin class-name\">echo</span> d<span class=\"token punctuation\">&#123;</span>a,e,i,u,o<span class=\"token punctuation\">&#125;</span>g\ndag deg <span class=\"token function\">dig</span> dug dog\n\n$ <span class=\"token builtin class-name\">echo</span> Front-<span class=\"token punctuation\">&#123;</span>A,B,C<span class=\"token punctuation\">&#125;</span>-Back\nFront-A-Back Front-B-Back Front-C-Back<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，大括号扩展不是文件名扩展。它会扩展成所有给定的值，而不管是否有对应的文件存在。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> <span class=\"token punctuation\">&#123;</span>a,b,c<span class=\"token punctuation\">&#125;</span>.txt\nls: 无法访问<span class=\"token string\">'a.txt'</span><span class=\"token builtin class-name\">:</span> 没有那个文件或目录\nls: 无法访问<span class=\"token string\">'b.txt'</span><span class=\"token builtin class-name\">:</span> 没有那个文件或目录\nls: 无法访问<span class=\"token string\">'c.txt'</span><span class=\"token builtin class-name\">:</span> 没有那个文件或目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，即使不存在对应的文件，<code>&#123;a,b,c&#125;</code>依然扩展成三个文件名，导致<code>ls</code>命令报了三个错误。</p>\n<p>另一个需要注意的地方是，大括号内部的逗号前后不能有空格。否则，大括号扩展会失效。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span> , <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span> , <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，逗号前后有空格，Bash 就会认为这不是大括号扩展，而是三个独立的参数。</p>\n<p>逗号前面可以没有值，表示扩展的第一项为空。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cp</span> a.log<span class=\"token punctuation\">&#123;</span>,.bak<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 等同于</span>\n<span class=\"token comment\"># cp a.log a.log.bak</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>大括号可以嵌套。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span>j<span class=\"token punctuation\">&#123;</span>p,pe<span class=\"token punctuation\">&#125;</span>g,png<span class=\"token punctuation\">&#125;</span>\njpg jpeg png\n\n$ <span class=\"token builtin class-name\">echo</span> a<span class=\"token punctuation\">&#123;</span>A<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1,2</span><span class=\"token punctuation\">&#125;</span>,B<span class=\"token punctuation\">&#123;</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>b\naA1b aA2b aB3b aB4b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>大括号也可以与其他模式联用，并且总是先于其他模式进行扩展。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> /bin/<span class=\"token punctuation\">&#123;</span>cat,b*<span class=\"token punctuation\">&#125;</span>\n/bin/cat /bin/b2sum /bin/base32 /bin/base64 <span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">..</span>.\n\n<span class=\"token comment\"># 基本等同于</span>\n$ <span class=\"token builtin class-name\">echo</span> /bin/cat<span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">echo</span> /bin/b*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，会先进行大括号扩展，然后进行<code>*</code>扩展，等同于执行两条<code>echo</code>命令。</p>\n<p>大括号可以用于多字符的模式，方括号不行（只能匹配单字符）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span>cat,dog<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">cat</span> dog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>由于大括号扩展<code>&#123;...&#125;</code>不是文件名扩展，所以它总是会扩展的。这与方括号扩展<code>[...]</code>完全不同，如果匹配的文件不存在，方括号就不会扩展。这一点要注意区分。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 不存在 a.txt 和 b.txt</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">[</span>ab<span class=\"token punctuation\">]</span>.txt\n<span class=\"token punctuation\">[</span>ab<span class=\"token punctuation\">]</span>.txt\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span>a,b<span class=\"token punctuation\">&#125;</span>.txt\na.txt b.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，如果不存在<code>a.txt</code>和<code>b.txt</code>，那么<code>[ab].txt</code>就会变成一个普通的文件名，而<code>&#123;a,b&#125;.txt</code>可以照样扩展。</p>\n<h2 id=\"start-end-扩展-1\"><a href=\"#start-end-扩展-1\" class=\"headerlink\" title=\"{start..end} 扩展\"></a>{start..end} 扩展</h2><p>大括号扩展有一个简写形式<code>&#123;start..end&#125;</code>，表示扩展成一个连续序列。比如，<code>&#123;a..z&#125;</code>可以扩展成26个小写英文字母。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">..</span>c<span class=\"token punctuation\">&#125;</span>\na b c\n\n$ <span class=\"token builtin class-name\">echo</span> d<span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">..</span>d<span class=\"token punctuation\">&#125;</span>g\ndag dbg dcg ddg\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span>\n\n$ <span class=\"token builtin class-name\">echo</span> Number_<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\nNumber_1 Number_2 Number_3 Number_4 Number_5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这种简写形式支持逆序。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span>c<span class=\"token punctuation\">..</span>a<span class=\"token punctuation\">&#125;</span>\nc b a\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">..</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">5</span> <span class=\"token number\">4</span> <span class=\"token number\">3</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，如果遇到无法理解的简写，大括号模式就会原样输出，不会扩展。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span>a1<span class=\"token punctuation\">..</span>3c<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#123;</span>a1<span class=\"token punctuation\">..</span>3c<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这种简写形式可以嵌套使用，形成复杂的扩展。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> .<span class=\"token punctuation\">&#123;</span>mp<span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">..</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span>,m4<span class=\"token punctuation\">&#123;</span>a,b,p,v<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n.mp3 .mp4 .m4a .m4b .m4p .m4v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>大括号扩展的常见用途为新建一系列目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2007</span><span class=\"token punctuation\">..</span><span class=\"token number\">2009</span><span class=\"token punctuation\">&#125;</span>-<span class=\"token punctuation\">&#123;</span>01<span class=\"token punctuation\">..</span><span class=\"token number\">12</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令会新建36个子目录，每个子目录的名字都是”年份-月份“。</p>\n<p>这个写法的另一个常见用途，是直接用于<code>for</code>循环。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子会循环4次。</p>\n<p>如果整数前面有前导<code>0</code>，扩展输出的每一项都有前导<code>0</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span>01<span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\n01 02 03 04 05\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span>001<span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\n001 002 003 004 005<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这种简写形式还可以使用第二个双点号（<code>start..end..step</code>），用来指定扩展的步长。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">8</span><span class=\"token punctuation\">..</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">0</span> <span class=\"token number\">2</span> <span class=\"token number\">4</span> <span class=\"token number\">6</span> <span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码将<code>0</code>扩展到<code>8</code>，每次递增的长度为<code>2</code>，所以一共输出5个数字。</p>\n<p>多个简写形式连用，会有循环处理的效果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">..</span>c<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>\na1 a2 a3 b1 b2 b3 c1 c2 c3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"变量扩展\"><a href=\"#变量扩展\" class=\"headerlink\" title=\"变量扩展\"></a>变量扩展</h2><p>Bash 将美元符号<code>$</code>开头的词元视为变量，将其扩展成变量值，详见《Bash 变量》一章。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span>\n/bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>变量名除了放在美元符号后面，也可以放在<code>$&#123;&#125;</code>里面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token environment constant\">SHELL</span>&#125;</span>\n/bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>$&#123;!string*&#125;</code>或<code>$&#123;!string@&#125;</code>返回所有匹配给定字符串<code>string</code>的变量名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">!</span>S*&#125;</span>\n<span class=\"token environment constant\">SECONDS</span> <span class=\"token environment constant\">SHELL</span> <span class=\"token environment constant\">SHELLOPTS</span> <span class=\"token environment constant\">SHLVL</span> SSH_AGENT_PID <span class=\"token environment constant\">SSH_AUTH_SOCK</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>$&#123;!S*&#125;</code>扩展成所有以<code>S</code>开头的变量名。</p>\n<h2 id=\"子命令扩展\"><a href=\"#子命令扩展\" class=\"headerlink\" title=\"子命令扩展\"></a>子命令扩展</h2><p><code>$(...)</code>可以扩展成另一个命令的运行结果，该命令的所有输出都会作为返回值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span><span class=\"token variable\">)</span></span>\nTue Jan <span class=\"token number\">28</span> 00:01:13 CST <span class=\"token number\">2020</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>$(date)</code>返回<code>date</code>命令的运行结果。</p>\n<p>还有另一种较老的语法，子命令放在反引号之中，也可以扩展成命令的运行结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span><span class=\"token variable\">`</span></span>\nTue Jan <span class=\"token number\">28</span> 00:01:13 CST <span class=\"token number\">2020</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>$(...)</code>可以嵌套，比如<code>$(ls $(pwd))</code>。</p>\n<h2 id=\"算术扩展\"><a href=\"#算术扩展\" class=\"headerlink\" title=\"算术扩展\"></a>算术扩展</h2><p><code>$((...))</code>可以扩展成整数运算的结果，详见《Bash 的算术运算》一章。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h2><p><code>[[:class:]]</code>表示一个字符类，扩展成某一类特定字符之中的一个。常用的字符类如下。</p>\n<ul>\n<li><code>[[:alnum:]]</code>：匹配任意英文字母与数字</li>\n<li><code>[[:alpha:]]</code>：匹配任意英文字母</li>\n<li><code>[[:blank:]]</code>：空格和 Tab 键。</li>\n<li><code>[[:cntrl:]]</code>：ASCII 码 0-31 的不可打印字符。</li>\n<li><code>[[:digit:]]</code>：匹配任意数字 0-9。</li>\n<li><code>[[:graph:]]</code>：A-Z、a-z、0-9 和标点符号。</li>\n<li><code>[[:lower:]]</code>：匹配任意小写字母 a-z。</li>\n<li><code>[[:print:]]</code>：ASCII 码 32-127 的可打印字符。</li>\n<li><code>[[:punct:]]</code>：标点符号（除了 A-Z、a-z、0-9 的可打印字符）。</li>\n<li><code>[[:space:]]</code>：空格、Tab、LF（10）、VT（11）、FF（12）、CR（13）。</li>\n<li><code>[[:upper:]]</code>：匹配任意大写字母 A-Z。</li>\n<li><code>[[:xdigit:]]</code>：16进制字符（A-F、a-f、0-9）。</li>\n</ul>\n<p>请看下面的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:upper:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令输出所有大写字母开头的文件名。</p>\n<p>字符类的第一个方括号后面，可以加上感叹号<code>!</code>，表示否定。比如，<code>[![:digit:]]</code>匹配所有非数字。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>:digit:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令输出所有不以数字开头的文件名。</p>\n<p>字符类也属于文件名扩展，如果没有匹配的文件名，字符类就会原样输出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 不存在以大写字母开头的文件</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:upper:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>*\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:upper:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，由于没有可匹配的文件，字符类就原样输出了。</p>\n<h2 id=\"使用注意点\"><a href=\"#使用注意点\" class=\"headerlink\" title=\"使用注意点\"></a>使用注意点</h2><p>通配符有一些使用注意点，不可不知。</p>\n<p><strong>（1）通配符是先解释，再执行。</strong></p>\n<p>Bash 接收到命令以后，发现里面有通配符，会进行通配符扩展，然后再执行命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> a*.txt\nab.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面命令的执行过程是，Bash 先将<code>a*.txt</code>扩展成<code>ab.txt</code>，然后再执行<code>ls ab.txt</code>。</p>\n<p><strong>（2）文件名扩展在不匹配时，会原样输出。</strong></p>\n<p>文件名扩展在没有可匹配的文件时，会原样输出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 不存在 r 开头的文件名</span>\n$ <span class=\"token builtin class-name\">echo</span> r*\nr*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，由于不存在<code>r</code>开头的文件名，<code>r*</code>会原样输出。</p>\n<p>下面是另一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> *.csv\nls: *.csv: No such <span class=\"token function\">file</span> or directory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>另外，前面已经说过，大括号扩展<code>&#123;...&#125;</code>不是文件名扩展。</p>\n<p><strong>（3）只适用于单层路径。</strong></p>\n<p>所有文件名扩展只匹配单层路径，不能跨目录匹配，即无法匹配子目录里面的文件。或者说，<code>?</code>或<code>*</code>这样的通配符，不能匹配路径分隔符（<code>/</code>）。</p>\n<p>如果要匹配子目录里面的文件，可以写成下面这样。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> */*.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Bash 4.0 新增了一个<code>globstar</code>参数，允许<code>**</code>匹配零个或多个子目录，详见后面<code>shopt</code>命令的介绍。</p>\n<p><strong>（4）文件名可以使用通配符。</strong></p>\n<p>Bash 允许文件名使用通配符，即文件名包括特殊字符。这时引用文件名，需要把文件名放在单引号或双引号里面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">touch</span> <span class=\"token string\">'fo*'</span>\n$ <span class=\"token function\">ls</span>\nfo*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码创建了一个<code>fo*</code>文件，这时<code>*</code>就是文件名的一部分。</p>\n<h2 id=\"量词语法\"><a href=\"#量词语法\" class=\"headerlink\" title=\"量词语法\"></a>量词语法</h2><p>量词语法用来控制模式匹配的次数。它只有在 Bash 的<code>extglob</code>参数打开的情况下才能使用，不过一般是默认打开的。下面的命令可以查询。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> extglob\nextglob        \ton<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果<code>extglob</code>参数是关闭的，可以用下面的命令打开。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> -s extglob<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>量词语法有下面几个。</p>\n<ul>\n<li><code>?(pattern-list)</code>：匹配零个或一个模式。</li>\n<li><code>*(pattern-list)</code>：匹配零个或多个模式。</li>\n<li><code>+(pattern-list)</code>：匹配一个或多个模式。</li>\n<li><code>@(pattern-list)</code>：只匹配一个模式。</li>\n<li><code>!(pattern-list)</code>：匹配给定模式以外的任何内容。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> abc?<span class=\"token punctuation\">(</span>.<span class=\"token punctuation\">)</span>txt\nabctxt abc.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>?(.)</code>匹配零个或一个点。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> abc?<span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">)</span>\nabc abcdef<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>?(def)</code>匹配零个或一个<code>def</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> abc+<span class=\"token punctuation\">(</span>.txt<span class=\"token operator\">|</span>.php<span class=\"token punctuation\">)</span>\nabc.php abc.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>+(.txt|.php)</code>匹配文件有一个<code>.txt</code>或<code>.php</code>后缀名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> abc+<span class=\"token punctuation\">(</span>.txt<span class=\"token punctuation\">)</span>\nabc.txt abc.txt.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>+(.txt)</code>匹配文件有一个或多个<code>.txt</code>后缀名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> a<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>.txt\na.txt abb.txt ac.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>!(b)</code>表示匹配单个字母<code>b</code>以外的任意内容，所以除了<code>ab.txt</code>以外，其他文件名都能匹配。</p>\n<p>量词语法也属于文件名扩展，如果不存在可匹配的文件，就会原样输出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 没有 abc 开头的文件名</span>\n$ <span class=\"token function\">ls</span> abc?<span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">)</span>\nls: 无法访问<span class=\"token string\">'abc?(def)'</span><span class=\"token builtin class-name\">:</span> 没有那个文件或目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，由于没有可匹配的文件，<code>abc?(def)</code>就原样输出，导致<code>ls</code>命令报错。</p>\n<h2 id=\"shopt-命令\"><a href=\"#shopt-命令\" class=\"headerlink\" title=\"shopt 命令\"></a>shopt 命令</h2><p><code>shopt</code>命令可以调整 Bash 的行为。它有好几个参数跟通配符扩展有关。</p>\n<p><code>shopt</code>命令的使用方法如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 打开某个参数</span>\n$ <span class=\"token builtin class-name\">shopt</span> -s <span class=\"token punctuation\">[</span>optionname<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 关闭某个参数</span>\n$ <span class=\"token builtin class-name\">shopt</span> -u <span class=\"token punctuation\">[</span>optionname<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 查询某个参数关闭还是打开</span>\n$ <span class=\"token builtin class-name\">shopt</span> <span class=\"token punctuation\">[</span>optionname<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>（1）dotglob 参数</strong></p>\n<p><code>dotglob</code>参数可以让扩展结果包括隐藏文件（即点开头的文件）。</p>\n<p>正常情况下，扩展结果不包括隐藏文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> *\nabc.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>打开<code>dotglob</code>，就会包括隐藏文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> -s dotglob\n$ <span class=\"token function\">ls</span> *\nabc.txt .config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>（2）nullglob 参数</strong></p>\n<p><code>nullglob</code>参数可以让通配符不匹配任何文件名时，返回空字符。</p>\n<p>默认情况下，通配符不匹配任何文件名时，会保持不变。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rm</span> b*\nrm: 无法删除<span class=\"token string\">'b*'</span><span class=\"token builtin class-name\">:</span> 没有那个文件或目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，由于当前目录不包括<code>b</code>开头的文件名，导致<code>b*</code>不会发生文件名扩展，保持原样不变，所以<code>rm</code>命令报错没有<code>b*</code>这个文件。</p>\n<p>打开<code>nullglob</code>参数，就可以让不匹配的通配符返回空字符串。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> -s nullglob\n$ <span class=\"token function\">rm</span> b*\nrm: 缺少操作数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，由于没有<code>b*</code>匹配的文件名，所以<code>rm b*</code>扩展成了<code>rm</code>，导致报错变成了”缺少操作数“。</p>\n<p><strong>（3）failglob 参数</strong></p>\n<p><code>failglob</code>参数使得通配符不匹配任何文件名时，Bash 会直接报错，而不是让各个命令去处理。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> -s failglob\n$ <span class=\"token function\">rm</span> b*\nbash: 无匹配: b*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，打开<code>failglob</code>以后，由于<code>b*</code>不匹配任何文件名，Bash 直接报错了，不再让<code>rm</code>命令去处理。</p>\n<p><strong>（4）extglob 参数</strong></p>\n<p><code>extglob</code>参数使得 Bash 支持 ksh 的一些扩展语法。它默认应该是打开的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> extglob\nextglob        \ton<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>它的主要应用是支持量词语法。如果不希望支持量词语法，可以用下面的命令关闭。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> -u extglob<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（5）nocaseglob 参数</strong></p>\n<p><code>nocaseglob</code>参数可以让通配符扩展不区分大小写。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> -s nocaseglob\n$ <span class=\"token function\">ls</span> /windows/program*\n/windows/ProgramData\n/windows/Program Files\n/windows/Program Files <span class=\"token punctuation\">(</span>x86<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，打开<code>nocaseglob</code>以后，<code>program*</code>就不区分大小写了，可以匹配<code>ProgramData</code>等。</p>\n<p><strong>（6）globstar 参数</strong></p>\n<p><code>globstar</code>参数可以使得<code>**</code>匹配零个或多个子目录。该参数默认是关闭的。</p>\n<p>假设有下面的文件结构。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a.txt\nsub1/b.txt\nsub1/sub2/c.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的文件结构中，顶层目录、第一级子目录<code>sub1</code>、第二级子目录<code>sub1\\sub2</code>里面各有一个文本文件。请问怎样才能使用通配符，将它们显示出来？</p>\n<p>默认情况下，只能写成下面这样。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> *.txt */*.txt */*/*.txt\na.txt  sub1/b.txt  sub1/sub2/c.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这是因为<code>*</code>只匹配当前目录，如果要匹配子目录，只能一层层写出来。</p>\n<p>打开<code>globstar</code>参数以后，<code>**</code>匹配零个或多个子目录。因此，<code>**/*.txt</code>就可以得到想要的结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> -s globstar\n$ <span class=\"token function\">ls</span> **/*.txt\na.txt  sub1/b.txt  sub1/sub2/c.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://medium.com/@leedowthwaite/why-most-people-only-think-they-understand-wildcards-63bb9c2024ab\">Think You Understand Wildcards? Think Again</a></li>\n<li><a href=\"https://appcodelabs.com/advanced-wildcard-patterns-most-people-dont-know\">Advanced Wildcard Patterns Most People Don’t Know</a></li>\n</ul>\n<h1 id=\"引号和转义\"><a href=\"#引号和转义\" class=\"headerlink\" title=\"引号和转义\"></a>引号和转义</h1><p>Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串。因此，字符串相关的引号和转义，对 Bash 来说就非常重要。</p>\n<h2 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h2><p>某些字符在 Bash 里面有特殊含义（比如<code>$</code>、<code>&amp;</code>、<code>*</code>）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$date</span>\n\n$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，输出<code>$date</code>不会有任何结果，因为<code>$</code>是一个特殊字符。</p>\n<p>如果想要原样输出这些特殊字符，就必须在它们前面加上反斜杠，使其变成普通字符。这就叫做“转义”（escape）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">\\</span><span class=\"token variable\">$date</span>\n<span class=\"token variable\">$date</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面命令中，只有在特殊字符<code>$</code>前面加反斜杠，才能原样输出。</p>\n<p>反斜杠本身也是特殊字符，如果想要原样输出反斜杠，就需要对它自身转义，连续使用两个反斜线（<code>\\\\</code>）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>\n<span class=\"token punctuation\">\\</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子输出了反斜杠本身。</p>\n<p>反斜杠除了用于转义，还可以表示一些不可打印的字符。</p>\n<ul>\n<li><code>\\a</code>：响铃</li>\n<li><code>\\b</code>：退格</li>\n<li><code>\\n</code>：换行</li>\n<li><code>\\r</code>：回车</li>\n<li><code>\\t</code>：制表符</li>\n</ul>\n<p>如果想要在命令行使用这些不可打印的字符，可以把它们放在引号里面，然后使用<code>echo</code>命令的<code>-e</code>参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> a<span class=\"token punctuation\">\\</span>tb\natb\n\n$ <span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"a<span class=\"token entity\" title=\"\\t\">\\t</span>b\"</span>\na        b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，命令行直接输出不可打印字符<code>\\t</code>，Bash 不能正确解释。必须把它们放在引号之中，然后使用<code>echo</code>命令的<code>-e</code>参数。</p>\n<p>换行符是一个特殊字符，表示命令的结束，Bash 收到这个字符以后，就会对输入的命令进行解释执行。换行符前面加上反斜杠转义，就使得换行符变成一个普通字符，Bash 会将其当作空格处理，从而可以将一行命令写成多行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">mv</span> <span class=\"token punctuation\">\\</span>\n/path/to/foo <span class=\"token punctuation\">\\</span>\n/path/to/bar\n\n<span class=\"token comment\"># 等同于</span>\n$ <span class=\"token function\">mv</span> /path/to/foo /path/to/bar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，如果一条命令过长，就可以在行尾使用反斜杠，将其改写成多行。这是常见的多行命令的写法。</p>\n<h2 id=\"单引号\"><a href=\"#单引号\" class=\"headerlink\" title=\"单引号\"></a>单引号</h2><p>Bash 允许字符串放在单引号或双引号之中，加以引用。</p>\n<p>单引号用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符，比如星号（<code>*</code>）、美元符号（<code>$</code>）、反斜杠（<code>\\</code>）等。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'*'</span>\n*\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'<span class=\"token environment constant\">$USER</span>'</span>\n<span class=\"token environment constant\">$USER</span>\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'<span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token variable\">))</span></span>'</span>\n<span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> foo<span class=\"token variable\">)</span></span>'</span>\n<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> foo<span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令中，单引号使得 Bash 扩展、变量引用、算术运算和子命令，都失效了。如果不使用单引号，它们都会被 Bash 自动扩展。</p>\n<p>由于反斜杠在单引号里面变成了普通字符，所以如果单引号之中，还要使用单引号，不能使用转义，需要在外层的单引号前面加上一个美元符号（<code>$</code>），然后再对里层的单引号转义。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 不正确</span>\n$ <span class=\"token builtin class-name\">echo</span> it<span class=\"token string\">'s\n\n# 不正确\n$ echo '</span>it<span class=\"token punctuation\">\\</span>'s<span class=\"token string\">'\n\n# 正确\n$ echo $'</span>it<span class=\"token punctuation\">\\</span>'s'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不过，更合理的方法是改在双引号之中使用单引号。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"it's\"</span>\nit's<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h2><p>双引号比单引号宽松，大部分特殊字符在双引号里面，都会失去特殊含义，变成普通字符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"*\"</span>\n*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，通配符<code>*</code>是一个特殊字符，放在双引号之中，就变成了普通字符，会原样输出。这一点需要特别留意，这意味着，双引号里面不会进行文件名扩展。</p>\n<p>但是，三个特殊字符除外：美元符号（<code>$</code>）、反引号（<code>`</code>）和反斜杠（<code>\\</code>）。这三个字符在双引号之中，依然有特殊含义，会被 Bash 自动扩展。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token environment constant\">$SHELL</span>\"</span>\n/bin/bash\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span><span class=\"token variable\">`</span></span>\"</span>\nMon Jan <span class=\"token number\">27</span> <span class=\"token number\">13</span>:33:18 CST <span class=\"token number\">2020</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，美元符号（<code>$</code>）和反引号（<code>`</code>）在双引号中，都保持特殊含义。美元符号用来引用变量，反引号则是执行子命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"I'd say: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>hello!<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span>\nI'd say: <span class=\"token string\">\"hello!\"</span>\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\\\\">\\\\</span>\"</span>\n<span class=\"token punctuation\">\\</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，反斜杠在双引号之中保持特殊含义，用来转义。所以，可以使用反斜杠，在双引号之中插入双引号，或者插入反斜杠本身。</p>\n<p>换行符在双引号之中，会失去特殊含义，Bash 不再将其解释为命令的结束，只是作为普通的换行符。所以可以利用双引号，在命令行输入多行文本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello\nworld\"</span>\nhello\nworld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令中，Bash 正常情况下会将换行符解释为命令结束，但是换行符在双引号之中就失去了这种特殊作用，只用来换行，所以可以输入多行。<code>echo</code>命令会将换行符原样输出，显示的时候正常解释为换行。</p>\n<p>双引号的另一个常见的使用场合是，文件名包含空格。这时就必须使用双引号（或单引号），将文件名放在里面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> <span class=\"token string\">\"two words.txt\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>two words.txt</code>是一个包含空格的文件名，否则就会被 Bash 当作两个文件。</p>\n<p>双引号会原样保存多余的空格。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"this is a     test\"</span>\nthis is a     <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>双引号还有一个作用，就是保存原始命令的输出格式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 单行输出</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cal</span><span class=\"token variable\">)</span></span>\n一月 <span class=\"token number\">2020</span> 日 一 二 三 四 五 六 <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">..</span>. <span class=\"token number\">31</span>\n\n<span class=\"token comment\"># 原始格式输出</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cal</span><span class=\"token variable\">)</span></span>\"</span>\n      一月 <span class=\"token number\">2020</span>\n日 一 二 三 四 五 六\n          <span class=\"token number\">1</span>  <span class=\"token number\">2</span>  <span class=\"token number\">3</span>  <span class=\"token number\">4</span>\n <span class=\"token number\">5</span>  <span class=\"token number\">6</span>  <span class=\"token number\">7</span>  <span class=\"token number\">8</span>  <span class=\"token number\">9</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span>\n<span class=\"token number\">12</span> <span class=\"token number\">13</span> <span class=\"token number\">14</span> <span class=\"token number\">15</span> <span class=\"token number\">16</span> <span class=\"token number\">17</span> <span class=\"token number\">18</span>\n<span class=\"token number\">19</span> <span class=\"token number\">20</span> <span class=\"token number\">21</span> <span class=\"token number\">22</span> <span class=\"token number\">23</span> <span class=\"token number\">24</span> <span class=\"token number\">25</span>\n<span class=\"token number\">26</span> <span class=\"token number\">27</span> <span class=\"token number\">28</span> <span class=\"token number\">29</span> <span class=\"token number\">30</span> <span class=\"token number\">31</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，如果<code>$(cal)</code>不放在双引号之中，<code>echo</code>就会将所有结果以单行输出，丢弃了所有原始的格式。</p>\n<h2 id=\"Here-文档\"><a href=\"#Here-文档\" class=\"headerlink\" title=\"Here 文档\"></a>Here 文档</h2><p>Here 文档（here document）是一种输入多行字符串的方法，格式如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">token\ntext\ntoken</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>它的格式分成开始标记（<code>&lt;&lt; token</code>）和结束标记（<code>token</code>）。开始标记是两个小于号 + Here 文档的名称，名称可以随意取，后面必须是一个换行符；结束标记是单独一行顶格写的 Here 文档名称，如果不是顶格，结束标记不起作用。两者之间就是多行字符串的内容。</p>\n<p>下面是一个通过 Here 文档输出 HTML 代码的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">_EOF_\n&lt;html>\n&lt;head>\n    &lt;title>\n    The title of your page\n    &lt;/title>\n&lt;/head>\n\n&lt;body>\n    Your page content goes here.\n&lt;/body>\n&lt;/html>\n_EOF_</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Here 文档内部会发生变量替换，同时支持反斜杠转义，但是不支持通配符扩展，双引号和单引号也失去语法作用，变成了普通字符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token string\">'hello world'</span>\n$ <span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">_example_\n<span class=\"token variable\">$foo</span>\n\"<span class=\"token variable\">$foo</span>\"\n'<span class=\"token variable\">$foo</span>'\n_example_</span>\n\nhello world\n<span class=\"token string\">\"hello world\"</span>\n<span class=\"token string\">'hello world'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，变量<code>$foo</code>发生了替换，但是双引号和单引号都原样输出了，表明它们已经失去了引用的功能。</p>\n<p>如果不希望发生变量替换，可以把 Here 文档的开始标记放在单引号之中。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token string\">'hello world'</span>\n$ <span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'_example_'\n$foo\n\"$foo\"\n'$foo'\n_example_</span>\n\n<span class=\"token variable\">$foo</span>\n<span class=\"token string\">\"<span class=\"token variable\">$foo</span>\"</span>\n<span class=\"token string\">'<span class=\"token variable\">$foo</span>'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，Here 文档的开始标记（<code>_example_</code>）放在单引号之中，导致变量替换失效了。</p>\n<p>Here 文档的本质是重定向，它将字符串重定向输出给某个命令，相当于包含了<code>echo</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">token\n  string\ntoken</span>\n\n<span class=\"token comment\"># 等同于</span>\n\n$ <span class=\"token builtin class-name\">echo</span> string <span class=\"token operator\">|</span> <span class=\"token builtin class-name\">command</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，Here 文档相当于<code>echo</code>命令的重定向。</p>\n<p>所以，Here 字符串只适合那些可以接受标准输入作为参数的命令，对于其他命令无效，比如<code>echo</code>命令就不能用 Here 文档作为参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">_example_\nhello\n_example_</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子不会有任何输出，因为 Here 文档对于<code>echo</code>命令无效。</p>\n<p>此外，Here 文档也不能作为变量的值，只能用于命令的参数。</p>\n<h2 id=\"Here-字符串\"><a href=\"#Here-字符串\" class=\"headerlink\" title=\"Here 字符串\"></a>Here 字符串</h2><p>Here 文档还有一个变体，叫做 Here 字符串（Here string），使用三个小于号（<code>&lt;&lt;&lt;</code>）表示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;&lt;&lt;</span> string<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的作用是将字符串通过标准输入，传递给命令。</p>\n<p>有些命令直接接受给定的参数，与通过标准输入接受参数，结果是不一样的。所以才有了这个语法，使得将字符串通过标准输入传递给命令更方便，比如<code>cat</code>命令只接受标准输入传入的字符串。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;&lt;</span> <span class=\"token string\">'hi there'</span>\n<span class=\"token comment\"># 等同于</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'hi there'</span> <span class=\"token operator\">|</span> <span class=\"token function\">cat</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的第一种语法使用了 Here 字符串，要比第二种语法看上去语义更好，也更简洁。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ md5sum <span class=\"token operator\">&lt;&lt;&lt;</span> <span class=\"token string\">'ddd'</span>\n<span class=\"token comment\"># 等同于</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'ddd'</span> <span class=\"token operator\">|</span> md5sum<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>md5sum</code>命令只能接受标准输入作为参数，不能直接将字符串放在命令后面，会被当作文件名，即<code>md5sum ddd</code>里面的<code>ddd</code>会被解释成文件名。这时就可以用 Here 字符串，将字符串传给<code>md5sum</code>命令。</p>\n<h1 id=\"Bash-变量\"><a href=\"#Bash-变量\" class=\"headerlink\" title=\"Bash 变量\"></a>Bash 变量</h1><h2 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Bash 变量分成环境变量和自定义变量两类。</p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>环境变量是 Bash 环境自带的变量，进入 Shell 时已经定义好了，可以直接使用。它们通常是系统定义好的，也可以由用户从父 Shell 传入子 Shell。</p>\n<p><code>env</code>命令或<code>printenv</code>命令，可以显示所有环境变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">env</span>\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token function\">printenv</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是一些常见的环境变量。</p>\n<ul>\n<li><code>BASHPID</code>：Bash 进程的进程 ID。</li>\n<li><code>BASHOPTS</code>：当前 Shell 的参数，可以用<code>shopt</code>命令修改。</li>\n<li><code>DISPLAY</code>：图形环境的显示器名字，通常是<code>:0</code>，表示 X Server 的第一个显示器。</li>\n<li><code>EDITOR</code>：默认的文本编辑器。</li>\n<li><code>HOME</code>：用户的主目录。</li>\n<li><code>HOST</code>：当前主机的名称。</li>\n<li><code>IFS</code>：词与词之间的分隔符，默认为空格。</li>\n<li><code>LANG</code>：字符集以及语言编码，比如<code>zh_CN.UTF-8</code>。</li>\n<li><code>PATH</code>：由冒号分开的目录列表，当输入可执行程序名后，会搜索这个目录列表。</li>\n<li><code>PS1</code>：Shell 提示符。</li>\n<li><code>PS2</code>： 输入多行命令时，次要的 Shell 提示符。</li>\n<li><code>PWD</code>：当前工作目录。</li>\n<li><code>RANDOM</code>：返回一个0到32767之间的随机数。</li>\n<li><code>SHELL</code>：Shell 的名字。</li>\n<li><code>SHELLOPTS</code>：启动当前 Shell 的<code>set</code>命令的参数，参见《set 命令》一章。</li>\n<li><code>TERM</code>：终端类型名，即终端仿真器所用的协议。</li>\n<li><code>UID</code>：当前用户的 ID 编号。</li>\n<li><code>USER</code>：当前用户的用户名。</li>\n</ul>\n<p>很多环境变量很少发生变化，而且是只读的，可以视为常量。由于它们的变量名全部都是大写，所以传统上，如果用户要自己定义一个常量，也会使用全部大写的变量名。</p>\n<p>注意，Bash 变量名区分大小写，<code>HOME</code>和<code>home</code>是两个不同的变量。</p>\n<p>查看单个环境变量的值，可以使用<code>printenv</code>命令或<code>echo</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">printenv</span> <span class=\"token environment constant\">PATH</span>\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，<code>printenv</code>命令后面的变量名，不用加前缀<code>$</code>。</p>\n<h3 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h3><p>自定义变量是用户在当前 Shell 里面自己定义的变量，仅在当前 Shell 可用。一旦退出当前 Shell，该变量就不存在了。</p>\n<p><code>set</code>命令可以显示所有变量（包括环境变量和自定义变量），以及所有的 Bash 函数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">set</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"创建变量\"><a href=\"#创建变量\" class=\"headerlink\" title=\"创建变量\"></a>创建变量</h2><p>用户创建变量的时候，变量名必须遵守下面的规则。</p>\n<ul>\n<li>字母、数字和下划线字符组成。</li>\n<li>第一个字符必须是一个字母或一个下划线，不能是数字。</li>\n<li>不允许出现空格和标点符号。</li>\n</ul>\n<p>变量声明的语法如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">variable</span><span class=\"token operator\">=</span>value<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，等号左边是变量名，右边是变量。注意，等号两边不能有空格。</p>\n<p>如果变量的值包含空格，则必须将值放在引号中。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">myvar</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Bash 没有数据类型的概念，所有的变量值都是字符串。</p>\n<p>下面是一些自定义变量的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span>z                     <span class=\"token comment\"># 变量 a 赋值为字符串 z</span>\n<span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span><span class=\"token string\">\"a string\"</span>            <span class=\"token comment\"># 变量值包含空格，就必须放在引号里面</span>\n<span class=\"token assign-left variable\">c</span><span class=\"token operator\">=</span><span class=\"token string\">\"a string and <span class=\"token variable\">$b</span>\"</span>     <span class=\"token comment\"># 变量值可以引用其他变量的值</span>\n<span class=\"token assign-left variable\">d</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token entity\" title=\"\\t\">\\t</span><span class=\"token entity\" title=\"\\t\">\\t</span>a string<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>      <span class=\"token comment\"># 变量值可以使用转义字符</span>\n<span class=\"token assign-left variable\">e</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ls</span> -l foo.txt<span class=\"token variable\">)</span></span>      <span class=\"token comment\"># 变量值可以是命令的执行结果</span>\n<span class=\"token assign-left variable\">f</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">7</span><span class=\"token variable\">))</span></span>            <span class=\"token comment\"># 变量值可以是数学运算的结果</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>变量可以重复赋值，后面的赋值会覆盖前面的赋值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$foo</span>\n<span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，变量<code>foo</code>的第二次赋值会覆盖第一次赋值。</p>\n<p>如果同一行定义多个变量，必须使用分号（<code>;</code>）分隔。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">bar</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，同一行定义了<code>foo</code>和<code>bar</code>两个变量。</p>\n<h2 id=\"读取变量\"><a href=\"#读取变量\" class=\"headerlink\" title=\"读取变量\"></a>读取变量</h2><p>读取变量的时候，直接在变量名前加上<code>$</code>就可以了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span>bar\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$foo</span>\nbar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>每当 Shell 看到以<code>$</code>开头的单词时，就会尝试读取这个变量名对应的值。</p>\n<p>如果变量不存在，Bash 不会报错，而会输出空字符。</p>\n<p>由于<code>$</code>在 Bash 中有特殊含义，把它当作美元符号使用时，一定要非常小心，</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> The total is <span class=\"token variable\">$100</span>.00\nThe total is 00.00<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面命令的原意是输入<code>$100</code>，但是 Bash 将<code>$1</code>解释成了变量，该变量为空，因此输入就变成了<code>00.00</code>。所以，如果要使用<code>$</code>的原义，需要在<code>$</code>前面放上反斜杠，进行转义。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> The total is <span class=\"token punctuation\">\\</span><span class=\"token variable\">$100</span>.00\nThe total is <span class=\"token variable\">$100</span>.00<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>读取变量的时候，变量名也可以使用花括号<code>&#123;&#125;</code>包围，比如<code>$a</code>也可以写成<code>$&#123;a&#125;</code>。这种写法可以用于变量名与其他字符连用的情况。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span>foo\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$a_file</span>\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;a&#125;</span>_file\nfoo_file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，变量名<code>a_file</code>不会有任何输出，因为 Bash 将其整个解释为变量，而这个变量是不存在的。只有用花括号区分<code>$a</code>，Bash 才能正确解读。</p>\n<p>事实上，读取变量的语法<code>$foo</code>，可以看作是<code>$&#123;foo&#125;</code>的简写形式。</p>\n<p>如果变量的值本身也是变量，可以使用<code>$&#123;!varname&#125;</code>的语法，读取最终的值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">myvar</span><span class=\"token operator\">=</span><span class=\"token environment constant\">USER</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">!</span>myvar&#125;</span>\nruanyf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子中，变量<code>myvar</code>的值是<code>USER</code>，<code>$&#123;!myvar&#125;</code>的写法将其展开成最终的值。</p>\n<p>如果变量值包含连续空格（或制表符和换行符），最好放在双引号里面读取。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token string\">\"1 2  3\"</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$a</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$a</span>\"</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span>  <span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>a</code>的值包含两个连续空格。如果直接读取，Shell 会将连续空格合并成一个。只有放在双引号里面读取，才能保持原来的格式。</p>\n<h2 id=\"删除变量\"><a href=\"#删除变量\" class=\"headerlink\" title=\"删除变量\"></a>删除变量</h2><p><code>unset</code>命令用来删除一个变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">unset</span> NAME<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个命令不是很有用。因为不存在的 Bash 变量一律等于空字符串，所以即使<code>unset</code>命令删除了变量，还是可以读取这个变量，值为空字符串。</p>\n<p>所以，删除一个变量，也可以将这个变量设成空字符串。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token string\">''</span>\n$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面两种写法，都是删除了变量<code>foo</code>。由于不存在的值默认为空字符串，所以后一种写法可以在等号右边不写任何值。</p>\n<h2 id=\"输出变量，export-命令\"><a href=\"#输出变量，export-命令\" class=\"headerlink\" title=\"输出变量，export 命令\"></a>输出变量，export 命令</h2><p>用户创建的变量仅可用于当前 Shell，子 Shell 默认读取不到父 Shell 定义的变量。为了把变量传递给子 Shell，需要使用<code>export</code>命令。这样输出的变量，对于子 Shell 来说就是环境变量。</p>\n<p><code>export</code>命令用来向子 Shell 输出变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">NAME</span><span class=\"token operator\">=</span>foo\n<span class=\"token builtin class-name\">export</span> NAME<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面命令输出了变量<code>NAME</code>。变量的赋值和输出也可以在一个步骤中完成。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NAME</span><span class=\"token operator\">=</span>value<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令执行后，当前 Shell 及随后新建的子 Shell，都可以读取变量<code>$NAME</code>。</p>\n<p>子 Shell 如果修改继承的变量，不会影响父 Shell。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 输出变量 $foo</span>\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span>bar\n\n<span class=\"token comment\"># 新建子 Shell</span>\n$ <span class=\"token function\">bash</span>\n\n<span class=\"token comment\"># 读取 $foo</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$foo</span>\nbar\n\n<span class=\"token comment\"># 修改继承的变量</span>\n$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span>baz\n\n<span class=\"token comment\"># 退出子 Shell</span>\n$ <span class=\"token builtin class-name\">exit</span>\n\n<span class=\"token comment\"># 读取 $foo</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$foo</span>\nbar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，子 Shell 修改了继承的变量<code>$foo</code>，对父 Shell 没有影响。</p>\n<h2 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h2><p>Bash 提供一些特殊变量。这些变量的值由 Shell 提供，用户不能进行赋值。</p>\n<p>（1）<code>$?</code></p>\n<p><code>$?</code>为上一个命令的退出码，用来判断上一个命令是否执行成功。返回值是<code>0</code>，表示上一个命令执行成功；如果是非零，上一个命令执行失败。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> doesnotexist\nls: doesnotexist: No such <span class=\"token function\">file</span> or directory\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span>\n<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>ls</code>命令查看一个不存在的文件，导致报错。<code>$?</code>为1，表示上一个命令执行失败。</p>\n<p>（2）<code>$$</code></p>\n<p><code>$$</code>为当前 Shell 的进程 ID。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$$</span>\n<span class=\"token number\">10662</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这个特殊变量可以用来命名临时文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">LOGFILE</span><span class=\"token operator\">=</span>/tmp/output_log.<span class=\"token variable\">$$</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（3）<code>$_</code></p>\n<p><code>$_</code>为上一个命令的最后一个参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">grep</span> dictionary /usr/share/dict/words\ndictionary\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$_</span>\n/usr/share/dict/words<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（4）<code>$!</code></p>\n<p><code>$!</code>为最近一个后台执行的异步命令的进程 ID。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ firefox <span class=\"token operator\">&amp;</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">11064</span>\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$!</span>\n<span class=\"token number\">11064</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>firefox</code>是后台运行的命令，<code>$!</code>返回该命令的进程 ID。</p>\n<p>（5）<code>$0</code></p>\n<p><code>$0</code>为当前 Shell 的名称（在命令行直接执行时）或者脚本名（在脚本中执行时）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$0</span>\n<span class=\"token function\">bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>$0</code>返回当前运行的是 Bash。</p>\n<p>（6）<code>$-</code></p>\n<p><code>$-</code>为当前 Shell 的启动参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> $-\nhimBHs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>（7）<code>$@</code>和<code>$#</code></p>\n<p><code>$#</code>表示脚本的参数数量，<code>$@</code>表示脚本的参数值，参见脚本一章。</p>\n<h2 id=\"变量的默认值\"><a href=\"#变量的默认值\" class=\"headerlink\" title=\"变量的默认值\"></a>变量的默认值</h2><p>Bash 提供四个特殊语法，跟变量的默认值有关，目的是保证变量不为空。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$&#123;varname<span class=\"token operator\">:-</span>word&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面语法的含义是，如果变量<code>varname</code>存在且不为空，则返回它的值，否则返回<code>word</code>。它的目的是返回一个默认值，比如<code>$&#123;count:-0&#125;</code>表示变量<code>count</code>不存在时返回<code>0</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$&#123;varname<span class=\"token operator\">:=</span>word&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面语法的含义是，如果变量<code>varname</code>存在且不为空，则返回它的值，否则将它设为<code>word</code>，并且返回<code>word</code>。它的目的是设置变量的默认值，比如<code>$&#123;count:=0&#125;</code>表示变量<code>count</code>不存在时返回<code>0</code>，且将<code>count</code>设为<code>0</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$&#123;varname<span class=\"token operator\">:+</span>word&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面语法的含义是，如果变量名存在且不为空，则返回<code>word</code>，否则返回空值。它的目的是测试变量是否存在，比如<code>$&#123;count:+1&#125;</code>表示变量<code>count</code>存在时返回<code>1</code>（表示<code>true</code>），否则返回空值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$&#123;varname<span class=\"token operator\">:?</span>message&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面语法的含义是，如果变量<code>varname</code>存在且不为空，则返回它的值，否则打印出<code>varname: message</code>，并中断脚本的执行。如果省略了<code>message</code>，则输出默认的信息“parameter null or not set.”。它的目的是防止变量未定义，比如<code>$&#123;count:?&quot;undefined!&quot;&#125;</code>表示变量<code>count</code>未定义时就中断执行，抛出错误，返回给定的报错信息<code>undefined!</code>。</p>\n<p>上面四种语法如果用在脚本中，变量名的部分可以用数字<code>1</code>到<code>9</code>，表示脚本的参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">filename</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;1<span class=\"token operator\">:?</span>\"filename missing.\"&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码出现在脚本中，<code>1</code>表示脚本的第一个参数。如果该参数不存在，就退出脚本并报错。</p>\n<h2 id=\"declare-命令\"><a href=\"#declare-命令\" class=\"headerlink\" title=\"declare 命令\"></a>declare 命令</h2><p><code>declare</code>命令可以声明一些特殊类型的变量，为变量设置一些限制，比如声明只读类型的变量和整数类型的变量。</p>\n<p>它的语法形式如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">declare</span> OPTION <span class=\"token assign-left variable\">VARIABLE</span><span class=\"token operator\">=</span>value<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>declare</code>命令的主要参数（OPTION）如下。</p>\n<ul>\n<li><code>-a</code>：声明数组变量。</li>\n<li><code>-f</code>：输出所有函数定义。</li>\n<li><code>-F</code>：输出所有函数名。</li>\n<li><code>-i</code>：声明整数变量。</li>\n<li><code>-l</code>：声明变量为小写字母。</li>\n<li><code>-p</code>：查看变量信息。</li>\n<li><code>-r</code>：声明只读变量。</li>\n<li><code>-u</code>：声明变量为大写字母。</li>\n<li><code>-x</code>：该变量输出为环境变量。</li>\n</ul>\n<p><code>declare</code>命令如果用在函数中，声明的变量只在函数内部有效，等同于<code>local</code>命令。</p>\n<p>不带任何参数时，<code>declare</code>命令输出当前环境的所有变量，包括函数在内，等同于不带有任何参数的<code>set</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（1）<code>-i</code>参数</strong></p>\n<p><code>-i</code>参数声明整数变量以后，可以直接进行数学运算。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -i <span class=\"token assign-left variable\">val1</span><span class=\"token operator\">=</span><span class=\"token number\">12</span> <span class=\"token assign-left variable\">val2</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\n$ <span class=\"token builtin class-name\">declare</span> -i result\n$ <span class=\"token assign-left variable\">result</span><span class=\"token operator\">=</span>val1*val2\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$result</span>\n<span class=\"token number\">60</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，如果变量<code>result</code>不声明为整数，<code>val1*val2</code>会被当作字面量，不会进行整数运算。另外，<code>val1</code>和<code>val2</code>其实不需要声明为整数，因为只要<code>result</code>声明为整数，它的赋值就会自动解释为整数运算。</p>\n<p>注意，一个变量声明为整数以后，依然可以被改写为字符串。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -i <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">12</span>\n$ <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span>foo\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span>\n<span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，变量<code>var</code>声明为整数，覆盖以后，Bash 不会报错，但会赋以不确定的值，上面的例子中可能输出0，也可能输出的是3。</p>\n<p><strong>（2）<code>-x</code>参数</strong></p>\n<p><code>-x</code>参数等同于<code>export</code>命令，可以输出一个变量为子 Shell 的环境变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -x foo\n<span class=\"token comment\"># 等同于</span>\n$ <span class=\"token builtin class-name\">export</span> foo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>（3）<code>-r</code>参数</strong></p>\n<p><code>-r</code>参数可以声明只读变量，无法改变变量值，也不能<code>unset</code>变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -r <span class=\"token assign-left variable\">bar</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n\n$ <span class=\"token assign-left variable\">bar</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\nbash: bar：只读变量\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span>\n<span class=\"token number\">1</span>\n\n$ <span class=\"token builtin class-name\">unset</span> bar\nbash: bar：只读变量\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span>\n<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，后两个赋值语句都会报错，命令执行失败。</p>\n<p><strong>（4）<code>-u</code>参数</strong></p>\n<p><code>-u</code>参数声明变量为大写字母，可以自动把变量值转成大写字母。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -u foo\n$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span>upper\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$foo</span>\nUPPER<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>（5）<code>-l</code>参数</strong></p>\n<p><code>-l</code>参数声明变量为小写字母，可以自动把变量值转成小写字母。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -l bar\n$ <span class=\"token assign-left variable\">bar</span><span class=\"token operator\">=</span>LOWER\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$bar</span>\nlower<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>（6）<code>-p</code>参数</strong></p>\n<p><code>-p</code>参数输出变量信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span>hello\n$ <span class=\"token builtin class-name\">declare</span> -p foo\n<span class=\"token builtin class-name\">declare</span> -- <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span>\n$ <span class=\"token builtin class-name\">declare</span> -p bar\nbar：未找到<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>declare -p</code>可以输出已定义变量的值，对于未定义的变量，会提示找不到。</p>\n<p>如果不提供变量名，<code>declare -p</code>输出所有变量的信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（7）<code>-f</code>参数</strong></p>\n<p><code>-f</code>参数输出当前环境的所有函数，包括它的定义。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（8）<code>-F</code>参数</strong></p>\n<p><code>-F</code>参数输出当前环境的所有函数名，不包含函数定义。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -F<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"readonly-命令\"><a href=\"#readonly-命令\" class=\"headerlink\" title=\"readonly 命令\"></a>readonly 命令</h2><p><code>readonly</code>命令等同于<code>declare -r</code>，用来声明只读变量，不能改变变量值，也不能<code>unset</code>变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">readonly</span> <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\nbash: foo：只读变量\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span>\n<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，更改只读变量<code>foo</code>会报错，命令执行失败。</p>\n<p><code>readonly</code>命令有三个参数。</p>\n<ul>\n<li><code>-f</code>：声明的变量为函数名。</li>\n<li><code>-p</code>：打印出所有的只读变量。</li>\n<li><code>-a</code>：声明的变量为数组。</li>\n</ul>\n<h2 id=\"let-命令\"><a href=\"#let-命令\" class=\"headerlink\" title=\"let 命令\"></a>let 命令</h2><p><code>let</code>命令声明变量时，可以直接执行算术表达式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">let</span> <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>+2\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$foo</span>\n<span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>let</code>命令可以直接计算<code>1 + 2</code>。</p>\n<p><code>let</code>命令的参数表达式如果包含空格，就需要使用引号。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">let</span> <span class=\"token string\">\"foo = 1 + 2\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>let</code>可以同时对多个变量赋值，赋值表达式之间使用空格分隔。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">let</span> <span class=\"token string\">\"v1 = 1\"</span> <span class=\"token string\">\"v2 = v1++\"</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$v1</span>,<span class=\"token variable\">$v2</span>\n<span class=\"token number\">2,1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>let</code>声明了两个变量<code>v1</code>和<code>v2</code>，其中<code>v2</code>等于<code>v1++</code>，表示先返回<code>v1</code>的值，然后<code>v1</code>自增。</p>\n<p>这种语法支持的运算符，参考《Bash 的算术运算》一章。</p>\n<h1 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h1><p>本章介绍 Bash 字符串操作的语法。</p>\n<h2 id=\"字符串的长度\"><a href=\"#字符串的长度\" class=\"headerlink\" title=\"字符串的长度\"></a>字符串的长度</h2><p>获取字符串长度的语法如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>varname&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">myPath</span><span class=\"token operator\">=</span>/home/cam/book/long.file.name\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>myPath&#125;</span>\n<span class=\"token number\">29</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>大括号<code>&#123;&#125;</code>是必需的，否则 Bash 会将<code>$#</code>理解成脚本的参数个数，将变量名理解成文本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$#</span>myvar\n0myvar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，Bash 将<code>$#</code>和<code>myvar</code>分开解释了。</p>\n<h2 id=\"子字符串\"><a href=\"#子字符串\" class=\"headerlink\" title=\"子字符串\"></a>子字符串</h2><p>字符串提取子串的语法如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$&#123;varname<span class=\"token operator\">:</span>offset<span class=\"token operator\">:</span>length&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面语法的含义是返回变量<code>$varname</code>的子字符串，从位置<code>offset</code>开始（从<code>0</code>开始计算），长度为<code>length</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span>frogfootman\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;count<span class=\"token operator\">:</span>4<span class=\"token operator\">:</span>4&#125;</span>\nfoot<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子返回字符串<code>frogfootman</code>从4号位置开始的长度为4的子字符串<code>foot</code>。</p>\n<p>这种语法不能直接操作字符串，只能通过变量来读取字符串，并且不会改变原始字符串。变量前面的美元符号可以省略。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 报错</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;\"hello\"<span class=\"token operator\">:</span>2<span class=\"token operator\">:</span>3&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>&quot;hello&quot;</code>不是变量名，导致 Bash 报错。</p>\n<p>如果省略<code>length</code>，则从位置<code>offset</code>开始，一直返回到字符串的结尾。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span>frogfootman\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;count<span class=\"token operator\">:</span>4&#125;</span>\nfootman<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子是返回变量<code>count</code>从4号位置一直到结尾的子字符串。</p>\n<p>如果<code>offset</code>为负值，表示从字符串的末尾开始算起。注意，负数前面必须有一个空格， 以防止与<code>$&#123;variable:-word&#125;</code>的变量的设置默认值语法混淆。这时还可以指定<code>length</code>，<code>length</code>可以是正值，也可以是负值（负值不能超过<code>offset</code>的长度）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token string\">\"This string is long.\"</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token operator\">:</span> -5&#125;</span>\nlong.\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token operator\">:</span> -5<span class=\"token operator\">:</span>2&#125;</span>\nlo\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token operator\">:</span> -5<span class=\"token operator\">:-</span>2&#125;</span>\nlon<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>offset</code>为<code>-5</code>，表示从倒数第5个字符开始截取，所以返回<code>long.</code>。如果指定长度<code>length</code>为<code>2</code>，则返回<code>lo</code>；如果<code>length</code>为<code>-2</code>，表示要排除从字符串末尾开始的2个字符，所以返回<code>lon</code>。</p>\n<h2 id=\"搜索和替换\"><a href=\"#搜索和替换\" class=\"headerlink\" title=\"搜索和替换\"></a>搜索和替换</h2><p>Bash 提供字符串搜索和替换的多种方法。</p>\n<p><strong>（1）字符串头部的模式匹配。</strong></p>\n<p>以下两种语法可以检查字符串开头，是否匹配给定的模式。如果匹配成功，就删除匹配的部分，返回剩下的部分。原始变量不会发生变化。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 如果 pattern 匹配变量 variable 的开头，</span>\n<span class=\"token comment\"># 删除最短匹配（非贪婪匹配）的部分，返回剩余部分</span>\n<span class=\"token variable\">$&#123;variable<span class=\"token operator\">#</span>pattern&#125;</span>\n\n<span class=\"token comment\"># 如果 pattern 匹配变量 variable 的开头，</span>\n<span class=\"token comment\"># 删除最长匹配（贪婪匹配）的部分，返回剩余部分</span>\n<span class=\"token variable\">$&#123;variable<span class=\"token operator\">##</span>pattern&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面两种语法会删除变量字符串开头的匹配部分（将其替换为空），返回剩下的部分。区别是一个是最短匹配（又称非贪婪匹配），另一个是最长匹配（又称贪婪匹配）。</p>\n<p>匹配模式<code>pattern</code>可以使用<code>*</code>、<code>?</code>、<code>[]</code>等通配符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">myPath</span><span class=\"token operator\">=</span>/home/cam/book/long.file.name\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;myPath<span class=\"token operator\">#</span><span class=\"token operator\">/</span>*<span class=\"token operator\">/</span>&#125;</span>\ncam/book/long.file.name\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;myPath<span class=\"token operator\">##</span><span class=\"token operator\">/</span>*<span class=\"token operator\">/</span>&#125;</span>\nlong.file.name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，匹配的模式是<code>/*/</code>，其中<code>*</code>可以匹配任意数量的字符，所以最短匹配是<code>/home/</code>，最长匹配是<code>/home/cam/book/</code>。</p>\n<p>下面写法可以删除文件路径的目录部分，只留下文件名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span>/home/cam/book/long.file.name\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;path<span class=\"token operator\">##</span>*<span class=\"token operator\">/</span>&#125;</span>\nlong.file.name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，模式<code>*/</code>匹配目录部分，所以只返回文件名。</p>\n<p>下面再看一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">phone</span><span class=\"token operator\">=</span><span class=\"token string\">\"555-456-1414\"</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;phone<span class=\"token operator\">#</span>*-&#125;</span>\n<span class=\"token number\">456</span>-1414\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;phone<span class=\"token operator\">##</span>*-&#125;</span>\n<span class=\"token number\">1414</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果匹配不成功，则返回原始字符串。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">phone</span><span class=\"token operator\">=</span><span class=\"token string\">\"555-456-1414\"</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;phone<span class=\"token operator\">#</span>444&#125;</span>\n<span class=\"token number\">555</span>-456-1414<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，原始字符串里面无法匹配模式<code>444</code>，所以原样返回。</p>\n<p>如果要将头部匹配的部分，替换成其他内容，采用下面的写法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 模式必须出现在字符串的开头</span>\n<span class=\"token variable\">$&#123;variable<span class=\"token operator\">/</span><span class=\"token operator\">#</span>pattern<span class=\"token operator\">/</span>string&#125;</span>\n\n<span class=\"token comment\"># 示例</span>\n$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span>JPG.JPG\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token operator\">/</span><span class=\"token operator\">#</span>JPG<span class=\"token operator\">/</span>jpg&#125;</span>\njpg.JPG<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，被替换的<code>JPG</code>必须出现在字符串头部，所以返回<code>jpg.JPG</code>。</p>\n<p><strong>（2）字符串尾部的模式匹配。</strong></p>\n<p>以下两种语法可以检查字符串结尾，是否匹配给定的模式。如果匹配成功，就删除匹配的部分，返回剩下的部分。原始变量不会发生变化。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 如果 pattern 匹配变量 variable 的结尾，</span>\n<span class=\"token comment\"># 删除最短匹配（非贪婪匹配）的部分，返回剩余部分</span>\n<span class=\"token variable\">$&#123;variable<span class=\"token operator\">%</span>pattern&#125;</span>\n\n<span class=\"token comment\"># 如果 pattern 匹配变量 variable 的结尾，</span>\n<span class=\"token comment\"># 删除最长匹配（贪婪匹配）的部分，返回剩余部分</span>\n<span class=\"token variable\">$&#123;variable<span class=\"token operator\">%%</span>pattern&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面两种语法会删除变量字符串结尾的匹配部分（将其替换为空），返回剩下的部分。区别是一个是最短匹配（又称非贪婪匹配），另一个是最长匹配（又称贪婪匹配）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span>/home/cam/book/long.file.name\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;path<span class=\"token operator\">%</span>.*&#125;</span>\n/home/cam/book/long.file\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;path<span class=\"token operator\">%%</span>.*&#125;</span>\n/home/cam/book/long<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，匹配模式是<code>.*</code>，其中<code>*</code>可以匹配任意数量的字符，所以最短匹配是<code>.name</code>，最长匹配是<code>.file.name</code>。</p>\n<p>下面写法可以删除路径的文件名部分，只留下目录部分。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span>/home/cam/book/long.file.name\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;path<span class=\"token operator\">%</span><span class=\"token operator\">/</span>*&#125;</span>\n/home/cam/book<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，模式<code>/*</code>匹配文件名部分，所以只返回目录部分。</p>\n<p>下面的写法可以替换文件的后缀名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span>foo.png\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;file<span class=\"token operator\">%</span>.png&#125;</span>.jpg\nfoo.jpg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子将文件的后缀名，从<code>.png</code>改成了<code>.jpg</code>。</p>\n<p>下面再看一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">phone</span><span class=\"token operator\">=</span><span class=\"token string\">\"555-456-1414\"</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;phone<span class=\"token operator\">%</span>-*&#125;</span>\n<span class=\"token number\">555</span>-456\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;phone<span class=\"token operator\">%%</span>-*&#125;</span>\n<span class=\"token number\">555</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果匹配不成功，则返回原始字符串。</p>\n<p>如果要将尾部匹配的部分，替换成其他内容，采用下面的写法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 模式必须出现在字符串的结尾</span>\n<span class=\"token variable\">$&#123;variable<span class=\"token operator\">/</span><span class=\"token operator\">%</span>pattern<span class=\"token operator\">/</span>string&#125;</span>\n\n<span class=\"token comment\"># 示例</span>\n$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span>JPG.JPG\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token operator\">/</span><span class=\"token operator\">%</span>JPG<span class=\"token operator\">/</span>jpg&#125;</span>\nJPG.jpg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，被替换的<code>JPG</code>必须出现在字符串尾部，所以返回<code>JPG.jpg</code>。</p>\n<p><strong>（3）任意位置的模式匹配。</strong></p>\n<p>以下两种语法可以检查字符串内部，是否匹配给定的模式。如果匹配成功，就删除匹配的部分，换成其他的字符串返回。原始变量不会发生变化。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 如果 pattern 匹配变量 variable 的一部分，</span>\n<span class=\"token comment\"># 最长匹配（贪婪匹配）的那部分被 string 替换，但仅替换第一个匹配</span>\n<span class=\"token variable\">$&#123;variable<span class=\"token operator\">/</span>pattern<span class=\"token operator\">/</span>string&#125;</span>\n\n<span class=\"token comment\"># 如果 pattern 匹配变量 variable 的一部分，</span>\n<span class=\"token comment\"># 最长匹配（贪婪匹配）的那部分被 string 替换，所有匹配都替换</span>\n<span class=\"token variable\">$&#123;variable<span class=\"token operator\">/</span><span class=\"token operator\">/</span>pattern<span class=\"token operator\">/</span>string&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面两种语法都是最长匹配（贪婪匹配）下的替换，区别是前一个语法仅仅替换第一个匹配，后一个语法替换所有匹配。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span>/home/cam/foo/foo.name\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;path<span class=\"token operator\">/</span>foo<span class=\"token operator\">/</span>bar&#125;</span>\n/home/cam/bar/foo.name\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;path<span class=\"token operator\">/</span><span class=\"token operator\">/</span>foo<span class=\"token operator\">/</span>bar&#125;</span>\n/home/cam/bar/bar.name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，前一个命令只替换了第一个<code>foo</code>，后一个命令将两个<code>foo</code>都替换了。</p>\n<p>下面的例子将分隔符从<code>:</code>换成换行符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> -e <span class=\"token variable\">$&#123;<span class=\"token environment constant\">PATH</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span>'\\n'&#125;</span>\n/usr/local/bin\n/usr/bin\n/bin\n<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>echo</code>命令的<code>-e</code>参数，表示将替换后的字符串的<code>\\n</code>字符，解释为换行符。</p>\n<p>模式部分可以使用通配符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">phone</span><span class=\"token operator\">=</span><span class=\"token string\">\"555-456-1414\"</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;phone<span class=\"token operator\">/</span>5?4<span class=\"token operator\">/</span>-&#125;</span>\n<span class=\"token number\">55</span>-56-1414<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子将<code>5-4</code>替换成<code>-</code>。</p>\n<p>如果省略了<code>string</code>部分，那么就相当于匹配的部分替换成空字符串，即删除匹配的部分。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span>/home/cam/foo/foo.name\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;path<span class=\"token operator\">/</span>.*<span class=\"token operator\">/</span>&#125;</span>\n/home/cam/foo/foo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，第二个斜杠后面的<code>string</code>部分省略了，所以模式<code>.*</code>匹配的部分<code>.name</code>被删除后返回。</p>\n<p>前面提到过，这个语法还有两种扩展形式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 模式必须出现在字符串的开头</span>\n<span class=\"token variable\">$&#123;variable<span class=\"token operator\">/</span><span class=\"token operator\">#</span>pattern<span class=\"token operator\">/</span>string&#125;</span>\n\n<span class=\"token comment\"># 模式必须出现在字符串的结尾</span>\n<span class=\"token variable\">$&#123;variable<span class=\"token operator\">/</span><span class=\"token operator\">%</span>pattern<span class=\"token operator\">/</span>string&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"改变大小写\"><a href=\"#改变大小写\" class=\"headerlink\" title=\"改变大小写\"></a>改变大小写</h2><p>下面的语法可以改变变量的大小写。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 转为大写</span>\n<span class=\"token variable\">$&#123;varname<span class=\"token operator\">^^</span>&#125;</span>\n\n<span class=\"token comment\"># 转为小写</span>\n<span class=\"token variable\">$&#123;varname<span class=\"token operator\">,,</span>&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span>heLLo\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token operator\">^^</span>&#125;</span>\nHELLO\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token operator\">,,</span>&#125;</span>\nhello<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"算术运算\"><a href=\"#算术运算\" class=\"headerlink\" title=\"算术运算\"></a>算术运算</h1><h2 id=\"算术表达式\"><a href=\"#算术表达式\" class=\"headerlink\" title=\"算术表达式\"></a>算术表达式</h2><p><code>((...))</code>语法可以进行整数的算术运算。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token variable\"><span class=\"token punctuation\">((</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">))</span></span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$foo</span>\n<span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>((...))</code>会自动忽略内部的空格，所以下面的写法都正确，得到同样的结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">))</span></span>\n$ <span class=\"token variable\"><span class=\"token punctuation\">((</span> <span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token punctuation\">))</span></span>\n$ <span class=\"token variable\"><span class=\"token punctuation\">((</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">))</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这个语法不返回值，命令执行的结果根据算术运算的结果而定。只要算术结果不是<code>0</code>，命令就算执行成功。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token variable\"><span class=\"token punctuation\">((</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">))</span></span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span>\n<span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>3 + 2</code>的结果是5，命令就算执行成功，环境变量<code>$?</code>为<code>0</code>。</p>\n<p>如果算术结果为<code>0</code>，命令就算执行失败。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token variable\"><span class=\"token punctuation\">((</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">))</span></span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span>\n<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>3 - 3</code>的结果是<code>0</code>，环境变量<code>$?</code>为<code>1</code>，表示命令执行失败。</p>\n<p>如果要读取算术运算的结果，需要在<code>((...))</code>前面加上美元符号<code>$((...))</code>，使其变成算术表达式，返回算术运算的值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>((...))</code>语法支持的算术运算符如下。</p>\n<ul>\n<li><code>+</code>：加法</li>\n<li><code>-</code>：减法</li>\n<li><code>*</code>：乘法</li>\n<li><code>/</code>：除法（整除）</li>\n<li><code>%</code>：余数</li>\n<li><code>**</code>：指数</li>\n<li><code>++</code>：自增运算（前缀或后缀）</li>\n<li><code>--</code>：自减运算（前缀或后缀）</li>\n</ul>\n<p>注意，除法运算符的返回结果总是整数，比如<code>5</code>除以<code>2</code>，得到的结果是<code>2</code>，而不是<code>2.5</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>++</code>和<code>--</code>这两个运算符有前缀和后缀的区别。作为前缀是先运算后返回值，作为后缀是先返回值后运算。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token number\">0</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>i<span class=\"token operator\">++</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">0</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token number\">1</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token operator\">++</span>i<span class=\"token variable\">))</span></span>\n<span class=\"token number\">2</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>++</code>作为后缀是先返回值，执行<code>echo</code>命令，再进行自增运算；作为前缀则是先进行自增运算，再返回值执行<code>echo</code>命令。</p>\n<p><code>$((...))</code>内部可以用圆括号改变运算顺序。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token variable\">))</span></span>\n<span class=\"token number\">20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，内部的圆括号让加法先于乘法执行。</p>\n<p><code>$((...))</code>结构可以嵌套。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">75</span>\n<span class=\"token comment\"># 等同于</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token variable\">$((</span><span class=\"token number\">5</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token variable\">))</span></span> * <span class=\"token number\">3</span><span class=\"token punctuation\">))</span>\n<span class=\"token number\">75</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个语法只能计算整数，否则会报错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 报错</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">1.5</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\nbash: 语法错误<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>$((...))</code>的圆括号之中，不需要在变量名之前加上<code>$</code>，不过加上也不报错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">number</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，变量<code>number</code>前面有没有美元符号，结果都是一样的。</p>\n<p>如果在<code>$((...))</code>里面使用字符串，Bash 会认为那是一个变量名。如果不存在同名变量，Bash 就会将其作为空值，因此不会报错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> \"hello\" <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">2</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> \"hello\" <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>&quot;hello&quot;</code>会被当作变量名，返回空值，而<code>$((...))</code>会将空值当作<code>0</code>，所以乘法的运算结果就是<code>0</code>。同理，如果<code>$((...))</code>里面使用不存在的变量，也会当作<code>0</code>处理。</p>\n<p>如果一个变量的值为字符串，跟上面的处理逻辑是一样的。即该字符串如果不对应已存在的变量，在<code>$((...))</code>里面会被当作空值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span>hello\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> foo <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，变量<code>foo</code>的值是<code>hello</code>，而<code>hello</code>也会被看作变量名。这使得有可能写出动态替换的代码。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span>hello\n$ <span class=\"token assign-left variable\">hello</span><span class=\"token operator\">=</span><span class=\"token number\">3</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> foo <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token variable\">))</span></span>\n<span class=\"token number\">5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>foo + 2</code>取决于变量<code>hello</code>的值。</p>\n<p>最后，<code>$[...]</code>是以前的语法，也可以做整数运算，不建议使用。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> $<span class=\"token punctuation\">[</span><span class=\"token number\">2</span>+2<span class=\"token punctuation\">]</span>\n<span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"数值的进制\"><a href=\"#数值的进制\" class=\"headerlink\" title=\"数值的进制\"></a>数值的进制</h2><p>Bash 的数值默认都是十进制，但是在算术表达式中，也可以使用其他进制。</p>\n<ul>\n<li><code>number</code>：没有任何特殊表示法的数字是十进制数（以10为底）。</li>\n<li><code>0number</code>：八进制数。</li>\n<li><code>0xnumber</code>：十六进制数。</li>\n<li><code>base#number</code>：<code>base</code>进制的数。</li>\n</ul>\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">0xff</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">255</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">2</span>#<span class=\"token number\">11111111</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">255</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>0xff</code>是十六进制数，<code>2#11111111</code>是二进制数。</p>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><p><code>$((...))</code>支持以下的二进制位运算符。</p>\n<ul>\n<li><code>&lt;&lt;</code>：位左移运算，把一个数字的所有位向左移动指定的位。</li>\n<li><code>&gt;&gt;</code>：位右移运算，把一个数字的所有位向右移动指定的位。</li>\n<li><code>&amp;</code>：位的“与”运算，对两个数字的所有位执行一个<code>AND</code>操作。</li>\n<li><code>|</code>：位的“或”运算，对两个数字的所有位执行一个<code>OR</code>操作。</li>\n<li><code>~</code>：位的“否”运算，对一个数字的所有位取反。</li>\n<li><code>^</code>：位的异或运算（exclusive or），对两个数字的所有位执行一个异或操作。</li>\n</ul>\n<p>下面是右移运算符<code>&gt;&gt;</code>的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">16</span><span class=\"token operator\">>></span><span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面是左移运算符<code>&lt;&lt;</code>的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">16</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面是<code>17</code>（二进制<code>10001</code>）和<code>3</code>（二进制<code>11</code>）的各种二进制运算的结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">17</span><span class=\"token operator\">&amp;</span><span class=\"token number\">3</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">1</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">17</span><span class=\"token operator\">|</span><span class=\"token number\">3</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">19</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">17</span><span class=\"token operator\">^</span><span class=\"token number\">3</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">18</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h2><p><code>$((...))</code>支持以下的逻辑运算符。</p>\n<ul>\n<li><code>&lt;</code>：小于</li>\n<li><code>&gt;</code>：大于</li>\n<li><code>&lt;=</code>：小于或相等</li>\n<li><code>&gt;=</code>：大于或相等</li>\n<li><code>==</code>：相等</li>\n<li><code>!=</code>：不相等</li>\n<li><code>&amp;&amp;</code>：逻辑与</li>\n<li><code>||</code>：逻辑或</li>\n<li><code>!</code>：逻辑否</li>\n<li><code>expr1?expr2:expr3</code>：三元条件运算符。若表达式<code>expr1</code>的计算结果为非零值（算术真），则执行表达式<code>expr2</code>，否则执行表达式<code>expr3</code>。</li>\n</ul>\n<p>如果逻辑表达式为真，返回<code>1</code>，否则返回<code>0</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">1</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">))</span></span>\n<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>三元运算符执行一个单独的逻辑测试。它用起来类似于<code>if/then/else</code>语句。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>a<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">1</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>a<span class=\"token operator\">></span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，第一个表达式为真时，返回第二个表达式的值，否则返回第三个表达式的值。</p>\n<h2 id=\"赋值运算\"><a href=\"#赋值运算\" class=\"headerlink\" title=\"赋值运算\"></a>赋值运算</h2><p>算术表达式<code>$((...))</code>可以执行赋值运算。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">1</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$a</span>\n<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>a=1</code>对变量<code>a</code>进行赋值。这个式子本身也是一个表达式，返回值就是等号右边的值。</p>\n<p><code>$((...))</code>支持的赋值运算符，有以下这些。</p>\n<ul>\n<li><code>parameter = value</code>：简单赋值。</li>\n<li><code>parameter += value</code>：等价于<code>parameter = parameter + value</code>。</li>\n<li><code>parameter -= value</code>：等价于<code>parameter = parameter – value</code>。</li>\n<li><code>parameter *= value</code>：等价于<code>parameter = parameter * value</code>。</li>\n<li><code>parameter /= value</code>：等价于<code>parameter = parameter / value</code>。</li>\n<li><code>parameter %= value</code>：等价于<code>parameter = parameter % value</code>。</li>\n<li><code>parameter &lt;&lt;= value</code>：等价于<code>parameter = parameter &lt;&lt; value</code>。</li>\n<li><code>parameter &gt;&gt;= value</code>：等价于<code>parameter = parameter &gt;&gt; value</code>。</li>\n<li><code>parameter &amp;= value</code>：等价于<code>parameter = parameter &amp; value</code>。</li>\n<li><code>parameter |= value</code>：等价于<code>parameter = parameter | value</code>。</li>\n<li><code>parameter ^= value</code>：等价于<code>parameter = parameter ^ value</code>。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>foo<span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果在表达式内部赋值，可以放在圆括号中，否则会报错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> a<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">))</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"求值运算\"><a href=\"#求值运算\" class=\"headerlink\" title=\"求值运算\"></a>求值运算</h2><p>逗号<code>,</code>在<code>$((...))</code>内部是求值运算符，执行前后两个表达式，并返回后一个表达式的值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token variable\">))</span></span>\n<span class=\"token number\">12</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$foo</span>\n<span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，逗号前后两个表达式都会执行，然后返回后一个表达式的值<code>12</code>。</p>\n<h2 id=\"expr-命令\"><a href=\"#expr-命令\" class=\"headerlink\" title=\"expr 命令\"></a>expr 命令</h2><p><code>expr</code>命令支持算术运算，可以不使用<code>((...))</code>语法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">expr</span> <span class=\"token number\">3</span> + <span class=\"token number\">2</span>\n<span class=\"token number\">5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>expr</code>命令支持变量替换。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">3</span>\n$ <span class=\"token function\">expr</span> <span class=\"token variable\">$foo</span> + <span class=\"token number\">2</span>\n<span class=\"token number\">5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>expr</code>命令也不支持非整数参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">expr</span> <span class=\"token number\">3.5</span> + <span class=\"token number\">2</span>\nexpr: 非整数参数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，如果有非整数的运算，<code>expr</code>命令就报错了。</p>\n<h2 id=\"let-命令-1\"><a href=\"#let-命令-1\" class=\"headerlink\" title=\"let 命令\"></a>let 命令</h2><p><code>let</code>命令用于将算术运算的结果，赋予一个变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">let</span> <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>+3\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$x</span>\n<span class=\"token number\">5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，变量<code>x</code>等于<code>2+3</code>的运算结果。</p>\n<p>注意，<code>x=2+3</code>这个式子里面不能有空格，否则会报错。<code>let</code>命令的详细用法参见《变量》一章。</p>\n<h1 id=\"行操作\"><a href=\"#行操作\" class=\"headerlink\" title=\"行操作\"></a>行操作</h1><h2 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Bash 内置了 Readline 库，具有这个库提供的很多“行操作”功能，比如命令的自动补全，可以大大加快操作速度。</p>\n<p>这个库默认采用 Emacs 快捷键，也可以改成 Vi 快捷键。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">set</span> -o <span class=\"token function\">vi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面的命令可以改回 Emacs 快捷键。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">set</span> -o emacs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果想永久性更改编辑模式（Emacs / Vi），可以将命令写在<code>~/.inputrc</code>文件，这个文件是 Readline 的配置文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">set</span> editing-mode <span class=\"token function\">vi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>本章介绍的快捷键都属于 Emacs 模式。Vi 模式的快捷键，读者可以参考 Vi 编辑器的教程。</p>\n<p>Bash 默认开启这个库，但是允许关闭。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> --noediting<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>--noediting</code>参数关闭了 Readline 库，启动的 Bash 就不带有行操作功能。</p>\n<h2 id=\"光标移动\"><a href=\"#光标移动\" class=\"headerlink\" title=\"光标移动\"></a>光标移动</h2><p>Readline 提供快速移动光标的快捷键。</p>\n<ul>\n<li><code>Ctrl + a</code>：移到行首。</li>\n<li><code>Ctrl + b</code>：向行首移动一个字符，与左箭头作用相同。</li>\n<li><code>Ctrl + e</code>：移到行尾。</li>\n<li><code>Ctrl + f</code>：向行尾移动一个字符，与右箭头作用相同。</li>\n<li><code>Alt + f</code>：移动到当前单词的词尾。</li>\n<li><code>Alt + b</code>：移动到当前单词的词首。</li>\n</ul>\n<p>上面快捷键的 Alt 键，也可以用 ESC 键代替。</p>\n<h2 id=\"清除屏幕\"><a href=\"#清除屏幕\" class=\"headerlink\" title=\"清除屏幕\"></a>清除屏幕</h2><p><code>Ctrl + l</code>快捷键可以清除屏幕，即将当前行移到屏幕的第一行，与<code>clear</code>命令作用相同。</p>\n<h2 id=\"编辑操作\"><a href=\"#编辑操作\" class=\"headerlink\" title=\"编辑操作\"></a>编辑操作</h2><p>下面的快捷键可以编辑命令行内容。</p>\n<ul>\n<li><code>Ctrl + d</code>：删除光标位置的字符（delete）。</li>\n<li><code>Ctrl + w</code>：删除光标前面的单词。</li>\n<li><code>Ctrl + t</code>：光标位置的字符与它前面一位的字符交换位置（transpose）。</li>\n<li><code>Alt + t</code>：光标位置的词与它前面一位的词交换位置（transpose）。</li>\n<li><code>Alt + l</code>：将光标位置至词尾转为小写（lowercase）。</li>\n<li><code>Alt + u</code>：将光标位置至词尾转为大写（uppercase）。</li>\n</ul>\n<p>使用<code>Ctrl + d</code>的时候，如果当前行没有任何字符，会导致退出当前 Shell，所以要小心。</p>\n<p>剪切和粘贴快捷键如下。</p>\n<ul>\n<li><code>Ctrl + k</code>：剪切光标位置到行尾的文本。</li>\n<li><code>Ctrl + u</code>：剪切光标位置到行首的文本。</li>\n<li><code>Alt + d</code>：剪切光标位置到词尾的文本。</li>\n<li><code>Alt + Backspace</code>：剪切光标位置到词首的文本。</li>\n<li><code>Ctrl + y</code>：在光标位置粘贴文本。</li>\n</ul>\n<p>同样地，Alt 键可以用 Esc 键代替。</p>\n<h2 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h2><p>命令输入到一半的时候，可以按一下 Tab 键，Readline 会自动补全命令或路径。比如，输入<code>cle</code>，再按下 Tab 键，Bash 会自动将这个命令补全为<code>clear</code>。</p>\n<p>如果符合条件的命令或路径有多个，就需要连续按两次 Tab 键，Bash 会提示所有符合条件的命令或路径。</p>\n<p>除了命令或路径，Tab 还可以补全其他值。如果一个值以<code>$</code>开头，则按下 Tab 键会补全变量；如果以<code>~</code>开头，则补全用户名；如果以<code>@</code>开头，则补全主机名（hostname），主机名以列在<code>/etc/hosts</code>文件里面的主机为准。</p>\n<p>自动补全相关的快捷键如下。</p>\n<ul>\n<li>Tab：完成自动补全。</li>\n<li><code>Alt + ?</code>：列出可能的补全，与连按两次 Tab 键作用相同。</li>\n<li><code>Alt + /</code>：尝试文件路径补全。</li>\n<li><code>Ctrl + x /</code>：先按<code>Ctrl + x</code>，再按<code>/</code>，等同于<code>Alt + ?</code>，列出可能的文件路径补全。</li>\n<li><code>Alt + !</code>：命令补全。</li>\n<li><code>Ctrl + x !</code>：先按<code>Ctrl + x</code>，再按<code>!</code>，等同于<code>Alt + !</code>，命令补全。</li>\n<li><code>Alt + ~</code>：用户名补全。</li>\n<li><code>Ctrl + x ~</code>：先按<code>Ctrl + x</code>，再按<code>~</code>，等同于<code>Alt + ~</code>，用户名补全。</li>\n<li><code>Alt + $</code>：变量名补全。</li>\n<li><code>Ctrl + x $</code>：先按<code>Ctrl + x</code>，再按<code>$</code>，等同于<code>Alt + $</code>，变量名补全。</li>\n<li><code>Alt + @</code>：主机名补全。</li>\n<li><code>Ctrl + x @</code>：先按<code>Ctrl + x</code>，再按<code>@</code>，等同于<code>Alt + @</code>，主机名补全。</li>\n<li><code>Alt + *</code>：在命令行一次性插入所有可能的补全。</li>\n<li><code>Alt + Tab</code>：尝试用<code>.bash_history</code>里面以前执行命令，进行补全。</li>\n</ul>\n<p>上面的<code>Alt</code>键也可以用 ESC 键代替。</p>\n<h2 id=\"操作历史\"><a href=\"#操作历史\" class=\"headerlink\" title=\"操作历史\"></a>操作历史</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>Bash 会保留用户的操作历史，即用户输入的每一条命令都会记录。有了操作历史以后，就可以使用方向键的<code>↑</code>和<code>↓</code>，快速浏览上一条和下一条命令。</p>\n<p>退出当前 Shell 的时候，Bash 会将用户在当前 Shell 的操作历史写入<code>~/.bash_history</code>文件，该文件默认储存500个操作。</p>\n<p>环境变量<code>HISTFILE</code>总是指向这个文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$HISTFILE</span>\n/home/me/.bash_history<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>history</code>命令会输出这个文件的全部内容。用户可以看到最近执行过的所有命令，每条命令之前都有行号。越近的命令，排在越后面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">history</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token number\">498</span> <span class=\"token builtin class-name\">echo</span> Goodbye\n<span class=\"token number\">499</span> <span class=\"token function\">ls</span> ~\n<span class=\"token number\">500</span> <span class=\"token builtin class-name\">cd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输入命令时，按下<code>Ctrl + r</code>快捷键，就可以搜索操作历史，选择以前执行过的命令。这时键入命令的开头部分，Shell 就会自动在历史文件中，查询并显示最近一条匹配的结果，这时按下回车键，就会执行那条命令。</p>\n<p>下面的方法可以快速执行以前执行过的命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> Hello World\nHello World\n\n$ <span class=\"token builtin class-name\">echo</span> Goodbye\nGoodbye\n\n$ <span class=\"token operator\">!</span>e\n<span class=\"token builtin class-name\">echo</span> Goodbye\nGoodbye<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>!e</code>表示找出操作历史之中，最近的那一条以<code>e</code>开头的命令并执行。Bash 会先输出那一条命令<code>echo Goodbye</code>，然后直接执行。</p>\n<p>同理，<code>!echo</code>也会执行最近一条以<code>echo</code>开头的命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token operator\">!</span>echo\n<span class=\"token builtin class-name\">echo</span> Goodbye\nGoodbye\n\n$ <span class=\"token operator\">!</span>echo H\n<span class=\"token builtin class-name\">echo</span> Goodbye H\nGoodbye H\n\n$ <span class=\"token operator\">!</span>echo H G\n<span class=\"token builtin class-name\">echo</span> Goodbye H G\nGoodbye H G<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，<code>!string</code>语法只会匹配命令，不会匹配参数。所以<code>!echo H</code>不会执行<code>echo Hello World</code>，而是会执行<code>echo Goodbye</code>，并把参数<code>H</code>附加在这条命令之后。同理，<code>!echo H G</code>也是等同于<code>echo Goodbye</code>命令之后附加<code>H G</code>。</p>\n<p>由于<code>!string</code>语法会扩展成以前执行过的命令，所以含有<code>!</code>的字符串放在双引号里面，必须非常小心，如果它后面有非空格的字符，就很有可能报错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"I say:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>hello!<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span>\nbash: <span class=\"token operator\">!</span><span class=\"token punctuation\">\\</span>: event not found<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面的命令会报错，原因是感叹号后面是一个反斜杠，Bash 会尝试寻找，以前是否执行过反斜杠开头的命令，一旦找不到就会报错。解决方法就是在感叹号前面，也加上反斜杠。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"I say:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>hello\\!<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span>\nI say:<span class=\"token string\">\"hello\\!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"history-命令\"><a href=\"#history-命令\" class=\"headerlink\" title=\"history 命令\"></a>history 命令</h3><p>前面说过，<code>history</code>命令能显示操作历史，即<code>.bash_history</code>文件的内容。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">history</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用该命令，而不是直接读取<code>.bash_history</code>文件的好处是，它会在所有的操作前加上行号，最近的操作在最后面，行号最大。</p>\n<p>通过定制环境变量<code>HISTTIMEFORMAT</code>，可以显示每个操作的时间。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HISTTIMEFORMAT</span><span class=\"token operator\">=</span><span class=\"token string\">'%F %T  '</span>\n$ <span class=\"token function\">history</span>\n<span class=\"token number\">1</span>  <span class=\"token number\">2013</span>-06-09 <span class=\"token number\">10</span>:40:12   <span class=\"token function\">cat</span> /etc/issue\n<span class=\"token number\">2</span>  <span class=\"token number\">2013</span>-06-09 <span class=\"token number\">10</span>:40:12   <span class=\"token function\">clear</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>%F</code>相当于<code>%Y - %m - %d</code>，<code>%T</code>相当于<code> %H : %M : %S</code>。</p>\n<p>只要设置<code>HISTTIMEFORMAT</code>这个环境变量，就会在<code>.bash_history</code>文件保存命令的执行时间戳。如果不设置，就不会保存时间戳。</p>\n<p>环境变量<code>HISTSIZE</code>设置保存历史操作的数量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">HISTSIZE</span></span><span class=\"token operator\">=</span><span class=\"token number\">10000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令设置保存过去10000条操作历史。</p>\n<p>如果不希望保存本次操作的历史，可以设置<code>HISTSIZE</code>等于0。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">HISTSIZE</span></span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果<code>HISTSIZE=0</code>写入用户主目录的<code>~/.bashrc</code>文件，那么就不会保留该用户的操作历史。如果写入<code>/etc/profile</code>，整个系统都不会保留操作历史。</p>\n<p>环境变量<code>HISTIGNORE</code>可以设置哪些命令不写入操作历史。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HISTIGNORE</span><span class=\"token operator\">=</span><span class=\"token string\">'pwd:ls:exit'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例设置，<code>pwd</code>、<code>ls</code>、<code>exit</code>这三个命令不写入操作历史。</p>\n<p>如果想搜索某个以前执行的命令，可以配合<code>grep</code>命令搜索操作历史。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">history</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> /usr/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令返回<code>.bash_history</code>文件里面，那些包含<code>/usr/bin</code>的命令。</p>\n<p>操作历史的每一条记录都有编号。知道了命令的编号以后，可以用<code>感叹号 + 编号</code>执行该命令。如果想要执行<code>.bash_history</code>里面的第8条命令，可以像下面这样操作。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token operator\">!</span><span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>history</code>命令的<code>-c</code>参数可以清除操作历史。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">history</span> -c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"相关快捷键\"><a href=\"#相关快捷键\" class=\"headerlink\" title=\"相关快捷键\"></a>相关快捷键</h3><p>下面是一些与操作历史相关的快捷键。</p>\n<ul>\n<li><code>Ctrl + p</code>：显示上一个命令，与向上箭头效果相同（previous）。</li>\n<li><code>Ctrl + n</code>：显示下一个命令，与向下箭头效果相同（next）。</li>\n<li><code>Alt + &lt;</code>：显示第一个命令。</li>\n<li><code>Alt + &gt;</code>：显示最后一个命令，即当前的命令。</li>\n<li><code>Ctrl + o</code>：执行历史文件里面的当前条目，并自动显示下一条命令。这对重复执行某个序列的命令很有帮助。</li>\n</ul>\n<p>感叹号<code>!</code>的快捷键如下。</p>\n<ul>\n<li><code>!!</code>：执行上一个命令。</li>\n<li><code>!n</code>：<code>n</code>为数字，执行历史文件里面行号为<code>n</code>的命令。</li>\n<li><code>!-n</code>：执行当前命令之前<code>n</code>条的命令。</li>\n<li><code>!string</code>：执行最近一个以指定字符串<code>string</code>开头的命令。</li>\n<li><code>!?string</code>：执行最近一条包含字符串<code>string</code>的命令。</li>\n<li><code>!$</code>：代表上一个命令的最后一个参数。</li>\n<li><code>!*</code>：代表上一个命令的所有参数，即除了命令以外的所有部分。</li>\n<li><code>^string1^string2</code>：执行最近一条包含<code>string1</code>的命令，将其替换成<code>string2</code>。</li>\n</ul>\n<p>下面是<code>!$</code>和<code>!*</code>的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cp</span> a.txt b.txt\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">!</span>$\nb.txt\n\n$ <span class=\"token function\">cp</span> a.txt b.txt\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">!</span>*\na.txt b.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>!$</code>代表上一个命令的最后一个参数（<code>b.txt</code>），<code>!*</code>代表上一个命令的所有参数（<code>a.txt b.txt</code>）。</p>\n<p>下面是<code>^string1^string2</code>的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">rm</span> /var/log/httpd/error.log\n$ ^error^access\n<span class=\"token function\">rm</span> /var/log/httpd/access.log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>^error^access</code>将最近一条含有<code>error</code>的命令里面的<code>error</code>，替换成<code>access</code>。</p>\n<p>如果希望确定是什么命令，然后再执行，可以打开<code>histverify</code>选项。这样的话，使用<code>!</code>快捷键所产生的命令，会先打印出来，等到用户按下回车键后再执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> -s histverify<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"其他快捷键\"><a href=\"#其他快捷键\" class=\"headerlink\" title=\"其他快捷键\"></a>其他快捷键</h2><ul>\n<li><code>Ctrl + j</code>：等同于回车键（LINEFEED）。</li>\n<li><code>Ctrl + m</code>：等同于回车键（CARRIAGE RETURN）。</li>\n<li><code>Ctrl + o</code>：等同于回车键，并展示操作历史的下一个命令。 </li>\n<li><code>Ctrl + v</code>：将下一个输入的特殊字符变成字面量，比如回车变成<code>^M</code>。</li>\n<li><code>Ctrl + [</code>：等同于 ESC。 </li>\n<li><code>Alt + .</code>：插入上一个命令的最后一个词。</li>\n<li><code>Alt + _</code>：等同于<code>Alt + .</code>。</li>\n</ul>\n<p>上面的<code>Alt + .</code>快捷键，对于很长的文件路径，有时会非常方便。因为 Unix 命令的最后一个参数通常是文件路径。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> foo_bar\n$ <span class=\"token builtin class-name\">cd</span> <span class=\"token comment\">#按下 Alt + .</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，在<code>cd</code>命令后按下<code>Alt + .</code>，就会自动插入<code>foo_bar</code>。</p>\n<h1 id=\"目录堆栈\"><a href=\"#目录堆栈\" class=\"headerlink\" title=\"目录堆栈\"></a>目录堆栈</h1><p>为了方便用户在不同目录之间切换，Bash 提供了目录堆栈功能。</p>\n<h2 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd -\"></a>cd -</h2><p>Bash 可以记忆用户进入过的目录。默认情况下，只记忆前一次所在的目录，<code>cd -</code>命令可以返回前一次的目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 当前目录是 /path/to/foo</span>\n$ <span class=\"token builtin class-name\">cd</span> bar\n\n<span class=\"token comment\"># 重新回到 /path/to/foo</span>\n$ <span class=\"token builtin class-name\">cd</span> -<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，用户原来所在的目录是<code>/path/to/foo</code>，进入子目录<code>bar</code>以后，使用<code>cd -</code>可以回到原来的目录。</p>\n<h2 id=\"pushd，popd\"><a href=\"#pushd，popd\" class=\"headerlink\" title=\"pushd，popd\"></a>pushd，popd</h2><p>如果希望记忆多重目录，可以使用<code>pushd</code>命令和<code>popd</code>命令。它们用来操作目录堆栈。</p>\n<p><code>pushd</code>命令的用法类似<code>cd</code>命令，可以进入指定的目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">pushd</span> <span class=\"token function\">dirname</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令会进入目录<code>dirname</code>，并将该目录放入堆栈。</p>\n<p>第一次使用<code>pushd</code>命令时，会将当前目录先放入堆栈，然后将所要进入的目录也放入堆栈，位置在前一个记录的上方。以后每次使用<code>pushd</code>命令，都会将所要进入的目录，放在堆栈的顶部。</p>\n<p><code>popd</code>命令不带有参数时，会移除堆栈的顶部记录，并进入新的堆栈顶部目录（即原来的第二条目录）。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 当前处在主目录，堆栈为空</span>\n$ <span class=\"token builtin class-name\">pwd</span>\n/home/me\n\n<span class=\"token comment\"># 进入 /home/me/foo</span>\n<span class=\"token comment\"># 当前堆栈为 /home/me/foo /home/me</span>\n$ <span class=\"token function\">pushd</span> ~/foo\n\n<span class=\"token comment\"># 进入 /etc</span>\n<span class=\"token comment\"># 当前堆栈为 /etc /home/me/foo /home/me</span>\n$ <span class=\"token function\">pushd</span> /etc\n\n<span class=\"token comment\"># 进入 /home/me/foo</span>\n<span class=\"token comment\"># 当前堆栈为 /home/me/foo /home/me</span>\n$ <span class=\"token function\">popd</span>\n\n<span class=\"token comment\"># 进入 /home/me</span>\n<span class=\"token comment\"># 当前堆栈为 /home/me</span>\n$ <span class=\"token function\">popd</span>\n\n<span class=\"token comment\"># 目录不变，当前堆栈为空</span>\n$ <span class=\"token function\">popd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这两个命令的参数如下。</p>\n<p><strong>（1）-n 参数</strong></p>\n<p><code>-n</code>的参数表示仅操作堆栈，不改变目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">popd</span> -n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令仅删除堆栈顶部的记录，不改变目录，执行完成后还停留在当前目录。</p>\n<p><strong>（2）整数参数</strong></p>\n<p>这两个命令还可以接受一个整数作为参数，该整数表示堆栈中指定位置的记录（从0开始），作为操作对象。这时不会切换目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 从栈顶算起的3号目录（从0开始），移动到栈顶</span>\n$ <span class=\"token function\">pushd</span> +3\n\n<span class=\"token comment\"># 从栈底算起的3号目录（从0开始），移动到栈顶</span>\n$ <span class=\"token function\">pushd</span> -3\n\n<span class=\"token comment\"># 删除从栈顶算起的3号目录（从0开始）</span>\n$ <span class=\"token function\">popd</span> +3\n\n<span class=\"token comment\"># 删除从栈底算起的3号目录（从0开始）</span>\n$ <span class=\"token function\">popd</span> -3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子的整数编号都是从0开始计算，<code>popd +0</code>是删除第一个目录，<code>popd +1</code>是删除第二个，<code>popd -0</code>是删除最后一个目录，，<code>popd -1</code>是删除倒数第二个。</p>\n<p><strong>（3）目录参数</strong></p>\n<p><code>pushd</code>可以接受一个目录作为参数，表示将该目录放到堆栈顶部，并进入该目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">pushd</span> <span class=\"token function\">dir</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>popd</code>没有这个参数。</p>\n<h2 id=\"dirs-命令\"><a href=\"#dirs-命令\" class=\"headerlink\" title=\"dirs 命令\"></a>dirs 命令</h2><p><code>dirs</code>命令可以显示目录堆栈的内容，一般用来查看<code>pushd</code>和<code>popd</code>操作后的结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">dirs</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它有以下参数。</p>\n<ul>\n<li><code>-c</code>：清空目录栈。</li>\n<li><code>-l</code>：用户主目录不显示波浪号前缀，而打印完整的目录。</li>\n<li><code>-p</code>：每行一个条目打印目录栈，默认是打印在一行。</li>\n<li><code>-v</code>：每行一个条目，每个条目之前显示位置编号（从0开始）。</li>\n<li><code>+N</code>：<code>N</code>为整数，表示显示堆顶算起的第 N 个目录，从零开始。</li>\n<li><code>-N</code>：<code>N</code>为整数，表示显示堆底算起的第 N 个目录，从零开始。</li>\n</ul>\n<h1 id=\"脚本入门\"><a href=\"#脚本入门\" class=\"headerlink\" title=\"脚本入门\"></a>脚本入门</h1><p>脚本（script）就是包含一系列命令的一个文本文件。Shell 读取这个文件，依次执行里面的所有命令，就好像这些命令直接输入到命令行一样。所有能够在命令行完成的任务，都能够用脚本完成。</p>\n<p>脚本的好处是可以重复使用，也可以指定在特定场合自动调用，比如系统启动或关闭时自动执行脚本。</p>\n<h2 id=\"Shebang-行\"><a href=\"#Shebang-行\" class=\"headerlink\" title=\"Shebang 行\"></a>Shebang 行</h2><p>脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以<code>#!</code>字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。</p>\n<p><code>#!</code>后面就是脚本解释器的位置，Bash 脚本的解释器一般是<code>/bin/sh</code>或<code>/bin/bash</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token comment\"># 或者</span>\n<span class=\"token comment\">#!/bin/bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>#!</code>与脚本解释器之间有没有空格，都是可以的。</p>\n<p>如果 Bash 解释器不放在目录<code>/bin</code>，脚本就无法执行了。为了保险，可以写成下面这样。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令使用<code>env</code>命令（这个命令总是在<code>/usr/bin</code>目录），返回 Bash 可执行文件的位置。<code>env</code>命令的详细介绍，请看后文。</p>\n<p>Shebang 行不是必需的，但是建议加上这行。如果缺少该行，就需要手动将脚本传给解释器。举例来说，脚本是<code>script.sh</code>，有 Shebang 行的时候，可以直接调用执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./script.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，<code>script.sh</code>是脚本文件名。脚本通常使用<code>.sh</code>后缀名，不过这不是必需的。</p>\n<p>如果没有 Shebang 行，就只能手动将脚本传给解释器来执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ /bin/sh ./script.sh\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token function\">bash</span> ./script.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"执行权限和路径\"><a href=\"#执行权限和路径\" class=\"headerlink\" title=\"执行权限和路径\"></a>执行权限和路径</h2><p>前面说过，只要指定了 Shebang 行的脚本，可以直接执行。这有一个前提条件，就是脚本需要有执行权限。可以使用下面的命令，赋予脚本执行权限。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 给所有用户执行权限</span>\n$ <span class=\"token function\">chmod</span> +x script.sh\n\n<span class=\"token comment\"># 给所有用户读权限和执行权限</span>\n$ <span class=\"token function\">chmod</span> +rx script.sh\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token function\">chmod</span> <span class=\"token number\">755</span> script.sh\n\n<span class=\"token comment\"># 只给脚本拥有者读权限和执行权限</span>\n$ <span class=\"token function\">chmod</span> u+rx script.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>脚本的权限通常设为<code>755</code>（拥有者有所有权限，其他人有读和执行权限）或者<code>700</code>（只有拥有者可以执行）。</p>\n<p>除了执行权限，脚本调用时，一般需要指定脚本的路径（比如<code>path/script.sh</code>）。如果将脚本放在环境变量<code>$PATH</code>指定的目录中，就不需要指定路径了。因为 Bash 会自动到这些目录中，寻找是否存在同名的可执行文件。</p>\n<p>建议在主目录新建一个<code>~/bin</code>子目录，专门存放可执行脚本，然后把<code>~/bin</code>加入<code>$PATH</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:~/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令改变环境变量<code>$PATH</code>，将<code>~/bin</code>添加到<code>$PATH</code>的末尾。可以将这一行加到<code>~/.bashrc</code>文件里面，然后重新加载一次<code>.bashrc</code>，这个配置就可以生效了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>以后不管在什么目录，直接输入脚本文件名，脚本就会执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ script.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令没有指定脚本路径，因为<code>script.sh</code>在<code>$PATH</code>指定的目录中。</p>\n<h2 id=\"env-命令\"><a href=\"#env-命令\" class=\"headerlink\" title=\"env 命令\"></a>env 命令</h2><p><code>env</code>命令总是指向<code>/usr/bin/env</code>文件，或者说，这个二进制文件总是在目录<code>/usr/bin</code>。</p>\n<p><code>#!/usr/bin/env NAME</code>这个语法的意思是，让 Shell 查找<code>$PATH</code>环境变量里面第一个匹配的<code>NAME</code>。如果你不知道某个命令的具体路径，或者希望兼容其他用户的机器，这样的写法就很有用。</p>\n<p><code>/usr/bin/env bash</code>的意思就是，返回<code>bash</code>可执行文件的位置，前提是<code>bash</code>的路径是在<code>$PATH</code>里面。其他脚本文件也可以使用这个命令。比如 Node.js 脚本的 Shebang 行，可以写成下面这样。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env node</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>env</code>命令的参数如下。</p>\n<ul>\n<li><code>-i</code>, <code>--ignore-environment</code>：不带环境变量启动。</li>\n<li><code>-u</code>, <code>--unset=NAME</code>：从环境变量中删除一个变量。</li>\n<li><code>--help</code>：显示帮助。</li>\n<li><code>--version</code>：输出版本信息。</li>\n</ul>\n<p>下面是一个例子，新建一个不带任何环境变量的 Shell。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">env</span> -i /bin/sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>Bash 脚本中，<code>#</code>表示注释，可以放在行首，也可以放在行尾。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 本行是注释</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hello World!'</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hello World!'</span> <span class=\"token comment\"># 井号后面的部分也是注释</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>建议在脚本开头，使用注释说明当前脚本的作用，这样有利于日后的维护。</p>\n<h2 id=\"脚本参数\"><a href=\"#脚本参数\" class=\"headerlink\" title=\"脚本参数\"></a>脚本参数</h2><p>调用脚本的时候，脚本文件名后面可以带有参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ script.sh word1 word2 word3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，<code>script.sh</code>是一个脚本文件，<code>word1</code>、<code>word2</code>和<code>word3</code>是三个参数。</p>\n<p>脚本文件内部，可以使用特殊变量，引用这些参数。</p>\n<ul>\n<li><code>$0</code>：脚本文件名，即<code>script.sh</code>。</li>\n<li><code>$1</code>~<code>$9</code>：对应脚本的第一个参数到第九个参数。</li>\n<li><code>$#</code>：参数的总数。</li>\n<li><code>$@</code>：全部的参数，参数之间使用空格分隔。</li>\n<li><code>$*</code>：全部的参数，参数之间使用变量<code>$IFS</code>值的第一个字符分隔，默认为空格，但是可以自定义。</li>\n</ul>\n<p>如果脚本的参数多于9个，那么第10个参数可以用<code>$&#123;10&#125;</code>的形式引用，以此类推。</p>\n<p>注意，如果命令是<code>command -o foo bar</code>，那么<code>-o</code>是<code>$1</code>，<code>foo</code>是<code>$2</code>，<code>bar</code>是<code>$3</code>。</p>\n<p>下面是一个脚本内部读取命令行参数的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># script.sh</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"全部参数：\"</span> <span class=\"token variable\">$@</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"命令行参数数量：\"</span> <span class=\"token variable\">$#</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'<span class=\"token variable\">$0</span> = '</span> <span class=\"token variable\">$0</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'<span class=\"token variable\">$1</span> = '</span> <span class=\"token variable\">$1</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'<span class=\"token variable\">$2</span> = '</span> <span class=\"token variable\">$2</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'<span class=\"token variable\">$3</span> = '</span> <span class=\"token variable\">$3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./script.sh a b c\n全部参数：a b c\n命令行参数数量：3\n<span class=\"token variable\">$0</span> <span class=\"token operator\">=</span>  script.sh\n<span class=\"token variable\">$1</span> <span class=\"token operator\">=</span>  a\n<span class=\"token variable\">$2</span> <span class=\"token operator\">=</span>  b\n<span class=\"token variable\">$3</span> <span class=\"token operator\">=</span>  c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>用户可以输入任意数量的参数，利用<code>for</code>循环，可以读取每一个参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$@</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>$@</code>返回一个全部参数的列表，然后使用<code>for</code>循环遍历。</p>\n<p>如果多个参数放在双引号里面，视为一个参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./script.sh <span class=\"token string\">\"a b\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，Bash 会认为<code>&quot;a b&quot;</code>是一个参数，<code>$1</code>会返回<code>a b</code>。注意，返回时不包括双引号。</p>\n<h2 id=\"shift-命令\"><a href=\"#shift-命令\" class=\"headerlink\" title=\"shift 命令\"></a>shift 命令</h2><p><code>shift</code>命令可以改变脚本参数，每次执行都会移除脚本当前的第一个参数（<code>$1</code>），使得后面的参数向前一位，即<code>$2</code>变成<code>$1</code>、<code>$3</code>变成<code>$2</code>、<code>$4</code>变成<code>$3</code>，以此类推。</p>\n<p><code>while</code>循环结合<code>shift</code>命令，也可以读取每一个参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"一共输入了 <span class=\"token variable\">$#</span> 个参数\"</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"剩下 <span class=\"token variable\">$#</span> 个参数\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"参数：<span class=\"token variable\">$1</span>\"</span>\n  <span class=\"token builtin class-name\">shift</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>shift</code>命令每次移除当前第一个参数，从而通过<code>while</code>循环遍历所有参数。</p>\n<p><code>shift</code>命令可以接受一个整数作为参数，指定所要移除的参数个数，默认为<code>1</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">shift</span> <span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令移除前三个参数，原来的<code>$4</code>变成<code>$1</code>。</p>\n<h2 id=\"getopts-命令\"><a href=\"#getopts-命令\" class=\"headerlink\" title=\"getopts 命令\"></a>getopts 命令</h2><p><code>getopts</code>命令用在脚本内部，可以解析复杂的脚本命令行参数，通常与<code>while</code>循环一起使用，取出脚本所有的带有前置连词线（<code>-</code>）的参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">getopts</span> optstring name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它带有两个参数。第一个参数<code>optstring</code>是字符串，给出脚本所有的连词线参数。比如，某个脚本可以有三个配置项参数<code>-l</code>、<code>-h</code>、<code>-a</code>，其中只有<code>-a</code>可以带有参数值，而<code>-l</code>和<code>-h</code>是开关参数，那么<code>getopts</code>的第一个参数写成<code>lha:</code>，顺序不重要。注意，<code>a</code>后面有一个冒号，表示该参数带有参数值，<code>getopts</code>规定带有参数值的配置项参数，后面必须带有一个冒号（<code>:</code>）。<code>getopts</code>的第二个参数<code>name</code>是一个变量名，用来保存当前取到的配置项参数，即<code>l</code>、<code>h</code>或<code>a</code>。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">getopts</span> <span class=\"token string\">'lha:'</span> OPTION<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$OPTION</span>\"</span> <span class=\"token keyword\">in</span>\n    l<span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"linuxconfig\"</span>\n      <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n    h<span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"h stands for h\"</span>\n      <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n    a<span class=\"token punctuation\">)</span>\n      <span class=\"token assign-left variable\">avalue</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$OPTARG</span>\"</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The value provided is <span class=\"token variable\">$OPTARG</span>\"</span>\n      <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    ?<span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"script usage: <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $0<span class=\"token variable\">)</span></span> [-l] [-h] [-a somevalue]\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span>\n      <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">esac</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token builtin class-name\">shift</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$((</span>$OPTIND <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>while</code>循环不断执行<code>getopts &#39;lha:&#39; OPTION</code>命令，每次执行就会读取一个连词线参数（以及对应的参数值），然后进入循环体。变量<code>OPTION</code>保存的是，当前处理的那一个连词线参数（即<code>l</code>、<code>h</code>或<code>a</code>）。如果用户输入了没有指定的参数（比如<code>-x</code>），那么<code>OPTION</code>等于<code>?</code>。循环体内使用<code>case</code>判断，处理这四种不同的情况。</p>\n<p>如果某个连词线参数带有参数值，比如<code>-a foo</code>，那么处理<code>a</code>参数的时候，环境变量<code>$OPTARG</code>保存的就是参数值。</p>\n<p>注意，只要遇到不带连词线的参数，<code>getopts</code>就会执行失败，从而退出<code>while</code>循环。比如，<code>getopts</code>可以解析<code>command -l foo</code>，但不可以解析<code>command foo -l</code>。另外，多个连词线参数写在一起的形式，比如<code>command -lh</code>，<code>getopts</code>也可以正确处理。</p>\n<p>变量<code>$OPTIND</code>在<code>getopts</code>开始执行前是<code>1</code>，然后每次执行就会加<code>1</code>。等到退出<code>while</code>循环，就意味着连词线参数全部处理完毕。这时，<code>$OPTIND - 1</code>就是已经处理的连词线参数个数，使用<code>shift</code>命令将这些参数移除，保证后面的代码可以用<code>$1</code>、<code>$2</code>等处理命令的主参数。</p>\n<h2 id=\"配置项参数终止符\"><a href=\"#配置项参数终止符\" class=\"headerlink\" title=\"配置项参数终止符 --\"></a>配置项参数终止符 <code>--</code></h2><p><code>-</code>和<code>--</code>开头的参数，会被 Bash 当作配置项解释。但是，有时它们不是配置项，而是实体参数的一部分，比如文件名叫做<code>-f</code>或<code>--file</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> -f\n$ <span class=\"token function\">cat</span> --file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面命令的原意是输出文件<code>-f</code>和<code>--file</code>的内容，但是会被 Bash 当作配置项解释。</p>\n<p>这时就可以使用配置项参数终止符<code>--</code>，它的作用是告诉 Bash，在它后面的参数开头的<code>-</code>和<code>--</code>不是配置项，只能当作实体参数解释。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> -- -f\n$ <span class=\"token function\">cat</span> -- --file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面命令可以正确展示文件<code>-f</code>和<code>--file</code>的内容，因为它们放在<code>--</code>的后面，开头的<code>-</code>和<code>--</code>就不再当作配置项解释了。</p>\n<p>如果要确保某个变量不会被当作配置项解释，就要在它前面放上参数终止符<code>--</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> -- <span class=\"token variable\">$myPath</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>--</code>强制变量<code>$myPath</code>只能当作实体参数（即路径名）解释。如果变量不是路径名，就会报错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">myPath</span><span class=\"token operator\">=</span><span class=\"token string\">\"-l\"</span>\n$ <span class=\"token function\">ls</span> -- <span class=\"token variable\">$myPath</span>\nls: 无法访问<span class=\"token string\">'-l'</span><span class=\"token builtin class-name\">:</span> 没有那个文件或目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，变量<code>myPath</code>的值为<code>-l</code>，不是路径。但是，<code>--</code>强制<code>$myPath</code>只能作为路径解释，导致报错“不存在该路径”。</p>\n<p>下面是另一个实际的例子，如果想在文件里面搜索<code>--hello</code>，这时也要使用参数终止符<code>--</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">grep</span> -- <span class=\"token string\">\"--hello\"</span> example.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令在<code>example.txt</code>文件里面，搜索字符串<code>--hello</code>。这个字符串是<code>--</code>开头，如果不用参数终止符，<code>grep</code>命令就会把<code>--hello</code>当作配置项参数，从而报错。</p>\n<h2 id=\"exit-命令\"><a href=\"#exit-命令\" class=\"headerlink\" title=\"exit 命令\"></a>exit 命令</h2><p><code>exit</code>命令用于终止当前脚本的执行，并向 Shell 返回一个退出值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">exit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中止当前脚本，将最后一条命令的退出状态，作为整个脚本的退出状态。</p>\n<p><code>exit</code>命令后面可以跟参数，该参数就是退出状态。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 退出值为0（成功）</span>\n$ <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\"># 退出值为1（失败）</span>\n$ <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>退出时，脚本会返回一个退出值。脚本的退出值，<code>0</code>表示正常，<code>1</code>表示发生错误，<code>2</code>表示用法不对，<code>126</code>表示不是可执行脚本，<code>127</code>表示命令没有发现。如果脚本被信号<code>N</code>终止，则退出值为<code>128 + N</code>。简单来说，只要退出值非0，就认为执行出错。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"0\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"根用户才能执行当前脚本\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子中，<code>id -u</code>命令返回用户的 ID，一旦用户的 ID 不等于<code>0</code>（根用户的 ID），脚本就会退出，并且退出码为<code>1</code>，表示运行失败。</p>\n<p><code>exit</code>与<code>return</code>命令的差别是，<code>return</code>命令是函数的退出，并返回一个值给调用者，脚本依然执行。<code>exit</code>是整个脚本的退出，如果在函数之中调用<code>exit</code>，则退出函数，并终止脚本执行。</p>\n<h2 id=\"命令执行结果\"><a href=\"#命令执行结果\" class=\"headerlink\" title=\"命令执行结果\"></a>命令执行结果</h2><p>命令执行结束后，会有一个返回值。<code>0</code>表示执行成功，非<code>0</code>（通常是<code>1</code>）表示执行失败。环境变量<code>$?</code>可以读取前一个命令的返回值。</p>\n<p>利用这一点，可以在脚本中对命令执行结果进行判断。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$some_directory</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$?</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token function\">rm</span> *\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"无法切换目录！\"</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token file-descriptor important\">&amp;2</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>cd $some_directory</code>这个命令如果执行成功（返回值等于<code>0</code>），就删除该目录里面的文件，否则退出脚本，整个脚本的返回值变为<code>1</code>，表示执行失败。</p>\n<p>由于<code>if</code>可以直接判断命令的执行结果，执行相应的操作，上面的脚本可以改写成下面的样子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$some_directory</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token function\">rm</span> *\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Could not change directory! Aborting.\"</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token file-descriptor important\">&amp;2</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>更简洁的写法是利用两个逻辑运算符<code>&amp;&amp;</code>（且）和<code>||</code>（或）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 第一步执行成功，才会执行第二步</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$some_directory</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> *\n\n<span class=\"token comment\"># 第一步执行失败，才会执行第二步</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$some_directory</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"source-命令\"><a href=\"#source-命令\" class=\"headerlink\" title=\"source 命令\"></a>source 命令</h2><p><code>source</code>命令用于执行一个脚本，通常用于重新加载一个配置文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">source</span> .bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>source</code>命令最大的特点是在当前 Shell 执行脚本，不像直接执行脚本时，会新建一个子 Shell。所以，<code>source</code>命令执行脚本时，不需要<code>export</code>变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># test.sh</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$foo</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面脚本输出<code>$foo</code>变量的值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 当前 Shell 新建一个变量 foo</span>\n$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n\n<span class=\"token comment\"># 打印输出 1</span>\n$ <span class=\"token builtin class-name\">source</span> test.sh\n<span class=\"token number\">1</span>\n\n<span class=\"token comment\"># 打印输出空字符串</span>\n$ <span class=\"token function\">bash</span> test.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，当前 Shell 的变量<code>foo</code>并没有<code>export</code>，所以直接执行无法读取，但是<code>source</code>执行可以读取。</p>\n<p><code>source</code>命令的另一个用途，是在脚本内部加载外部库。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">source</span> ./lib.sh\n\nfunction_from_lib<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面脚本在内部使用<code>source</code>命令加载了一个外部库，然后就可以在脚本里面，使用这个外部库定义的函数。</p>\n<p><code>source</code>有一个简写形式，可以使用一个点（<code>.</code>）来表示。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">.</span> .bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"别名，alias-命令\"><a href=\"#别名，alias-命令\" class=\"headerlink\" title=\"别名，alias 命令\"></a>别名，alias 命令</h2><p><code>alias</code>命令用来为一个命令指定别名，这样更便于记忆。下面是<code>alias</code>的格式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">NAME</span><span class=\"token operator\">=</span>DEFINITION<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>NAME</code>是别名的名称，<code>DEFINITION</code>是别名对应的原始命令。注意，等号两侧不能有空格，否则会报错。</p>\n<p>一个常见的例子是为<code>grep</code>命令起一个<code>search</code>的别名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">search</span><span class=\"token operator\">=</span>grep<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>alias</code>也可以用来为长命令指定一个更短的别名。下面是通过别名定义一个<code>today</code>的命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">today</span><span class=\"token operator\">=</span><span class=\"token string\">'date +\"%A, %B %-d, %Y\"'</span>\n$ today\n星期一, 一月 <span class=\"token number\">6</span>, <span class=\"token number\">2020</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>有时为了防止误删除文件，可以指定<code>rm</code>命令的别名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">rm</span><span class=\"token operator\">=</span><span class=\"token string\">'rm -i'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令指定<code>rm</code>命令是<code>rm -i</code>，每次删除文件之前，都会让用户确认。</p>\n<p><code>alias</code>定义的别名也可以接受参数，参数会直接传入原始命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">echo</span><span class=\"token operator\">=</span><span class=\"token string\">'echo It says: '</span>\n$ <span class=\"token builtin class-name\">echo</span> hello world\nIt says: hello world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，别名定义了<code>echo</code>命令的前两个参数，等同于修改了<code>echo</code>命令的默认行为。</p>\n<p>指定别名以后，就可以像使用其他命令一样使用别名。一般来说，都会把常用的别名写在<code>~/.bashrc</code>的末尾。另外，只能为命令定义别名，为其他部分（比如很长的路径）定义别名是无效的。</p>\n<p>直接调用<code>alias</code>命令，可以显示所有别名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">alias</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>unalias</code>命令可以解除别名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">unalias</span> lt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参考链接-1\"><a href=\"#参考链接-1\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://linuxconfig.org/how-to-use-getopts-to-parse-a-script-options\">How to use getopts to parse a script options</a>, Egidio Docile</li>\n</ul>\n<h1 id=\"read-命令\"><a href=\"#read-命令\" class=\"headerlink\" title=\"read 命令\"></a>read 命令</h1><h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>有时，脚本需要在执行过程中，由用户提供一部分数据，这时可以使用<code>read</code>命令。它将用户的输入存入一个变量，方便后面的代码使用。用户按下回车键，就表示输入结束。</p>\n<p><code>read</code>命令的格式如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">read</span> <span class=\"token punctuation\">[</span>-options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>variable<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面语法中，<code>options</code>是参数选项，<code>variable</code>是用来保存输入数值的一个或多个变量名。如果没有提供变量名，环境变量<code>REPLY</code>会包含用户输入的一整行数据。</p>\n<p>下面是一个例子<code>demo.sh</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"输入一些文本 > \"</span>\n<span class=\"token builtin class-name\">read</span> text\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"你的输入：<span class=\"token variable\">$text</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，先显示一行提示文本，然后会等待用户输入文本。用户输入的文本，存入变量<code>text</code>，在下一行显示出来。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> demo.sh\n输入一些文本 <span class=\"token operator\">></span> 你好，世界\n你的输入：你好，世界<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>read</code>可以接受用户输入的多个值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token builtin class-name\">echo</span> Please, enter your firstname and lastname\n<span class=\"token builtin class-name\">read</span> FN LN\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hi! <span class=\"token variable\">$LN</span>, <span class=\"token variable\">$FN</span> !\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>read</code>根据用户的输入，同时为两个变量赋值。</p>\n<p>如果用户的输入项少于<code>read</code>命令给出的变量数目，那么额外的变量值为空。如果用户的输入项多于定义的变量，那么多余的输入项会包含到最后一个变量中。</p>\n<p>如果<code>read</code>命令之后没有定义变量名，那么环境变量<code>REPLY</code>会包含所有的输入。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># read-single: read multiple values into default variable</span>\n<span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"Enter one or more values > \"</span>\n<span class=\"token builtin class-name\">read</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"REPLY = '<span class=\"token environment constant\">$REPLY</span>'\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面脚本的运行结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ read-single\nEnter one or <span class=\"token function\">more</span> values <span class=\"token operator\">></span> a b c d\n<span class=\"token environment constant\">REPLY</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a b c d'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>read</code>命令除了读取键盘输入，可以用来读取文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">filename</span><span class=\"token operator\">=</span><span class=\"token string\">'/etc/hosts'</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> myline\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$myline</span>\"</span>\n<span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$filename</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子通过<code>read</code>命令，读取一个文件的内容。<code>done</code>命令后面的定向符<code>&lt;</code>，将文件内容导向<code>read</code>命令，每次读取一行，存入变量<code>myline</code>，直到文件读取完毕。</p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p><code>read</code>命令的参数如下。</p>\n<p><strong>（1）-t 参数</strong></p>\n<p><code>read</code>命令的<code>-t</code>参数，设置了超时的秒数。如果超过了指定时间，用户仍然没有输入，脚本将放弃等待，继续向下执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"输入一些文本 > \"</span>\n<span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">read</span> -t <span class=\"token number\">3</span> response<span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"用户已经输入了\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"用户没有输入\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，输入命令会等待3秒，如果用户超过这个时间没有输入，这个命令就会执行失败。<code>if</code>根据命令的返回值，转入<code>else</code>代码块，继续往下执行。</p>\n<p>环境变量<code>TMOUT</code>也可以起到同样作用，指定<code>read</code>命令等待用户输入的时间（单位为秒）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">TMOUT</span><span class=\"token operator\">=</span><span class=\"token number\">3</span>\n$ <span class=\"token builtin class-name\">read</span> response<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子也是等待3秒，如果用户还没有输入，就会超时。</p>\n<p><strong>（2）-p 参数</strong></p>\n<p><code>-p</code>参数指定用户输入的提示信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"Enter one or more values > \"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"REPLY = '<span class=\"token environment constant\">$REPLY</span>'\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，先显示<code>Enter one or more values &gt;</code>，再接受用户的输入。</p>\n<p><strong>（3）-a 参数</strong></p>\n<p><code>-a</code>参数把用户的输入赋值给一个数组，从零号位置开始。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">read</span> -a people\nalice duchess dodo\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;people<span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span>&#125;</span>\ndodo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，用户输入被赋值给一个数组<code>people</code>，这个数组的2号成员就是<code>dodo</code>。</p>\n<p><strong>（4）-n 参数</strong></p>\n<p><code>-n</code>参数指定只读取若干个字符作为变量值，而不是整行读取。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">read</span> -n <span class=\"token number\">3</span> letter\nabcdefghij\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$letter</span>\nabc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，变量<code>letter</code>只包含3个字母。</p>\n<p><strong>（5）-e 参数</strong></p>\n<p><code>-e</code>参数允许用户输入的时候，使用<code>readline</code>库提供的快捷键，比如自动补全。具体的快捷键可以参阅《行操作》一章。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> Please input the path to the file:\n\n<span class=\"token builtin class-name\">read</span> -e fileName\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$fileName</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>read</code>命令接受用户输入的文件名。这时，用户可能想使用 Tab 键的文件名“自动补全”功能，但是<code>read</code>命令的输入默认不支持<code>readline</code>库的功能。<code>-e</code>参数就可以允许用户使用自动补全。</p>\n<p><strong>（6）其他参数</strong></p>\n<ul>\n<li><code>-d delimiter</code>：定义字符串<code>delimiter</code>的第一个字符作为用户输入的结束，而不是一个换行符。</li>\n<li><code>-r</code>：raw 模式，表示不把用户输入的反斜杠字符解释为转义字符。</li>\n<li><code>-s</code>：使得用户的输入不显示在屏幕上，这常常用于输入密码或保密信息。</li>\n<li><code>-u fd</code>：使用文件描述符<code>fd</code>作为输入。</li>\n</ul>\n<h2 id=\"IFS-变量\"><a href=\"#IFS-变量\" class=\"headerlink\" title=\"IFS 变量\"></a>IFS 变量</h2><p><code>read</code>命令读取的值，默认是以空格分隔。可以通过自定义环境变量<code>IFS</code>（内部字段分隔符，Internal Field Separator 的缩写），修改分隔标志。</p>\n<p><code>IFS</code>的默认值是空格、Tab 符号、换行符号，通常取第一个（即空格）。</p>\n<p>如果把<code>IFS</code>定义成冒号（<code>:</code>）或分号（<code>;</code>），就可以分隔以这两个符号分隔的值，这对读取文件很有用。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># read-ifs: read fields from a file</span>\n\n<span class=\"token assign-left variable\">FILE</span><span class=\"token operator\">=</span>/etc/passwd\n\n<span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"Enter a username > \"</span> user_name\n<span class=\"token assign-left variable\">file_info</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">grep</span> <span class=\"token string\">\"^<span class=\"token variable\">$user_name</span>:\"</span> $FILE<span class=\"token variable\">)</span></span>\"</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -n <span class=\"token string\">\"<span class=\"token variable\">$file_info</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token string\">\":\"</span> <span class=\"token builtin class-name\">read</span> user pw uid gid name home shell <span class=\"token operator\">&lt;&lt;&lt;</span> <span class=\"token string\">\"<span class=\"token variable\">$file_info</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"User = '<span class=\"token variable\">$user</span>'\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"UID = '<span class=\"token variable\">$uid</span>'\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"GID = '<span class=\"token variable\">$gid</span>'\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Full Name = '<span class=\"token variable\">$name</span>'\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Home Dir. = '<span class=\"token variable\">$home</span>'\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Shell = '<span class=\"token variable\">$shell</span>'\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"No such user '<span class=\"token variable\">$user_name</span>'\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>IFS</code>设为冒号，然后用来分解<code>/etc/passwd</code>文件的一行。<code>IFS</code>的赋值命令和<code>read</code>命令写在一行，这样的话，<code>IFS</code>的改变仅对后面的命令生效，该命令执行后<code>IFS</code>会自动恢复原来的值。如果不写在一行，就要采用下面的写法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">OLD_IFS</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$IFS</span>\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token string\">\":\"</span>\n<span class=\"token builtin class-name\">read</span> user pw uid gid name home shell <span class=\"token operator\">&lt;&lt;&lt;</span> <span class=\"token string\">\"<span class=\"token variable\">$file_info</span>\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$OLD_IFS</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，上面例子中，<code>&lt;&lt;&lt;</code>是 Here 字符串，用于将变量值转为标准输入，因为<code>read</code>命令只能解析标准输入。</p>\n<p>如果<code>IFS</code>设为空字符串，就等同于将整行读入一个变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token assign-left variable\">input</span><span class=\"token operator\">=</span><span class=\"token string\">\"/path/to/txt/file\"</span>\n<span class=\"token keyword\">while</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span> <span class=\"token builtin class-name\">read</span> -r line\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$line</span>\"</span>\n<span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">\"<span class=\"token variable\">$input</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的命令可以逐行读取文件，每一行存入变量<code>line</code>，打印出来以后再读取下一行。</p>\n<h1 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h1><p>本章介绍 Bash 脚本的条件判断语法。</p>\n<h2 id=\"if-结构\"><a href=\"#if-结构\" class=\"headerlink\" title=\"if 结构\"></a>if 结构</h2><p><code>if</code>是最常用的条件判断结构，只有符合给定条件时，才会执行指定的命令。它的语法如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> commands<span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  commands\n<span class=\"token punctuation\">[</span>elif commands<span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  commands<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>else\n  commands<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个命令分成三个部分：<code>if</code>、<code>elif</code>和<code>else</code>。其中，后两个部分是可选的。</p>\n<p><code>if</code>关键字后面是主要的判断条件，<code>elif</code>用来添加在主条件不成立时的其他判断条件，<code>else</code>则是所有条件都不成立时要执行的部分。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">test</span> <span class=\"token environment constant\">$USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello foo.\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"You are not foo.\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子中，判断条件是环境变量<code>$USER</code>是否等于<code>foo</code>，如果等于就输出<code>Hello foo.</code>，否则输出其他内容。</p>\n<p><code>if</code>和<code>then</code>写在同一行时，需要分号分隔。分号是 Bash 的命令分隔符。它们也可以写成两行，这时不需要分号。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'hello world'</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'it is false'</span> <span class=\"token comment\"># 本行不会执行</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子中，<code>true</code>和<code>false</code>是两个特殊命令，前者代表操作成功，后者代表操作失败。<code>if true</code>意味着命令部分总是会执行，<code>if false</code>意味着命令部分永远不会执行。</p>\n<p>除了多行的写法，<code>if</code>结构也可以写成单行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">if</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\nhello world\n\n$ <span class=\"token keyword\">if</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"It's true.\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，<code>if</code>关键字后面也可以是一条命令，该条命令执行成功（返回值<code>0</code>），就意味着判断条件成立。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\nhi\nhello world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令中，<code>if</code>后面是一条命令<code>echo &#39;hi&#39;</code>。该命令会执行，如果返回值是<code>0</code>，则执行<code>then</code>的部分。</p>\n<p><code>if</code>后面可以跟任意数量的命令。这时，所有命令都会执行，但是判断真伪只看最后一个命令，即使前面所有命令都失败，只要最后一个命令返回<code>0</code>，就会执行<code>then</code>的部分。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">if</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\nhello world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>if</code>后面有两条命令（<code>false;true;</code>），第二条命令（<code>true</code>）决定了<code>then</code>的部分是否会执行。</p>\n<p><code>elif</code>部分可以有多个。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"输入一个1到3之间的数字（包含两端）> \"</span>\n<span class=\"token builtin class-name\">read</span> character\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$character</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$character</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$character</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> 输入不符合要求\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，如果用户输入<code>3</code>，就会连续判断3次。</p>\n<h2 id=\"test-命令\"><a href=\"#test-命令\" class=\"headerlink\" title=\"test 命令\"></a>test 命令</h2><p><code>if</code>结构的判断条件，一般使用<code>test</code>命令，有三种形式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 写法一</span>\n<span class=\"token builtin class-name\">test</span> expression\n\n<span class=\"token comment\"># 写法二</span>\n<span class=\"token punctuation\">[</span> expression <span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 写法三</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> expression <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面三种形式是等价的，但是第三种形式还支持正则判断，前两种不支持。</p>\n<p>上面的<code>expression</code>是一个表达式。这个表达式为真，<code>test</code>命令执行成功（返回值为<code>0</code>）；表达式为伪，<code>test</code>命令执行失败（返回值为<code>1</code>）。注意，第二种和第三种写法，<code>[</code>和<code>]</code>与内部的表达式之间必须有空格。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">test</span> -f /etc/hosts\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span>\n<span class=\"token number\">0</span>\n\n$ <span class=\"token punctuation\">[</span> -f /etc/hosts <span class=\"token punctuation\">]</span>\n$  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span>\n<span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子中，<code>test</code>命令采用两种写法，判断<code>/etc/hosts</code>文件是否存在，这两种写法是等价的。命令执行后，返回值为<code>0</code>，表示该文件确实存在。</p>\n<p>实际上，<code>[</code>这个字符是<code>test</code>命令的一种简写形式，可以看作是一个独立的命令，这解释了为什么它后面必须有空格。</p>\n<p>下面把<code>test</code>命令的三种形式，用在<code>if</code>结构中，判断一个文件是否存在。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 写法一</span>\n<span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">test</span> -e /tmp/foo.txt <span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found foo.txt\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 写法二</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -e /tmp/foo.txt <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found foo.txt\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 写法三</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -e /tmp/foo.txt <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found foo.txt\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"判断表达式\"><a href=\"#判断表达式\" class=\"headerlink\" title=\"判断表达式\"></a>判断表达式</h2><p><code>if</code>关键字后面，跟的是一个命令。这个命令可以是<code>test</code>命令，也可以是其他命令。命令的返回值为<code>0</code>表示判断成立，否则表示不成立。因为这些命令主要是为了得到返回值，所以可以视为表达式。</p>\n<p>常用的判断表达式有下面这些。</p>\n<h3 id=\"文件判断\"><a href=\"#文件判断\" class=\"headerlink\" title=\"文件判断\"></a>文件判断</h3><p>以下表达式用来判断文件状态。</p>\n<ul>\n<li><code>[ -a file ]</code>：如果 file 存在，则为<code>true</code>。</li>\n<li><code>[ -b file ]</code>：如果 file 存在并且是一个块（设备）文件，则为<code>true</code>。</li>\n<li><code>[ -c file ]</code>：如果 file 存在并且是一个字符（设备）文件，则为<code>true</code>。</li>\n<li><code>[ -d file ]</code>：如果 file 存在并且是一个目录，则为<code>true</code>。</li>\n<li><code>[ -e file ]</code>：如果 file 存在，则为<code>true</code>。</li>\n<li><code>[ -f file ]</code>：如果 file 存在并且是一个普通文件，则为<code>true</code>。</li>\n<li><code>[ -g file ]</code>：如果 file 存在并且设置了组 ID，则为<code>true</code>。</li>\n<li><code>[ -G file ]</code>：如果 file 存在并且属于有效的组 ID，则为<code>true</code>。</li>\n<li><code>[ -h file ]</code>：如果 file 存在并且是符号链接，则为<code>true</code>。</li>\n<li><code>[ -k file ]</code>：如果 file 存在并且设置了它的“sticky bit”，则为<code>true</code>。</li>\n<li><code>[ -L file ]</code>：如果 file 存在并且是一个符号链接，则为<code>true</code>。</li>\n<li><code>[ -N file ]</code>：如果 file 存在并且自上次读取后已被修改，则为<code>true</code>。</li>\n<li><code>[ -O file ]</code>：如果 file 存在并且属于有效的用户 ID，则为<code>true</code>。</li>\n<li><code>[ -p file ]</code>：如果 file 存在并且是一个命名管道，则为<code>true</code>。</li>\n<li><code>[ -r file ]</code>：如果 file 存在并且可读（当前用户有可读权限），则为<code>true</code>。</li>\n<li><code>[ -s file ]</code>：如果 file 存在且其长度大于零，则为<code>true</code>。</li>\n<li><code>[ -S file ]</code>：如果 file 存在且是一个网络 socket，则为<code>true</code>。</li>\n<li><code>[ -t fd ]</code>：如果 fd 是一个文件描述符，并且重定向到终端，则为<code>true</code>。 这可以用来判断是否重定向了标准输入／输出／错误。</li>\n<li><code>[ -u file ]</code>：如果 file 存在并且设置了 setuid 位，则为<code>true</code>。</li>\n<li><code>[ -w file ]</code>：如果 file 存在并且可写（当前用户拥有可写权限），则为<code>true</code>。</li>\n<li><code>[ -x file ]</code>：如果 file 存在并且可执行（有效用户有执行／搜索权限），则为<code>true</code>。</li>\n<li><code>[ file1 -nt file2 ]</code>：如果 FILE1 比 FILE2 的更新时间最近，或者 FILE1 存在而 FILE2 不存在，则为<code>true</code>。</li>\n<li><code>[ file1 -ot file2 ]</code>：如果 FILE1 比 FILE2 的更新时间更旧，或者 FILE2 存在而 FILE1 不存在，则为<code>true</code>。</li>\n<li><code>[ FILE1 -ef FILE2 ]</code>：如果 FILE1 和 FILE2 引用相同的设备和 inode 编号，则为<code>true</code>。</li>\n</ul>\n<p>下面是一个示例。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">FILE</span><span class=\"token operator\">=</span>~/.bashrc\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -e <span class=\"token string\">\"<span class=\"token variable\">$FILE</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f <span class=\"token string\">\"<span class=\"token variable\">$FILE</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$FILE</span> is a regular file.\"</span>\n  <span class=\"token keyword\">fi</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -d <span class=\"token string\">\"<span class=\"token variable\">$FILE</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$FILE</span> is a directory.\"</span>\n  <span class=\"token keyword\">fi</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -r <span class=\"token string\">\"<span class=\"token variable\">$FILE</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$FILE</span> is readable.\"</span>\n  <span class=\"token keyword\">fi</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -w <span class=\"token string\">\"<span class=\"token variable\">$FILE</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$FILE</span> is writable.\"</span>\n  <span class=\"token keyword\">fi</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -x <span class=\"token string\">\"<span class=\"token variable\">$FILE</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$FILE</span> is executable/searchable.\"</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$FILE</span> does not exist\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>$FILE</code>要放在双引号之中。这样可以防止<code>$FILE</code>为空，因为这时<code>[ -e ]</code>会判断为真。而放在双引号之中，返回的就总是一个空字符串，<code>[ -e &quot;&quot; ]</code>会判断为伪。</p>\n<h3 id=\"字符串判断\"><a href=\"#字符串判断\" class=\"headerlink\" title=\"字符串判断\"></a>字符串判断</h3><p>以下表达式用来判断字符串。</p>\n<ul>\n<li><code>[ string ]</code>：如果<code>string</code>不为空（长度大于0），则判断为真。</li>\n<li><code>[ -n string ]</code>：如果字符串<code>string</code>的长度大于零，则判断为真。</li>\n<li><code>[ -z string ]</code>：如果字符串<code>string</code>的长度为零，则判断为真。</li>\n<li><code>[ string1 = string2 ]</code>：如果<code>string1</code>和<code>string2</code>相同，则判断为真。</li>\n<li><code>[ string1 == string2 ]</code> 等同于<code>[ string1 = string2 ]</code>。</li>\n<li><code>[ string1 != string2 ]</code>：如果<code>string1</code>和<code>string2</code>不相同，则判断为真。</li>\n<li><code>[ string1 &#39;&gt;&#39; string2 ]</code>：如果按照字典顺序<code>string1</code>排列在<code>string2</code>之后，则判断为真。</li>\n<li><code>[ string1 &#39;&lt;&#39; string2 ]</code>：如果按照字典顺序<code>string1</code>排列在<code>string2</code>之前，则判断为真。</li>\n</ul>\n<p>注意，<code>test</code>命令内部的<code>&gt;</code>和<code>&lt;</code>，必须用引号引起来（或者是用反斜杠转义）。否则，它们会被 shell 解释为重定向操作符。</p>\n<p>下面是一个示例。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">ANSWER</span><span class=\"token operator\">=</span>maybe\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -z <span class=\"token string\">\"<span class=\"token variable\">$ANSWER</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"There is no answer.\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$ANSWER</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"yes\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The answer is YES.\"</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$ANSWER</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"no\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The answer is NO.\"</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$ANSWER</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"maybe\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The answer is MAYBE.\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The answer is UNKNOWN.\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，首先确定<code>$ANSWER</code>字符串是否为空。如果为空，就终止脚本，并把退出状态设为<code>1</code>。注意，这里的<code>echo</code>命令把错误信息<code>There is no answer.</code>重定向到标准错误，这是处理错误信息的常用方法。如果<code>$ANSWER</code>字符串不为空，就判断它的值是否等于<code>yes</code>、<code>no</code>或者<code>maybe</code>。</p>\n<p>注意，字符串判断时，变量要放在双引号之中，比如<code>[ -n &quot;$COUNT&quot; ]</code>，否则变量替换成字符串以后，<code>test</code>命令可能会报错，提示参数过多。另外，如果不放在双引号之中，变量为空时，命令会变成<code>[ -n ]</code>，这时会判断为真。如果放在双引号之中，<code>[ -n &quot;&quot; ]</code>就判断为伪。</p>\n<h3 id=\"整数判断\"><a href=\"#整数判断\" class=\"headerlink\" title=\"整数判断\"></a>整数判断</h3><p>下面的表达式用于判断整数。</p>\n<ul>\n<li><code>[ integer1 -eq integer2 ]</code>：如果<code>integer1</code>等于<code>integer2</code>，则为<code>true</code>。</li>\n<li><code>[ integer1 -ne integer2 ]</code>：如果<code>integer1</code>不等于<code>integer2</code>，则为<code>true</code>。</li>\n<li><code>[ integer1 -le integer2 ]</code>：如果<code>integer1</code>小于或等于<code>integer2</code>，则为<code>true</code>。</li>\n<li><code>[ integer1 -lt integer2 ]</code>：如果<code>integer1</code>小于<code>integer2</code>，则为<code>true</code>。</li>\n<li><code>[ integer1 -ge integer2 ]</code>：如果<code>integer1</code>大于或等于<code>integer2</code>，则为<code>true</code>。</li>\n<li><code>[ integer1 -gt integer2 ]</code>：如果<code>integer1</code>大于<code>integer2</code>，则为<code>true</code>。</li>\n</ul>\n<p>下面是一个用法的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">INT</span><span class=\"token operator\">=</span>-5\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -z <span class=\"token string\">\"<span class=\"token variable\">$INT</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is empty.\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$INT</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is zero.\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$INT</span> -lt <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is negative.\"</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is positive.\"</span>\n  <span class=\"token keyword\">fi</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>INT <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is even.\"</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is odd.\"</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，先判断变量<code>$INT</code>是否为空，然后判断是否为<code>0</code>，接着判断正负，最后通过求余数判断奇偶。</p>\n<h3 id=\"正则判断\"><a href=\"#正则判断\" class=\"headerlink\" title=\"正则判断\"></a>正则判断</h3><p><code>[[ expression ]]</code>这种判断形式，支持正则表达式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> string1 <span class=\"token operator\">=</span>~ regex <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的语法中，<code>regex</code>是一个正则表示式，<code>=~</code>是正则比较运算符。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">INT</span><span class=\"token operator\">=</span>-5\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$INT</span>\"</span> <span class=\"token operator\">=</span>~ ^-?<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span>+$ <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is an integer.\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is not an integer.\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，先判断变量<code>INT</code>的字符串形式，是否满足<code>^-?[0-9]+$</code>的正则模式，如果满足就表明它是一个整数。</p>\n<h3 id=\"test-判断的逻辑运算\"><a href=\"#test-判断的逻辑运算\" class=\"headerlink\" title=\"test 判断的逻辑运算\"></a>test 判断的逻辑运算</h3><p>通过逻辑运算，可以把多个<code>test</code>判断表达式结合起来，创造更复杂的判断。三种逻辑运算<code>AND</code>，<code>OR</code>，和<code>NOT</code>，都有自己的专用符号。</p>\n<ul>\n<li><code>AND</code>运算：符号<code>&amp;&amp;</code>，也可使用参数<code>-a</code>。</li>\n<li><code>OR</code>运算：符号<code>||</code>，也可使用参数<code>-o</code>。</li>\n<li><code>NOT</code>运算：符号<code>!</code>。</li>\n</ul>\n<p>下面是一个<code>AND</code>的例子，判断整数是否在某个范围之内。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">MIN_VAL</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\">MAX_VAL</span><span class=\"token operator\">=</span><span class=\"token number\">100</span>\n\n<span class=\"token assign-left variable\">INT</span><span class=\"token operator\">=</span><span class=\"token number\">50</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$INT</span>\"</span> <span class=\"token operator\">=</span>~ ^-?<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span>+$ <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$INT</span> -ge <span class=\"token variable\">$MIN_VAL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$INT</span> -le <span class=\"token variable\">$MAX_VAL</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$INT</span> is within <span class=\"token variable\">$MIN_VAL</span> to <span class=\"token variable\">$MAX_VAL</span>.\"</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$INT</span> is out of range.\"</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is not an integer.\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>&amp;&amp;</code>用来连接两个判断条件：大于等于<code>$MIN_VAL</code>，并且小于等于<code>$MAX_VAL</code>。</p>\n<p>使用否定操作符<code>!</code>时，最好用圆括号确定转义的范围。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$INT</span> -ge <span class=\"token variable\">$MIN_VAL</span> -a <span class=\"token variable\">$INT</span> -le <span class=\"token variable\">$MAX_VAL</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$INT</span> is outside <span class=\"token variable\">$MIN_VAL</span> to <span class=\"token variable\">$MAX_VAL</span>.\"</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$INT</span> is in range.\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>test</code>命令内部使用的圆括号，必须使用引号或者转义，否则会被 Bash 解释。</p>\n<h3 id=\"算术判断\"><a href=\"#算术判断\" class=\"headerlink\" title=\"算术判断\"></a>算术判断</h3><p>Bash 还提供了<code>((...))</code>作为算术条件，进行算术运算的判断。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码执行后，会打印出<code>true</code>。</p>\n<p>注意，算术判断不需要使用<code>test</code>命令，而是直接使用<code>((...))</code>结构。这个结构的返回值，决定了判断的真伪。</p>\n<p>如果算术计算的结果是非零值，则表示判断成立。这一点跟命令的返回值正好相反，需要小心。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token number\">1</span><span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"It is true.\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\nIt is true.\n$ <span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token number\">0</span><span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"It is true.\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"it is false.\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\nIt is false.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>((1))</code>表示判断成立，<code>((0))</code>表示判断不成立。</p>\n<p>算术条件<code>((...))</code>也可以用于变量赋值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"foo is <span class=\"token variable\">$foo</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\nfoo is <span class=\"token number\">5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>(( foo = 5 ))</code>完成了两件事情。首先把<code>5</code>赋值给变量<code>foo</code>，然后根据返回值<code>5</code>，判断条件为真。</p>\n<p>注意，赋值语句返回等号右边的值，如果返回的是<code>0</code>，则判断为假。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"It is true.\"</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"It is false.\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\nIt is false.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面是用算术条件改写的数值判断脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">INT</span><span class=\"token operator\">=</span>-5\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$INT</span>\"</span> <span class=\"token operator\">=</span>~ ^-?<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span>+$ <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>INT <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is zero.\"</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>INT <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is negative.\"</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is positive.\"</span>\n    <span class=\"token keyword\">fi</span>\n    <span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> <span class=\"token punctuation\">((</span>INT <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">))</span></span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is even.\"</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is odd.\"</span>\n    <span class=\"token keyword\">fi</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"INT is not an integer.\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>只要是算术表达式，都能用于<code>((...))</code>语法，详见《Bash 的算术运算》一章。</p>\n<h3 id=\"普通命令的逻辑运算\"><a href=\"#普通命令的逻辑运算\" class=\"headerlink\" title=\"普通命令的逻辑运算\"></a>普通命令的逻辑运算</h3><p>如果<code>if</code>结构使用的不是<code>test</code>命令，而是普通命令，比如上一节的<code>((...))</code>算术运算，或者<code>test</code>命令与普通命令混用，那么可以使用 Bash 的命令控制操作符<code>&amp;&amp;</code>（AND）和<code>||</code>（OR），进行多个命令的逻辑运算。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ command1 <span class=\"token operator\">&amp;&amp;</span> command2\n$ command1 <span class=\"token operator\">||</span> command2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>对于<code>&amp;&amp;</code>操作符，先执行<code>command1</code>，只有<code>command1</code>执行成功后， 才会执行<code>command2</code>。对于<code>||</code>操作符，先执行<code>command1</code>，只有<code>command1</code>执行失败后， 才会执行<code>command2</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> temp <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> temp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令会创建一个名为<code>temp</code>的目录，执行成功后，才会执行第二个命令，进入这个目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token punctuation\">[</span> -d temp <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token function\">mkdir</span> temp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令会测试目录<code>temp</code>是否存在，如果不存在，就会执行第二个命令，创建这个目录。这种写法非常有助于在脚本中处理错误。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -d temp <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的命令中，如果<code>temp</code>子目录不存在，脚本会终止，并且返回值为<code>1</code>。</p>\n<p>下面就是<code>if</code>与<code>&amp;&amp;</code>结合使用的写法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> condition <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> condition <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">command</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是一个示例。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash</span>\n\n<span class=\"token assign-left variable\">filename</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n<span class=\"token assign-left variable\">word1</span><span class=\"token operator\">=</span><span class=\"token variable\">$2</span>\n<span class=\"token assign-left variable\">word2</span><span class=\"token operator\">=</span><span class=\"token variable\">$3</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token function\">grep</span> <span class=\"token variable\">$word1</span> <span class=\"token variable\">$filename</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">grep</span> <span class=\"token variable\">$word2</span> <span class=\"token variable\">$filename</span>\n<span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$word1</span> and <span class=\"token variable\">$word2</span> are both in <span class=\"token variable\">$filename</span>.\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子只有在指定文件里面，同时存在搜索词<code>word1</code>和<code>word2</code>，就会执行<code>if</code>的命令部分。</p>\n<p>下面的示例演示如何将一个<code>&amp;&amp;</code>判断表达式，改写成对应的<code>if</code>结构。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -d <span class=\"token string\">\"<span class=\"token variable\">$dir_name</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> <span class=\"token string\">\"<span class=\"token variable\">$dir_name</span>\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> *\n\n<span class=\"token comment\"># 等同于</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -d <span class=\"token string\">\"<span class=\"token variable\">$dir_name</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"No such directory: '<span class=\"token variable\">$dir_name</span>'\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span> <span class=\"token builtin class-name\">cd</span> <span class=\"token string\">\"<span class=\"token variable\">$dir_name</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Cannot cd to '<span class=\"token variable\">$dir_name</span>'\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span> <span class=\"token function\">rm</span> *<span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"File deletion failed. Check results\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"case-结构\"><a href=\"#case-结构\" class=\"headerlink\" title=\"case 结构\"></a>case 结构</h2><p><code>case</code>结构用于多值判断，可以为每个值指定对应的命令，跟包含多个<code>elif</code>的<code>if</code>结构等价，但是语义更好。它的语法如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">case</span> expression <span class=\"token keyword\">in</span>\n  pattern <span class=\"token punctuation\">)</span>\n    commands <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  pattern <span class=\"token punctuation\">)</span>\n    commands <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>expression</code>是一个表达式，<code>pattern</code>是表达式的值或者一个模式，可以有多条，用来匹配多个值，每条以两个分号（<code>;</code>）结尾。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"输入一个1到3之间的数字（包含两端）> \"</span>\n<span class=\"token builtin class-name\">read</span> character\n<span class=\"token keyword\">case</span> <span class=\"token variable\">$character</span> <span class=\"token keyword\">in</span>\n  <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  * <span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> 输入不符合要求\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，最后一条匹配语句的模式是<code>*</code>，这个通配符可以匹配其他字符和没有输入字符的情况，类似<code>if</code>的<code>else</code>部分。</p>\n<p>下面是另一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">OS</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -s<span class=\"token variable\">)</span></span>\n\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$OS</span>\"</span> <span class=\"token keyword\">in</span>\n  FreeBSD<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is FreeBSD\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  Darwin<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is Mac OSX\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  AIX<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is AIX\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  Minix<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is Minix\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  Linux<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is Linux\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  *<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Failed to identify this OS\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子判断当前是什么操作系统。</p>\n<p><code>case</code>的匹配模式可以使用各种通配符，下面是一些例子。</p>\n<ul>\n<li><code>a)</code>：匹配<code>a</code>。</li>\n<li><code>a|b)</code>：匹配<code>a</code>或<code>b</code>。</li>\n<li><code>[[:alpha:]])</code>：匹配单个字母。</li>\n<li><code>???)</code>：匹配3个字符的单词。</li>\n<li><code>*.txt)</code>：匹配<code>.txt</code>结尾。</li>\n<li><code>*)</code>：匹配任意输入，通过作为<code>case</code>结构的最后一个模式。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"输入一个字母或数字 > \"</span>\n<span class=\"token builtin class-name\">read</span> character\n<span class=\"token keyword\">case</span> <span class=\"token variable\">$character</span> <span class=\"token keyword\">in</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:lower:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:upper:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"输入了字母 <span class=\"token variable\">$character</span>\"</span>\n                              <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>                     <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"输入了数字 <span class=\"token variable\">$character</span>\"</span>\n                              <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  * <span class=\"token punctuation\">)</span>                         <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"输入不符合要求\"</span>\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，使用通配符<code>[[:lower:]] | [[:upper:]]</code>匹配字母，<code>[0-9]</code>匹配数字。</p>\n<p>Bash 4.0之前，<code>case</code>结构只能匹配一个条件，然后就会退出<code>case</code>结构。Bash 4.0之后，允许匹配多个条件，这时可以用<code>;;&amp;</code>终止每个条件块。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># test.sh</span>\n\n<span class=\"token builtin class-name\">read</span> -n <span class=\"token number\">1</span> -p <span class=\"token string\">\"Type a character > \"</span>\n<span class=\"token builtin class-name\">echo</span>\n<span class=\"token keyword\">case</span> <span class=\"token environment constant\">$REPLY</span> <span class=\"token keyword\">in</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:upper:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"'<span class=\"token environment constant\">$REPLY</span>' is upper case.\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:lower:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"'<span class=\"token environment constant\">$REPLY</span>' is lower case.\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:alpha:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"'<span class=\"token environment constant\">$REPLY</span>' is alphabetic.\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:digit:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"'<span class=\"token environment constant\">$REPLY</span>' is a digit.\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:graph:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"'<span class=\"token environment constant\">$REPLY</span>' is a visible character.\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:punct:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"'<span class=\"token environment constant\">$REPLY</span>' is a punctuation symbol.\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:space:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"'<span class=\"token environment constant\">$REPLY</span>' is a whitespace character.\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:xdigit:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"'<span class=\"token environment constant\">$REPLY</span>' is a hexadecimal digit.\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行上面的脚本，会得到下面的结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ test.sh\nType a character <span class=\"token operator\">></span> a\n<span class=\"token string\">'a'</span> is lower case.\n<span class=\"token string\">'a'</span> is alphabetic.\n<span class=\"token string\">'a'</span> is a visible character.\n<span class=\"token string\">'a'</span> is a hexadecimal digit.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到条件语句结尾添加了<code>;;&amp;</code>以后，在匹配一个条件之后，并没有退出<code>case</code>结构，而是继续判断下一个条件。</p>\n<h2 id=\"参考链接-2\"><a href=\"#参考链接-2\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://linuxcommand.org/tlcl.php\">The Linux Command Line</a>, William Shotts</li>\n</ul>\n<h1 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h1><p>Bash 提供三种循环语法<code>for</code>、<code>while</code>和<code>until</code>。</p>\n<h2 id=\"while-循环\"><a href=\"#while-循环\" class=\"headerlink\" title=\"while 循环\"></a>while 循环</h2><p><code>while</code>循环有一个判断条件，只要符合条件，就不断循环执行指定的语句。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> condition<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  commands\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，只要满足条件<code>condition</code>，就会执行命令<code>commands</code>。然后，再次判断是否满足条件<code>condition</code>，只要满足，就会一直执行下去。只有不满足条件，才会退出循环。</p>\n<p>循环条件<code>condition</code>可以使用<code>test</code>命令，跟<code>if</code>结构的判断条件写法一致。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">number</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$number</span>\"</span> -lt <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Number = <span class=\"token variable\">$number</span>\"</span>\n  <span class=\"token assign-left variable\">number</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，只要变量<code>$number</code>小于10，就会不断加1，直到<code>$number</code>等于10，然后退出循环。</p>\n<p>关键字<code>do</code>可以跟<code>while</code>不在同一行，这时两者之间不需要使用分号分隔。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hi, while looping ...'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子会无限循环，可以按下 Ctrl + c 停止。</p>\n<p><code>while</code>循环写成一行，也是可以的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hi, while looping ...'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>while</code>的条件部分也可以是执行一个命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'ECHO'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hi, while looping ...'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，判断条件是<code>echo &#39;ECHO&#39;</code>。由于这个命令总是执行成功，所以上面命令会产生无限循环。</p>\n<p><code>while</code>的条件部分可以执行任意数量的命令，但是执行结果的真伪只看最后一个命令的执行结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hi, looping ...'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码运行后，不会有任何输出，因为<code>while</code>的最后一个命令是<code>false</code>。</p>\n<h2 id=\"until-循环\"><a href=\"#until-循环\" class=\"headerlink\" title=\"until 循环\"></a>until 循环</h2><p><code>until</code>循环与<code>while</code>循环恰好相反，只要不符合判断条件（判断条件失败），就不断循环执行指定的语句。一旦符合判断条件，就退出循环。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">until</span> condition<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  commands\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>关键字<code>do</code>可以与<code>until</code>不写在同一行，这时两者之间不需要分号分隔。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">until</span> condition\n<span class=\"token keyword\">do</span>\n  commands\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">until</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hi, until looping ...'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\nHi, <span class=\"token keyword\">until</span> looping <span class=\"token punctuation\">..</span>.\nHi, <span class=\"token keyword\">until</span> looping <span class=\"token punctuation\">..</span>.\nHi, <span class=\"token keyword\">until</span> looping <span class=\"token punctuation\">..</span>.\n^C<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>until</code>的部分一直为<code>false</code>，导致命令无限运行，必须按下 Ctrl + c 终止。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">number</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">until</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$number</span>\"</span> -ge <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Number = <span class=\"token variable\">$number</span>\"</span>\n  <span class=\"token assign-left variable\">number</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，只要变量<code>number</code>小于10，就会不断加1，直到<code>number</code>大于等于10，就退出循环。</p>\n<p><code>until</code>的条件部分也可以是一个命令，表示在这个命令执行成功之前，不断重复尝试。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">until</span> <span class=\"token function\">cp</span> <span class=\"token variable\">$1</span> <span class=\"token variable\">$2</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Attempt to copy failed. waiting...'</span>\n  <span class=\"token function\">sleep</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子表示，只要<code>cp $1 $2</code>这个命令执行不成功，就5秒钟后再尝试一次，直到成功为止。</p>\n<p><code>until</code>循环都可以转为<code>while</code>循环，只要把条件设为否定即可。上面这个例子可以改写如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> <span class=\"token operator\">!</span> <span class=\"token function\">cp</span> <span class=\"token variable\">$1</span> <span class=\"token variable\">$2</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Attempt to copy failed. waiting...'</span>\n  <span class=\"token function\">sleep</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一般来说，<code>until</code>用得比较少，完全可以统一都使用<code>while</code>。</p>\n<h2 id=\"for…in-循环\"><a href=\"#for…in-循环\" class=\"headerlink\" title=\"for…in 循环\"></a>for…in 循环</h2><p><code>for...in</code>循环用于遍历列表的每一项。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">variable</span> <span class=\"token keyword\">in</span> list\n<span class=\"token keyword\">do</span>\n  commands\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面语法中，<code>for</code>循环会依次从<code>list</code>列表中取出一项，作为变量<code>variable</code>，然后在循环体中进行处理。</p>\n<p>关键词<code>do</code>可以跟<code>for</code>写在同一行，两者使用分号分隔。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">variable</span> <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  commands\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> word1 word2 word3<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>word1 word2 word3</code>是一个包含三个单词的列表，变量<code>i</code>依次等于<code>word1</code>、<code>word2</code>、<code>word3</code>，命令<code>echo $i</code>则会相应地执行三次。</p>\n<p>列表可以由通配符产生。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> *.png<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token function\">ls</span> -l <span class=\"token variable\">$i</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>*.png</code>会替换成当前目录中所有 PNG 图片文件，变量<code>i</code>会依次等于每一个文件。</p>\n<p>列表也可以通过子命令产生。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> ~/.bash_profile<span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Word <span class=\"token variable\">$count</span> (<span class=\"token variable\">$i</span>) contains <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> -n $i <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -c<span class=\"token variable\">)</span></span> characters\"</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>cat ~/.bash_profile</code>命令会输出<code>~/.bash_profile</code>文件的内容，然后通过遍历每一个词，计算该文件一共包含多少个词，以及每个词有多少个字符。</p>\n<p><code>in list</code>的部分可以省略，这时<code>list</code>默认等于脚本的所有参数<code>$@</code>。但是，为了可读性，最好还是不要省略，参考下面的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> filename<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$filename</span>\"</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># 等同于</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">filename</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$@</span>\"</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$filename</span>\"</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在函数体中也是一样的，<code>for...in</code>循环省略<code>in list</code>的部分，则<code>list</code>默认等于函数的所有参数。</p>\n<h2 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h2><p><code>for</code>循环还支持 C 语言的循环语法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> expression1<span class=\"token punctuation\">;</span> expression2<span class=\"token punctuation\">;</span> expression3 <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  commands\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>expression1</code>用来初始化循环条件，<code>expression2</code>用来决定循环结束的条件，<code>expression3</code>在每次循环迭代的末尾执行，用于更新值。</p>\n<p>注意，循环条件放在双重圆括号之中。另外，圆括号之中使用变量，不必加上美元符号<code>$</code>。</p>\n<p>它等同于下面的<code>while</code>循环。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\"><span class=\"token punctuation\">((</span> expression1 <span class=\"token punctuation\">))</span></span>\n<span class=\"token keyword\">while</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> expression2 <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  commands\n  <span class=\"token variable\"><span class=\"token punctuation\">((</span> expression3 <span class=\"token punctuation\">))</span></span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，初始化变量<code>i</code>的值为0，循环执行的条件是<code>i</code>小于5。每次循环迭代结束时，<code>i</code>的值加1。</p>\n<p><code>for</code>条件部分的三个语句，都可以省略。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">))</span></span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">read</span> var\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$var</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\".\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">break</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面脚本会反复读取命令行输入，直到用户输入了一个点（<code>.</code>）为止，才会跳出循环。</p>\n<h2 id=\"break，continue\"><a href=\"#break，continue\" class=\"headerlink\" title=\"break，continue\"></a>break，continue</h2><p>Bash 提供了两个内部命令<code>break</code>和<code>continue</code>，用来在循环内部跳出循环。</p>\n<p><code>break</code>命令立即终止循环，程序继续执行循环块之后的语句，即不再执行剩下的循环。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">number</span> <span class=\"token keyword\">in</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"number is <span class=\"token variable\">$number</span>\"</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$number</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">break</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子只会打印3行结果。一旦变量<code>$number</code>等于3，就会跳出循环，不再继续执行。</p>\n<p><code>continue</code>命令立即终止本轮循环，开始执行下一轮循环。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"What file do you want to test?\"</span> filename\n<span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -e <span class=\"token string\">\"<span class=\"token variable\">$filename</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The file does not exist.\"</span>\n    <span class=\"token builtin class-name\">continue</span>\n  <span class=\"token keyword\">fi</span>\n\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"You entered a valid file..\"</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，只要用户输入的文件不存在，<code>continue</code>命令就会生效，直接进入下一轮循环（让用户重新输入文件名），不再执行后面的打印语句。</p>\n<h2 id=\"select-结构\"><a href=\"#select-结构\" class=\"headerlink\" title=\"select 结构\"></a>select 结构</h2><p><code>select</code>结构主要用来生成简单的菜单。它的语法与<code>for...in</code>循环基本一致。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">select</span> name\n<span class=\"token punctuation\">[</span>in list<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">do</span>\n  commands\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Bash 会对<code>select</code>依次进行下面的处理。</p>\n<ol>\n<li><code>select</code>生成一个菜单，内容是列表<code>list</code>的每一项，并且每一项前面还有一个数字编号。</li>\n<li>Bash 提示用户选择一项，输入它的编号。</li>\n<li>用户输入以后，Bash 会将该项的内容存在变量<code>name</code>，该项的编号存入环境变量<code>REPLY</code>。如果用户没有输入，就按回车键，Bash 会重新输出菜单，让用户选择。</li>\n<li>执行命令体<code>commands</code>。</li>\n<li>执行结束后，回到第一步，重复这个过程。</li>\n</ol>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># select.sh</span>\n\n<span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">brand</span> <span class=\"token keyword\">in</span> Samsung Sony iphone symphony Walton\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"You have chosen <span class=\"token variable\">$brand</span>\"</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行上面的脚本，Bash 会输出一个品牌的列表，让用户选择。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./select.sh\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> Samsung\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> Sony\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> iphone\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> symphony\n<span class=\"token number\">5</span><span class=\"token punctuation\">)</span> Walton\n<span class=\"token comment\">#?</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果用户没有输入编号，直接按回车键。Bash 就会重新输出一遍这个菜单，直到用户按下<code>Ctrl + c</code>，退出执行。</p>\n<p><code>select</code>可以与<code>case</code>结合，针对不同项，执行不同的命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Which Operating System do you like?\"</span>\n\n<span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">os</span> <span class=\"token keyword\">in</span> Ubuntu LinuxMint Windows8 Windows10 WindowsXP\n<span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">case</span> <span class=\"token variable\">$os</span> <span class=\"token keyword\">in</span>\n    <span class=\"token string\">\"Ubuntu\"</span><span class=\"token operator\">|</span><span class=\"token string\">\"LinuxMint\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"I also use <span class=\"token variable\">$os</span>.\"</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token string\">\"Windows8\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"Windows10\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"WindowsXP\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Why don't you try Linux?\"</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    *<span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Invalid entry.\"</span>\n      <span class=\"token builtin class-name\">break</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">esac</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>case</code>针对用户选择的不同项，执行不同的命令。</p>\n<h2 id=\"参考链接-3\"><a href=\"#参考链接-3\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://linuxhint.com/bash_select_command/\">Bash Select Command</a>, Fahmida Yesmin</li>\n</ul>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>本章介绍 Bash 函数的用法。</p>\n<h2 id=\"简介-4\"><a href=\"#简介-4\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>函数（function）是可以重复使用的代码片段，有利于代码的复用。它与别名（alias）的区别是，别名只适合封装简单的单个命令，函数则可以封装复杂的多行命令。</p>\n<p>函数总是在当前 Shell 执行，这是跟脚本的一个重大区别，Bash 会新建一个子 Shell 执行脚本。如果函数与脚本同名，函数会优先执行。但是，函数的优先级不如别名，即如果函数与别名同名，那么别名优先执行。</p>\n<p>Bash 函数定义的语法有两种。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 第一种</span>\n<span class=\"token function-name function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\"># codes</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 第二种</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\"># codes</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>fn</code>是自定义的函数名，函数代码就写在大括号之中。这两种写法是等价的。</p>\n<p>下面是一个简单函数的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function-name function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello <span class=\"token variable\">$1</span>\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，函数体里面的<code>$1</code>表示函数调用时的第一个参数。</p>\n<p>调用时，就直接写函数名，参数跟在函数名后面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hello world\nHello world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面是一个多行函数的例子，显示当前日期时间。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function-name function\">today</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"Today's date is: \"</span>\n  <span class=\"token function\">date</span> +<span class=\"token string\">\"%A, %B %-d, %Y\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>删除一个函数，可以使用<code>unset</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">unset</span> -f functionName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看当前 Shell 已经定义的所有函数，可以使用<code>declare</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的<code>declare</code>命令不仅会输出函数名，还会输出所有定义。输出顺序是按照函数名的字母表顺序。由于会输出很多内容，最好通过管道命令配合<code>more</code>或<code>less</code>使用。</p>\n<p><code>declare</code>命令还支持查看单个函数的定义。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -f functionName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>declare -F</code>可以输出所有已经定义的函数名，不含函数体。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -F<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参数变量\"><a href=\"#参数变量\" class=\"headerlink\" title=\"参数变量\"></a>参数变量</h2><p>函数体内可以使用参数变量，获取函数参数。函数的参数变量，与脚本参数变量是一致的。</p>\n<ul>\n<li><code>$1</code>~<code>$9</code>：函数的第一个到第9个的参数。</li>\n<li><code>$0</code>：函数所在的脚本名。</li>\n<li><code>$#</code>：函数的参数总数。</li>\n<li><code>$@</code>：函数的全部参数，参数之间使用空格分隔。</li>\n<li><code>$*</code>：函数的全部参数，参数之间使用变量<code>$IFS</code>值的第一个字符分隔，默认为空格，但是可以自定义。</li>\n</ul>\n<p>如果函数的参数多于9个，那么第10个参数可以用<code>$&#123;10&#125;</code>的形式引用，以此类推。</p>\n<p>下面是一个示例脚本<code>test.sh</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># test.sh</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">alice</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"alice: <span class=\"token variable\">$@</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>: <span class=\"token variable\">$1</span> <span class=\"token variable\">$2</span> <span class=\"token variable\">$3</span> <span class=\"token variable\">$4</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$#</span> arguments\"</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\nalice <span class=\"token keyword\">in</span> wonderland<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行该脚本，结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> test.sh\nalice: <span class=\"token keyword\">in</span> wonderland\ntest.sh: <span class=\"token keyword\">in</span> wonderland\n<span class=\"token number\">2</span> arguments<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，由于函数<code>alice</code>只有第一个和第二个参数，所以第三个和第四个参数为空。</p>\n<p>下面是一个日志函数的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">log_msg</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"[<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span> <span class=\"token string\">'+ %F %T'</span><span class=\"token variable\">`</span></span> ]: <span class=\"token variable\">$@</span>\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>使用方法如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ log_msg <span class=\"token string\">\"This is sample log message\"</span>\n<span class=\"token punctuation\">[</span> <span class=\"token number\">2018</span>-08-16 <span class=\"token number\">19</span>:56:34 <span class=\"token punctuation\">]</span>: This is sample log message<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"return-命令\"><a href=\"#return-命令\" class=\"headerlink\" title=\"return 命令\"></a>return 命令</h2><p><code>return</code>命令用于从函数返回一个值。函数执行到这条命令，就不再往下执行了，直接返回了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">func_return_value</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">return</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>函数将返回值返回给调用者。如果命令行直接执行函数，下一个命令可以用<code>$?</code>拿到返回值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ func_return_value\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Value returned by function is: <span class=\"token variable\">$?</span>\"</span>\nValue returned by <span class=\"token keyword\">function</span> is: <span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>return</code>后面不跟参数，只用于返回也是可以的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">name</span> <span class=\"token punctuation\">&#123;</span>\n  commands\n  <span class=\"token builtin class-name\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"全局变量和局部变量，local-命令\"><a href=\"#全局变量和局部变量，local-命令\" class=\"headerlink\" title=\"全局变量和局部变量，local 命令\"></a>全局变量和局部变量，local 命令</h2><p>Bash 函数体内直接声明的变量，属于全局变量，整个脚本都可以读取。这一点需要特别小心。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 脚本 test.sh</span>\n<span class=\"token function-name function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"fn: foo = <span class=\"token variable\">$foo</span>\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\nfn\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"global: foo = <span class=\"token variable\">$foo</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面脚本的运行结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> test.sh\nfn: foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nglobal: foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，变量<code>$foo</code>是在函数<code>fn</code>内部声明的，函数体外也可以读取。</p>\n<p>函数体内不仅可以声明全局变量，还可以修改全局变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash</span>\n<span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n\n<span class=\"token function-name function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">&#125;</span>\n\nfn\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$foo</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码执行后，输出的变量<code>$foo</code>值为2。</p>\n<p>函数里面可以用<code>local</code>命令声明局部变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash</span>\n<span class=\"token comment\"># 脚本 test.sh</span>\n<span class=\"token function-name function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">local</span> foo\n  <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"fn: foo = <span class=\"token variable\">$foo</span>\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\nfn\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"global: foo = <span class=\"token variable\">$foo</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面脚本的运行结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> test.sh\nfn: foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nglobal: foo <span class=\"token operator\">=</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>local</code>命令声明的<code>$foo</code>变量，只在函数体内有效，函数体外没有定义。</p>\n<h2 id=\"参考链接-4\"><a href=\"#参考链接-4\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://www.linuxtechi.com/define-use-functions-linux-shell-script/\">How to define and use functions in Linux Shell Script</a>, by Pradeep Kumar</li>\n</ul>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>数组（array）是一个包含多个值的变量。成员的编号从0开始，数量没有上限，也没有要求成员被连续索引。</p>\n<h2 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h2><p>数组可以采用逐个赋值的方法创建。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ARRAY<span class=\"token punctuation\">[</span>INDEX<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>value<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面语法中，<code>ARRAY</code>是数组的名字，可以是任意合法的变量名。<code>INDEX</code>是一个大于或等于零的整数，也可以是算术表达式。注意数组第一个元素的下标是0， 而不是1。</p>\n<p>下面创建一个三个成员的数组。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>val\n$ array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>val\n$ array<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>val<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>数组也可以采用一次性赋值的方式创建。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">ARRAY</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>value1 value2 <span class=\"token punctuation\">..</span>. valueN<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 等同于</span>\n\n<span class=\"token assign-left variable\">ARRAY</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n  value1\n  value2\n  value3\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>采用上面方式创建数组时，可以按照默认顺序赋值，也可以在每个值前面指定位置。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">array</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a b c<span class=\"token punctuation\">)</span>\n$ <span class=\"token assign-left variable\">array</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>c <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">)</span>\n\n$ <span class=\"token assign-left variable\">days</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Sun Mon Tue Wed Thu Fri Sat<span class=\"token punctuation\">)</span>\n$ <span class=\"token assign-left variable\">days</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Sun <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Mon <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Tue <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Wed <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Thu <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Fri <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Sat<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>只为某些值指定位置，也是可以的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">names</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>hatter <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>duchess alice<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，<code>hatter</code>是数组的0号位置，<code>duchess</code>是5号位置，<code>alice</code>是6号位置。</p>\n<p>没有赋值的数组元素的默认值是空字符串。</p>\n<p>定义数组的时候，可以使用通配符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">mp3s</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> *.mp3 <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，将当前目录的所有 MP3 文件，放进一个数组。</p>\n<p>先用<code>declare -a</code>命令声明一个数组，也是可以的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -a ARRAYNAME<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>read -a</code>命令则是将用户的命令行输入，存入一个数组。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">read</span> -a dice<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令将用户的命令行输入，存入数组<code>dice</code>。</p>\n<h2 id=\"读取数组\"><a href=\"#读取数组\" class=\"headerlink\" title=\"读取数组\"></a>读取数组</h2><h3 id=\"读取单个元素\"><a href=\"#读取单个元素\" class=\"headerlink\" title=\"读取单个元素\"></a>读取单个元素</h3><p>读取数组指定位置的成员，要使用下面的语法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>&#125;</span>     <span class=\"token comment\"># i 是索引</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面语法里面的大括号是必不可少的，否则 Bash 会把索引部分<code>[i]</code>按照原样输出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;array<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>&#125;</span>\na\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，数组的第一个元素是<code>a</code>。如果不加大括号，Bash 会直接读取<code>$array</code>首成员的值，然后将<code>[0]</code>按照原样输出。</p>\n<h3 id=\"读取所有成员\"><a href=\"#读取所有成员\" class=\"headerlink\" title=\"读取所有成员\"></a>读取所有成员</h3><p><code>@</code>和<code>*</code>是数组的特殊索引，表示返回数组的所有成员。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a b c d e f<span class=\"token punctuation\">)</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\na b c d e f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这两个特殊索引配合<code>for</code>循环，就可以用来遍历数组。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;names<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>@</code>和<code>*</code>放不放在双引号之中，是有差别的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">activities</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> swimming <span class=\"token string\">\"water skiing\"</span> canoeing <span class=\"token string\">\"white-water rafting\"</span> surfing <span class=\"token punctuation\">)</span>\n$ <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">act</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;activities<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Activity: <span class=\"token variable\">$act</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token keyword\">done</span>\n\nActivity: swimming\nActivity: water\nActivity: skiing\nActivity: canoeing\nActivity: white-water\nActivity: rafting\nActivity: surfing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子中，数组<code>activities</code>实际包含5个成员，但是<code>for...in</code>循环直接遍历<code>$&#123;activities[@]&#125;</code>，导致返回7个结果。为了避免这种情况，一般把<code>$&#123;activities[@]&#125;</code>放在双引号之中。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">act</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;activities<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Activity: <span class=\"token variable\">$act</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token keyword\">done</span>\n\nActivity: swimming\nActivity: water skiing\nActivity: canoeing\nActivity: white-water rafting\nActivity: surfing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>$&#123;activities[@]&#125;</code>放在双引号之中，遍历就会返回正确的结果。</p>\n<p><code>$&#123;activities[*]&#125;</code>不放在双引号之中，跟<code>$&#123;activities[@]&#125;</code>不放在双引号之中是一样的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">act</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;activities<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Activity: <span class=\"token variable\">$act</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token keyword\">done</span>\n\nActivity: swimming\nActivity: water\nActivity: skiing\nActivity: canoeing\nActivity: white-water\nActivity: rafting\nActivity: surfing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>$&#123;activities[*]&#125;</code>放在双引号之中，所有成员就会变成单个字符串返回。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">act</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;activities<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Activity: <span class=\"token variable\">$act</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token keyword\">done</span>\n\nActivity: swimming water skiing canoeing white-water rafting surfing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以，拷贝一个数组的最方便方法，就是写成下面这样。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">hobbies</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;activities<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span> <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，数组<code>activities</code>被拷贝给了另一个数组<code>hobbies</code>。</p>\n<p>这种写法也可以用来为新数组添加成员。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">hobbies</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;activities<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span> diving <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面例子中，新数组<code>hobbies</code>在数组<code>activities</code>的所有成员之后，又添加了一个成员。</p>\n<h3 id=\"默认位置\"><a href=\"#默认位置\" class=\"headerlink\" title=\"默认位置\"></a>默认位置</h3><p>如果读取数组成员时，没有读取指定哪一个位置的成员，默认使用<code>0</code>号位置。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">declare</span> -a foo\n$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span>A\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>&#125;</span>\nA<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>foo</code>是一个数组，赋值的时候不指定位置，实际上是给<code>foo[0]</code>赋值。</p>\n<p>引用一个不带下标的数组变量，则引用的是<code>0</code>号位置的数组元素。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a b c d e f<span class=\"token punctuation\">)</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo&#125;</span>\na\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$foo</span>\na<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，引用数组元素的时候，没有指定位置，结果返回的是<code>0</code>号位置。</p>\n<h2 id=\"数组的长度\"><a href=\"#数组的长度\" class=\"headerlink\" title=\"数组的长度\"></a>数组的长度</h2><p>要想知道数组的长度（即一共包含多少成员），可以使用下面两种语法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>array<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>array<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>foo\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>a<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token number\">1</span>\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>a<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，把字符串赋值给<code>100</code>位置的数组元素，这时的数组只有一个元素。</p>\n<p>注意，如果用这种语法去读取具体的数组成员，就会返回该成员的字符串长度。这一点必须小心。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>foo\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>a<span class=\"token punctuation\">[</span>100<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>$&#123;#a[100]&#125;</code>实际上是返回数组第100号成员<code>a[100]</code>的值（<code>foo</code>）的字符串长度。</p>\n<h2 id=\"提取数组序号\"><a href=\"#提取数组序号\" class=\"headerlink\" title=\"提取数组序号\"></a>提取数组序号</h2><p><code>$&#123;!array[@]&#125;</code>或<code>$&#123;!array[*]&#125;</code>，可以返回数组的成员序号，即哪些位置是有值的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">arr</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b <span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>c<span class=\"token punctuation\">)</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">!</span>arr<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token number\">5</span> <span class=\"token number\">9</span> <span class=\"token number\">23</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">!</span>arr<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token number\">5</span> <span class=\"token number\">9</span> <span class=\"token number\">23</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，数组的5、9、23号位置有值。</p>\n<p>利用这个语法，也可以通过<code>for</code>循环遍历数组。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">arr</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a b c d<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">!</span>arr<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"提取数组成员\"><a href=\"#提取数组成员\" class=\"headerlink\" title=\"提取数组成员\"></a>提取数组成员</h2><p><code>$&#123;array[@]:position:length&#125;</code>的语法可以提取数组成员。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">food</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> apples bananas cucumbers dates eggs fajitas grapes <span class=\"token punctuation\">)</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;food<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>1<span class=\"token operator\">:</span>1&#125;</span>\nbananas\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;food<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>1<span class=\"token operator\">:</span>3&#125;</span>\nbananas cucumbers dates<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，<code>$&#123;food[@]:1:1&#125;</code>返回从数组1号位置开始的1个成员，<code>$&#123;food[@]:1:3&#125;</code>返回从1号位置开始的3个成员。</p>\n<p>如果省略长度参数<code>length</code>，则返回从指定位置开始的所有成员。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;food<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>4&#125;</span>\neggs fajitas grapes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子返回从4号位置开始到结束的所有成员。</p>\n<h2 id=\"追加数组成员\"><a href=\"#追加数组成员\" class=\"headerlink\" title=\"追加数组成员\"></a>追加数组成员</h2><p>数组末尾追加成员，可以使用<code>+=</code>赋值运算符。它能够自动地把值追加到数组末尾。否则，就需要知道数组的最大序号，比较麻烦。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a b c<span class=\"token punctuation\">)</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\na b c\n\n$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>d e f<span class=\"token punctuation\">)</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\na b c d e f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"删除数组\"><a href=\"#删除数组\" class=\"headerlink\" title=\"删除数组\"></a>删除数组</h2><p>删除一个数组成员，使用<code>unset</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a b c d e f<span class=\"token punctuation\">)</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\na b c d e f\n\n$ <span class=\"token builtin class-name\">unset</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\na b d e f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，删除了数组中的第三个元素，下标为2。</p>\n<p>将某个成员设为空值，可以从返回值中“隐藏”这个成员。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a b c d e f<span class=\"token punctuation\">)</span>\n$ foo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">''</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\na c d e f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，将数组的第二个成员设为空字符串，数组的返回值中，这个成员就“隐藏”了。</p>\n<p>注意，这里是“隐藏”，而不是删除，因为这个成员仍然存在，只是值变成了空值。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a b c d e f<span class=\"token punctuation\">)</span>\n$ foo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">''</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>foo<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token number\">6</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">!</span>foo<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，第二个成员设为空值后，数组仍然包含6个成员。</p>\n<p>由于空值就是空字符串，所以下面这样写也有隐藏效果，但是不建议这种写法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ foo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的写法也相当于“隐藏”了数组的第二个成员。</p>\n<p>直接将数组变量赋值为空字符串，相当于“隐藏”数组的第一个成员。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a b c d e f<span class=\"token punctuation\">)</span>\n$ <span class=\"token assign-left variable\">foo</span><span class=\"token operator\">=</span><span class=\"token string\">''</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;foo<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\nb c d e f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的写法相当于“隐藏”了数组的第一个成员。</p>\n<p><code>unset ArrayName</code>可以清空整个数组。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">unset</span> ARRAY\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;ARRAY<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token operator\">&lt;</span>--no output--<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"关联数组\"><a href=\"#关联数组\" class=\"headerlink\" title=\"关联数组\"></a>关联数组</h2><p>Bash 的新版本支持关联数组。关联数组使用字符串而不是整数作为数组索引。</p>\n<p><code>declare -A</code>可以声明关联数组。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">declare</span> -A colors\ncolors<span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"#ff0000\"</span>\ncolors<span class=\"token punctuation\">[</span><span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"#00ff00\"</span>\ncolors<span class=\"token punctuation\">[</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"#0000ff\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>关联数组必须用带有<code>-A</code>选项的<code>declare</code>命令声明创建。相比之下，整数索引的数组，可以直接使用变量名创建数组，关联数组就不行。</p>\n<p>访问关联数组成员的方式，几乎与整数索引数组相同。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>\"blue\"<span class=\"token punctuation\">]</span>&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"set-命令，shopt-命令\"><a href=\"#set-命令，shopt-命令\" class=\"headerlink\" title=\"set 命令，shopt 命令\"></a>set 命令，shopt 命令</h1><p><code>set</code>命令是 Bash 脚本的重要环节，却常常被忽视，导致脚本的安全性和可维护性出问题。本章介绍<code>set</code>的基本用法，帮助你写出更安全的 Bash 脚本。</p>\n<h2 id=\"简介-5\"><a href=\"#简介-5\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>我们知道，Bash 执行脚本时，会创建一个子 Shell。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> script.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，<code>script.sh</code>是在一个子 Shell 里面执行。这个子 Shell 就是脚本的执行环境，Bash 默认给定了这个环境的各种参数。</p>\n<p><code>set</code>命令用来修改子 Shell 环境的运行参数，即定制环境。一共有十几个参数可以定制，<a href=\"https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html\">官方手册</a>有完整清单，本章介绍其中最常用的几个。</p>\n<p>顺便提一下，如果命令行下不带任何参数，直接运行<code>set</code>，会显示所有的环境变量和 Shell 函数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">set</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"set-u\"><a href=\"#set-u\" class=\"headerlink\" title=\"set -u\"></a>set -u</h2><p>执行脚本时，如果遇到不存在的变量，Bash 默认忽略它。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$a</span>\n<span class=\"token builtin class-name\">echo</span> bar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>$a</code>是一个不存在的变量。执行结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> script.sh\n\nbar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，<code>echo $a</code>输出了一个空行，Bash 忽略了不存在的<code>$a</code>，然后继续执行<code>echo bar</code>。大多数情况下，这不是开发者想要的行为，遇到变量不存在，脚本应该报错，而不是一声不响地往下执行。</p>\n<p><code>set -u</code>就用来改变这种行为。脚本在头部加上它，遇到不存在的变量就会报错，并停止执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n<span class=\"token builtin class-name\">set</span> -u\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$a</span>\n<span class=\"token builtin class-name\">echo</span> bar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> script.sh\nbash: script.sh:行4: a: 未绑定的变量<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>可以看到，脚本报错了，并且不再执行后面的语句。</p>\n<p><code>-u</code>还有另一种写法<code>-o nounset</code>，两者是等价的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">set</span> -o nounset<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"set-x\"><a href=\"#set-x\" class=\"headerlink\" title=\"set -x\"></a>set -x</h2><p>默认情况下，脚本执行后，只输出运行结果，没有其他内容。如果多个命令连续执行，它们的运行结果就会连续输出。有时会分不清，某一段内容是什么命令产生的。</p>\n<p><code>set -x</code>用来在运行结果之前，先输出执行的那一行命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n<span class=\"token builtin class-name\">set</span> -x\n\n<span class=\"token builtin class-name\">echo</span> bar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行上面的脚本，结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> script.sh\n+ <span class=\"token builtin class-name\">echo</span> bar\nbar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，执行<code>echo bar</code>之前，该命令会先打印出来，行首以<code>+</code>表示。这对于调试复杂的脚本是很有用的。</p>\n<p><code>-x</code>还有另一种写法<code>-o xtrace</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">set</span> -o xtrace<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>脚本当中如果要关闭命令输出，可以使用<code>set +x</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">number</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n\n<span class=\"token builtin class-name\">set</span> -x\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$number</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Number equals 1\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Number does not equal 1\"</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token builtin class-name\">set</span> +x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的例子中，只对特定的代码段打开命令输出。</p>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>如果脚本里面有运行失败的命令（返回值非<code>0</code>），Bash 默认会继续执行后面的命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\nfoo\n<span class=\"token builtin class-name\">echo</span> bar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面脚本中，<code>foo</code>是一个不存在的命令，执行时会报错。但是，Bash 会忽略这个错误，继续往下执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> script.sh\nscript.sh:行3: foo: 未找到命令\nbar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，Bash 只是显示有错误，并没有终止执行。</p>\n<p>这种行为很不利于脚本安全和除错。实际开发中，如果某个命令失败，往往需要脚本停止执行，防止错误累积。这时，一般采用下面的写法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的写法表示只要<code>command</code>有非零返回值，脚本就会停止执行。</p>\n<p>如果停止执行之前需要完成多个操作，就要采用下面三种写法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 写法一</span>\n<span class=\"token builtin class-name\">command</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"command failed\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 写法二</span>\n<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span> <span class=\"token builtin class-name\">command</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"command failed\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 写法三</span>\n<span class=\"token builtin class-name\">command</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$?</span>\"</span> -ne <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"command failed\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，除了停止执行，还有一种情况。如果两个命令有继承关系，只有第一个命令成功了，才能继续执行第二个命令，那么就要采用下面的写法。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">command1 <span class=\"token operator\">&amp;&amp;</span> command2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"set-e\"><a href=\"#set-e\" class=\"headerlink\" title=\"set -e\"></a>set -e</h2><p>上面这些写法多少有些麻烦，容易疏忽。<code>set -e</code>从根本上解决了这个问题，它使得脚本只要发生错误，就终止执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n<span class=\"token builtin class-name\">set</span> -e\n\nfoo\n<span class=\"token builtin class-name\">echo</span> bar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> script.sh\nscript.sh:行4: foo: 未找到命令<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>可以看到，第4行执行失败以后，脚本就终止执行了。</p>\n<p><code>set -e</code>根据返回值来判断，一个命令是否运行失败。但是，某些命令的非零返回值可能不表示失败，或者开发者希望在命令失败的情况下，脚本继续执行下去。这时可以暂时关闭<code>set -e</code>，该命令执行结束后，再重新打开<code>set -e</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">set</span> +e\ncommand1\ncommand2\n<span class=\"token builtin class-name\">set</span> -e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>set +e</code>表示关闭<code>-e</code>选项，<code>set -e</code>表示重新打开<code>-e</code>选项。</p>\n<p>还有一种方法是使用<code>command || true</code>，使得该命令即使执行失败，脚本也不会终止执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token builtin class-name\">set</span> -e\n\nfoo <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span>\n<span class=\"token builtin class-name\">echo</span> bar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>true</code>使得这一行语句总是会执行成功，后面的<code>echo bar</code>会执行。</p>\n<p><code>-e</code>还有另一种写法<code>-o errexit</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">set</span> -o errexit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"set-o-pipefail\"><a href=\"#set-o-pipefail\" class=\"headerlink\" title=\"set -o pipefail\"></a>set -o pipefail</h2><p><code>set -e</code>有一个例外情况，就是不适用于管道命令。</p>\n<p>所谓管道命令，就是多个子命令通过管道运算符（<code>|</code>）组合成为一个大的命令。Bash 会把最后一个子命令的返回值，作为整个命令的返回值。也就是说，只要最后一个子命令不失败，管道命令总是会执行成功，因此它后面命令依然会执行，<code>set -e</code>就失效了。</p>\n<p>请看下面这个例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n<span class=\"token builtin class-name\">set</span> -e\n\nfoo <span class=\"token operator\">|</span> <span class=\"token builtin class-name\">echo</span> a\n<span class=\"token builtin class-name\">echo</span> bar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> script.sh\na\nscript.sh:行4: foo: 未找到命令\nbar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>foo</code>是一个不存在的命令，但是<code>foo | echo a</code>这个管道命令会执行成功，导致后面的<code>echo bar</code>会继续执行。</p>\n<p><code>set -o pipefail</code>用来解决这种情况，只要一个子命令失败，整个管道命令就失败，脚本就会终止执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n<span class=\"token builtin class-name\">set</span> -eo pipefail\n\nfoo <span class=\"token operator\">|</span> <span class=\"token builtin class-name\">echo</span> a\n<span class=\"token builtin class-name\">echo</span> bar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行后，结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> script.sh\na\nscript.sh:行4: foo: 未找到命令<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，<code>echo bar</code>没有执行。</p>\n<h2 id=\"set-E\"><a href=\"#set-E\" class=\"headerlink\" title=\"set -E\"></a>set -E</h2><p>一旦设置了<code>-e</code>参数，会导致函数内的错误不会被<code>trap</code>命令捕获（参考《trap 命令》一章）。<code>-E</code>参数可以纠正这个行为，使得函数也能继承<code>trap</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token builtin class-name\">set</span> -e\n\n<span class=\"token builtin class-name\">trap</span> <span class=\"token string\">\"echo ERR trap fired!\"</span> ERR\n\n<span class=\"token function-name function\">myfunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\"># 'foo' 是一个不存在的命令</span>\n  foo\n<span class=\"token punctuation\">&#125;</span>\n\nmyfunc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>myfunc</code>函数内部调用了一个不存在的命令<code>foo</code>，导致执行这个函数会报错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> test.sh\ntest.sh:行9: foo：未找到命令<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>但是，由于设置了<code>set -e</code>，函数内部的报错并没有被<code>trap</code>命令捕获，需要加上<code>-E</code>参数才可以。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token builtin class-name\">set</span> -Eeuo pipefail\n\n<span class=\"token builtin class-name\">trap</span> <span class=\"token string\">\"echo ERR trap fired!\"</span> ERR\n\n<span class=\"token function-name function\">myfunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\"># 'foo' 是一个不存在的命令</span>\n  foo\n<span class=\"token punctuation\">&#125;</span>\n\nmyfunc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行上面这个脚本，就可以看到<code>trap</code>命令生效了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> test.sh\ntest.sh:行9: foo：未找到命令\nERR <span class=\"token builtin class-name\">trap</span> fired<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"其他参数\"><a href=\"#其他参数\" class=\"headerlink\" title=\"其他参数\"></a>其他参数</h2><p><code>set</code>命令还有一些其他参数。</p>\n<ul>\n<li><code>set -n</code>：等同于<code>set -o noexec</code>，不运行命令，只检查语法是否正确。</li>\n<li><code>set -f</code>：等同于<code>set -o noglob</code>，表示不对通配符进行文件名扩展。</li>\n<li><code>set -v</code>：等同于<code>set -o verbose</code>，表示打印 Shell 接收到的每一行输入。</li>\n<li><code>set -o noclobber</code>：防止使用重定向运算符<code>&gt;</code>覆盖已经存在的文件。</li>\n</ul>\n<p>上面的<code>-f</code>和<code>-v</code>参数，可以分别使用<code>set +f</code>、<code>set +v</code>关闭。</p>\n<h2 id=\"set-命令总结\"><a href=\"#set-命令总结\" class=\"headerlink\" title=\"set 命令总结\"></a>set 命令总结</h2><p>上面重点介绍的<code>set</code>命令的几个参数，一般都放在一起使用。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 写法一</span>\n<span class=\"token builtin class-name\">set</span> -Eeuxo pipefail\n\n<span class=\"token comment\"># 写法二</span>\n<span class=\"token builtin class-name\">set</span> -Eeux\n<span class=\"token builtin class-name\">set</span> -o pipefail<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这两种写法建议放在所有 Bash 脚本的头部。</p>\n<p>另一种办法是在执行 Bash 脚本的时候，从命令行传入这些参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> -euxo pipefail script.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"shopt-命令-1\"><a href=\"#shopt-命令-1\" class=\"headerlink\" title=\"shopt 命令\"></a>shopt 命令</h2><p><code>shopt</code>命令用来调整 Shell 的参数，跟<code>set</code>命令的作用很类似。之所以会有这两个类似命令的主要原因是，<code>set</code>是从 Ksh 继承的，属于 POSIX 规范的一部分，而<code>shopt</code>是 Bash 特有的。</p>\n<p>直接输入<code>shopt</code>可以查看所有参数，以及它们各自打开和关闭的状态。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>shopt</code>命令后面跟着参数名，可以查询该参数是否打开。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> globstar\nglobstar  off<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子表示<code>globstar</code>参数默认是关闭的。</p>\n<p><strong>（1）-s</strong></p>\n<p><code>-s</code>用来打开某个参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> -s optionNameHere<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（2）-u</strong></p>\n<p><code>-u</code>用来关闭某个参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> -u optionNameHere<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>举例来说，<code>histappend</code>这个参数表示退出当前 Shell 时，将操作历史追加到历史文件中。这个参数默认是打开的，如果使用下面的命令将其关闭，那么当前 Shell 的操作历史将替换掉整个历史文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> -u histappend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（3）-q</strong></p>\n<p><code>-q</code>的作用也是查询某个参数是否打开，但不是直接输出查询结果，而是通过命令的执行状态（<code>$?</code>）表示查询结果。如果状态为<code>0</code>，表示该参数打开；如果为<code>1</code>，表示该参数关闭。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">shopt</span> -q globstar\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span>\n<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令查询<code>globstar</code>参数是否打开。返回状态为<code>1</code>，表示该参数是关闭的。</p>\n<p>这个用法主要用于脚本，供<code>if</code>条件结构使用。下面例子是如果打开了这个参数，就执行<code>if</code>结构内部的语句。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>shopt -q globstar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考链接-5\"><a href=\"#参考链接-5\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html\">The Set Builtin</a></li>\n<li><a href=\"https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/\">Safer bash scripts with ‘set -euxo pipefail’</a></li>\n<li><a href=\"http://www.davidpashley.com/articles/writing-robust-shell-scripts/\">Writing Robust Bash Shell Scripts</a></li>\n</ul>\n<h1 id=\"脚本除错\"><a href=\"#脚本除错\" class=\"headerlink\" title=\"脚本除错\"></a>脚本除错</h1><p>本章介绍如何对 Shell 脚本除错。</p>\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><p>编写 Shell 脚本的时候，一定要考虑到命令失败的情况，否则很容易出错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash</span>\n\n<span class=\"token assign-left variable\">dir_name</span><span class=\"token operator\">=</span>/path/not/exist\n\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$dir_name</span>\n<span class=\"token function\">rm</span> *<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面脚本中，如果目录<code>$dir_name</code>不存在，<code>cd $dir_name</code>命令就会执行失败。这时，就不会改变当前目录，脚本会继续执行下去，导致<code>rm *</code>命令删光当前目录的文件。</p>\n<p>如果改成下面的样子，也会有问题。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$dir_name</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> *<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面脚本中，只有<code>cd $dir_name</code>执行成功，才会执行<code>rm *</code>。但是，如果变量<code>$dir_name</code>为空，<code>cd</code>就会进入用户主目录，从而删光用户主目录的文件。</p>\n<p>下面的写法才是正确的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -d <span class=\"token variable\">$dir_name</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$dir_name</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> *<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，先判断目录<code>$dir_name</code>是否存在，然后才执行其他操作。</p>\n<p>如果不放心删除什么文件，可以先打印出来看一下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -d <span class=\"token variable\">$dir_name</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$dir_name</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token function\">rm</span> *<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>echo rm *</code>不会删除文件，只会打印出来要删除的文件。</p>\n<h2 id=\"bash的-x参数\"><a href=\"#bash的-x参数\" class=\"headerlink\" title=\"bash的-x参数\"></a><code>bash</code>的<code>-x</code>参数</h2><p><code>bash</code>的<code>-x</code>参数可以在执行每一行命令之前，打印该命令。一旦出错，这样就比较容易追查。</p>\n<p>下面是一个脚本<code>script.sh</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># script.sh</span>\n<span class=\"token builtin class-name\">echo</span> hello world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>加上<code>-x</code>参数，执行每条命令之前，都会显示该命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> -x script.sh\n+ <span class=\"token builtin class-name\">echo</span> hello world\nhello world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，行首为<code>+</code>的行，显示该行是所要执行的命令，下一行才是该命令的执行结果。</p>\n<p>下面再看一个<code>-x</code>写在脚本内部的例子。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash -x</span>\n<span class=\"token comment\"># trouble: script to demonstrate common errors</span>\n\n<span class=\"token assign-left variable\">number</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Number is equal to 1.\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Number is not equal to 1.\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的脚本执行之后，会输出每一行命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ trouble\n+ <span class=\"token assign-left variable\">number</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n+ <span class=\"token string\">'['</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token string\">']'</span>\n+ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Number is equal to 1.'</span>\nNumber is equal to <span class=\"token number\">1</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出的命令之前的<code>+</code>号，是由系统变量<code>PS4</code>决定，可以修改这个变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PS4</span></span><span class=\"token operator\">=</span><span class=\"token string\">'<span class=\"token variable\">$LINENO</span> + '</span>\n$ trouble\n<span class=\"token number\">5</span> + <span class=\"token assign-left variable\">number</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token number\">7</span> + <span class=\"token string\">'['</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token string\">']'</span>\n<span class=\"token number\">8</span> + <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Number is equal to 1.'</span>\nNumber is equal to <span class=\"token number\">1</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，<code>set</code>命令也可以设置 Shell 的行为参数，有利于脚本除错，详见《set 命令》一章。</p>\n<h2 id=\"环境变量-1\"><a href=\"#环境变量-1\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>有一些环境变量常用于除错。</p>\n<h3 id=\"LINENO\"><a href=\"#LINENO\" class=\"headerlink\" title=\"LINENO\"></a>LINENO</h3><p>变量<code>LINENO</code>返回它在脚本里面的行号。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is line <span class=\"token variable\">$LINENO</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>执行上面的脚本<code>test.sh</code>，<code>$LINENO</code>会返回<code>3</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./test.sh\nThis is line <span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"FUNCNAME\"><a href=\"#FUNCNAME\" class=\"headerlink\" title=\"FUNCNAME\"></a>FUNCNAME</h3><p>变量<code>FUNCNAME</code>返回一个数组，内容是当前的函数调用堆栈。该数组的0号成员是当前调用的函数，1号成员是调用当前函数的函数，以此类推。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func1: FUNCNAME0 is <span class=\"token variable\">$&#123;FUNCNAME<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func1: FUNCNAME1 is <span class=\"token variable\">$&#123;FUNCNAME<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func1: FUNCNAME2 is <span class=\"token variable\">$&#123;FUNCNAME<span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  func2\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func2: FUNCNAME0 is <span class=\"token variable\">$&#123;FUNCNAME<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func2: FUNCNAME1 is <span class=\"token variable\">$&#123;FUNCNAME<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func2: FUNCNAME2 is <span class=\"token variable\">$&#123;FUNCNAME<span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\nfunc1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行上面的脚本<code>test.sh</code>，结果如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./test.sh\nfunc1: FUNCNAME0 is func1\nfunc1: FUNCNAME1 is main\nfunc1: FUNCNAME2 is\nfunc2: FUNCNAME0 is func2\nfunc2: FUNCNAME1 is func1\nfunc2: FUNCNAME2 is main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，执行<code>func1</code>时，变量<code>FUNCNAME</code>的0号成员是<code>func1</code>，1号成员是调用<code>func1</code>的主脚本<code>main</code>。执行<code>func2</code>时，变量<code>FUNCNAME</code>的0号成员是<code>func2</code>，1号成员是调用<code>func2</code>的<code>func1</code>。</p>\n<h3 id=\"BASH-SOURCE\"><a href=\"#BASH-SOURCE\" class=\"headerlink\" title=\"BASH_SOURCE\"></a>BASH_SOURCE</h3><p>变量<code>BASH_SOURCE</code>返回一个数组，内容是当前的脚本调用堆栈。该数组的0号成员是当前执行的脚本，1号成员是调用当前脚本的脚本，以此类推，跟变量<code>FUNCNAME</code>是一一对应关系。</p>\n<p>下面有两个子脚本<code>lib1.sh</code>和<code>lib2.sh</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># lib1.sh</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func1: BASH_SOURCE0 is <span class=\"token variable\">$&#123;<span class=\"token environment constant\">BASH_SOURCE</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func1: BASH_SOURCE1 is <span class=\"token variable\">$&#123;<span class=\"token environment constant\">BASH_SOURCE</span><span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func1: BASH_SOURCE2 is <span class=\"token variable\">$&#123;<span class=\"token environment constant\">BASH_SOURCE</span><span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  func2\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># lib2.sh</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func2: BASH_SOURCE0 is <span class=\"token variable\">$&#123;<span class=\"token environment constant\">BASH_SOURCE</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func2: BASH_SOURCE1 is <span class=\"token variable\">$&#123;<span class=\"token environment constant\">BASH_SOURCE</span><span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func2: BASH_SOURCE2 is <span class=\"token variable\">$&#123;<span class=\"token environment constant\">BASH_SOURCE</span><span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，主脚本<code>main.sh</code>调用上面两个子脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># main.sh</span>\n\n<span class=\"token builtin class-name\">source</span> lib1.sh\n<span class=\"token builtin class-name\">source</span> lib2.sh\n\nfunc1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行主脚本<code>main.sh</code>，会得到下面的结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./main.sh\nfunc1: BASH_SOURCE0 is lib1.sh\nfunc1: BASH_SOURCE1 is ./main.sh\nfunc1: BASH_SOURCE2 is\nfunc2: BASH_SOURCE0 is lib2.sh\nfunc2: BASH_SOURCE1 is lib1.sh\nfunc2: BASH_SOURCE2 is ./main.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，执行函数<code>func1</code>时，变量<code>BASH_SOURCE</code>的0号成员是<code>func1</code>所在的脚本<code>lib1.sh</code>，1号成员是主脚本<code>main.sh</code>；执行函数<code>func2</code>时，变量<code>BASH_SOURCE</code>的0号成员是<code>func2</code>所在的脚本<code>lib2.sh</code>，1号成员是调用<code>func2</code>的脚本<code>lib1.sh</code>。</p>\n<h3 id=\"BASH-LINENO\"><a href=\"#BASH-LINENO\" class=\"headerlink\" title=\"BASH_LINENO\"></a>BASH_LINENO</h3><p>变量<code>BASH_LINENO</code>返回一个数组，内容是每一轮调用对应的行号。<code>$&#123;BASH_LINENO[$i]&#125;</code>跟<code>$&#123;FUNCNAME[$i]&#125;</code>是一一对应关系，表示<code>$&#123;FUNCNAME[$i]&#125;</code>在调用它的脚本文件<code>$&#123;BASH_SOURCE[$i+1]&#125;</code>里面的行号。</p>\n<p>下面有两个子脚本<code>lib1.sh</code>和<code>lib2.sh</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># lib1.sh</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func1: BASH_LINENO is <span class=\"token variable\">$&#123;<span class=\"token environment constant\">BASH_LINENO</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func1: FUNCNAME is <span class=\"token variable\">$&#123;FUNCNAME<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func1: BASH_SOURCE is <span class=\"token variable\">$&#123;<span class=\"token environment constant\">BASH_SOURCE</span><span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n\n  func2\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># lib2.sh</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func2: BASH_LINENO is <span class=\"token variable\">$&#123;<span class=\"token environment constant\">BASH_LINENO</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func2: FUNCNAME is <span class=\"token variable\">$&#123;FUNCNAME<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"func2: BASH_SOURCE is <span class=\"token variable\">$&#123;<span class=\"token environment constant\">BASH_SOURCE</span><span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，主脚本<code>main.sh</code>调用上面两个子脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># main.sh</span>\n\n<span class=\"token builtin class-name\">source</span> lib1.sh\n<span class=\"token builtin class-name\">source</span> lib2.sh\n\nfunc1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行主脚本<code>main.sh</code>，会得到下面的结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./main.sh\nfunc1: <span class=\"token environment constant\">BASH_LINENO</span> is <span class=\"token number\">7</span>\nfunc1: FUNCNAME is func1\nfunc1: <span class=\"token environment constant\">BASH_SOURCE</span> is main.sh\nfunc2: <span class=\"token environment constant\">BASH_LINENO</span> is <span class=\"token number\">8</span>\nfunc2: FUNCNAME is func2\nfunc2: <span class=\"token environment constant\">BASH_SOURCE</span> is lib1.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，函数<code>func1</code>是在<code>main.sh</code>的第7行调用，函数<code>func2</code>是在<code>lib1.sh</code>的第8行调用的。</p>\n<h1 id=\"mktemp-命令，trap-命令\"><a href=\"#mktemp-命令，trap-命令\" class=\"headerlink\" title=\"mktemp 命令，trap 命令\"></a>mktemp 命令，trap 命令</h1><p>Bash 脚本有时需要创建临时文件或临时目录。常见的做法是，在<code>/tmp</code>目录里面创建文件或目录，这样做有很多弊端，使用<code>mktemp</code>命令是最安全的做法。</p>\n<h2 id=\"临时文件的安全问题\"><a href=\"#临时文件的安全问题\" class=\"headerlink\" title=\"临时文件的安全问题\"></a>临时文件的安全问题</h2><p>直接创建临时文件，尤其在<code>/tmp</code>目录里面，往往会导致安全问题。</p>\n<p>首先，<code>/tmp</code>目录是所有人可读写的，任何用户都可以往该目录里面写文件。创建的临时文件也是所有人可读的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">touch</span> /tmp/info.txt\n$ <span class=\"token function\">ls</span> -l /tmp/info.txt\n-rw-r--r-- <span class=\"token number\">1</span> ruanyf ruanyf <span class=\"token number\">0</span> <span class=\"token number\">12</span>月 <span class=\"token number\">28</span> <span class=\"token number\">17</span>:12 /tmp/info.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令在<code>/tmp</code>目录直接创建文件，该文件默认是所有人可读的。</p>\n<p>其次，如果攻击者知道临时文件的文件名，他可以创建符号链接，链接到临时文件，可能导致系统运行异常。攻击者也可能向脚本提供一些恶意数据。因此，临时文件最好使用不可预测、每次都不一样的文件名，防止被利用。</p>\n<p>最后，临时文件使用完毕，应该删除。但是，脚本意外退出时，往往会忽略清理临时文件。</p>\n<p>生成临时文件应该遵循下面的规则。</p>\n<blockquote>\n<ul>\n<li>创建前检查文件是否已经存在。</li>\n<li>确保临时文件已成功创建。</li>\n<li>临时文件必须有权限的限制。</li>\n<li>临时文件要使用不可预测的文件名。</li>\n<li>脚本退出时，要删除临时文件（使用<code>trap</code>命令）。</li>\n</ul>\n</blockquote>\n<h2 id=\"mktemp-命令的用法\"><a href=\"#mktemp-命令的用法\" class=\"headerlink\" title=\"mktemp 命令的用法\"></a>mktemp 命令的用法</h2><p><code>mktemp</code>命令就是为安全创建临时文件而设计的。虽然在创建临时文件之前，它不会检查临时文件是否存在，但是它支持唯一文件名和清除机制，因此可以减轻安全攻击的风险。</p>\n<p>直接运行<code>mktemp</code>命令，就能生成一个临时文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mktemp\n/tmp/tmp.4GcsWSG4vj\n\n$ <span class=\"token function\">ls</span> -l /tmp/tmp.4GcsWSG4vj\n-rw------- <span class=\"token number\">1</span> ruanyf ruanyf <span class=\"token number\">0</span> <span class=\"token number\">12</span>月 <span class=\"token number\">28</span> <span class=\"token number\">12</span>:49 /tmp/tmp.4GcsWSG4vj<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令中，<code>mktemp</code>命令生成的临时文件名是随机的，而且权限是只有用户本人可读写。</p>\n<p>Bash 脚本使用<code>mktemp</code>命令的用法如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">TMPFILE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>mktemp<span class=\"token variable\">)</span></span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Our temp file is <span class=\"token variable\">$TMPFILE</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了确保临时文件创建成功，<code>mktemp</code>命令后面最好使用 OR 运算符（<code>||</code>），保证创建失败时退出脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">TMPFILE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>mktemp<span class=\"token variable\">)</span></span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Our temp file is <span class=\"token variable\">$TMPFILE</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了保证脚本退出时临时文件被删除，可以使用<code>trap</code>命令指定退出时的清除操作。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">trap</span> <span class=\"token string\">'rm -f \"<span class=\"token variable\">$TMPFILE</span>\"'</span> EXIT\n\n<span class=\"token assign-left variable\">TMPFILE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>mktemp<span class=\"token variable\">)</span></span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Our temp file is <span class=\"token variable\">$TMPFILE</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"mktemp-命令的参数\"><a href=\"#mktemp-命令的参数\" class=\"headerlink\" title=\"mktemp 命令的参数\"></a>mktemp 命令的参数</h2><p><code>-d</code>参数可以创建一个临时目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mktemp -d\n/tmp/tmp.Wcau5UjmN6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>-p</code>参数可以指定临时文件所在的目录。默认是使用<code>$TMPDIR</code>环境变量指定的目录，如果这个变量没设置，那么使用<code>/tmp</code>目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mktemp -p /home/ruanyf/\n/home/ruanyf/tmp.FOKEtvs2H3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>-t</code>参数可以指定临时文件的文件名模板，模板的末尾必须至少包含三个连续的<code>X</code>字符，表示随机字符，建议至少使用六个<code>X</code>。默认的文件名模板是<code>tmp.</code>后接十个随机字符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mktemp -t mytemp.XXXXXXX\n/tmp/mytemp.yZ1HgZV<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"trap-命令\"><a href=\"#trap-命令\" class=\"headerlink\" title=\"trap 命令\"></a>trap 命令</h2><p><code>trap</code>命令用来在 Bash 脚本中响应系统信号。</p>\n<p>最常见的系统信号就是 SIGINT（中断），即按 Ctrl + C 所产生的信号。<code>trap</code>命令的<code>-l</code>参数，可以列出所有的系统信号。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">trap</span> -l\n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> SIGHUP\t <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> SIGINT\t <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> SIGQUIT\t <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> SIGILL\t <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> SIGTRAP\n <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> SIGABRT\t <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> SIGBUS\t <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> SIGFPE\t <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> SIGKILL\t<span class=\"token number\">10</span><span class=\"token punctuation\">)</span> SIGUSR1\n<span class=\"token number\">11</span><span class=\"token punctuation\">)</span> SIGSEGV\t<span class=\"token number\">12</span><span class=\"token punctuation\">)</span> SIGUSR2\t<span class=\"token number\">13</span><span class=\"token punctuation\">)</span> SIGPIPE\t<span class=\"token number\">14</span><span class=\"token punctuation\">)</span> SIGALRM\t<span class=\"token number\">15</span><span class=\"token punctuation\">)</span> SIGTERM\n<span class=\"token number\">16</span><span class=\"token punctuation\">)</span> SIGSTKFLT\t<span class=\"token number\">17</span><span class=\"token punctuation\">)</span> SIGCHLD\t<span class=\"token number\">18</span><span class=\"token punctuation\">)</span> SIGCONT\t<span class=\"token number\">19</span><span class=\"token punctuation\">)</span> SIGSTOP\t<span class=\"token number\">20</span><span class=\"token punctuation\">)</span> SIGTSTP\n<span class=\"token number\">21</span><span class=\"token punctuation\">)</span> SIGTTIN\t<span class=\"token number\">22</span><span class=\"token punctuation\">)</span> SIGTTOU\t<span class=\"token number\">23</span><span class=\"token punctuation\">)</span> SIGURG\t<span class=\"token number\">24</span><span class=\"token punctuation\">)</span> SIGXCPU\t<span class=\"token number\">25</span><span class=\"token punctuation\">)</span> SIGXFSZ\n<span class=\"token number\">26</span><span class=\"token punctuation\">)</span> SIGVTALRM\t<span class=\"token number\">27</span><span class=\"token punctuation\">)</span> SIGPROF\t<span class=\"token number\">28</span><span class=\"token punctuation\">)</span> SIGWINCH\t<span class=\"token number\">29</span><span class=\"token punctuation\">)</span> SIGIO\t<span class=\"token number\">30</span><span class=\"token punctuation\">)</span> SIGPWR\n<span class=\"token number\">31</span><span class=\"token punctuation\">)</span> SIGSYS\t<span class=\"token number\">34</span><span class=\"token punctuation\">)</span> SIGRTMIN\t<span class=\"token number\">35</span><span class=\"token punctuation\">)</span> SIGRTMIN+1\t<span class=\"token number\">36</span><span class=\"token punctuation\">)</span> SIGRTMIN+2\t<span class=\"token number\">37</span><span class=\"token punctuation\">)</span> SIGRTMIN+3\n<span class=\"token number\">38</span><span class=\"token punctuation\">)</span> SIGRTMIN+4\t<span class=\"token number\">39</span><span class=\"token punctuation\">)</span> SIGRTMIN+5\t<span class=\"token number\">40</span><span class=\"token punctuation\">)</span> SIGRTMIN+6\t<span class=\"token number\">41</span><span class=\"token punctuation\">)</span> SIGRTMIN+7\t<span class=\"token number\">42</span><span class=\"token punctuation\">)</span> SIGRTMIN+8\n<span class=\"token number\">43</span><span class=\"token punctuation\">)</span> SIGRTMIN+9\t<span class=\"token number\">44</span><span class=\"token punctuation\">)</span> SIGRTMIN+10\t<span class=\"token number\">45</span><span class=\"token punctuation\">)</span> SIGRTMIN+11\t<span class=\"token number\">46</span><span class=\"token punctuation\">)</span> SIGRTMIN+12\t<span class=\"token number\">47</span><span class=\"token punctuation\">)</span> SIGRTMIN+13\n<span class=\"token number\">48</span><span class=\"token punctuation\">)</span> SIGRTMIN+14\t<span class=\"token number\">49</span><span class=\"token punctuation\">)</span> SIGRTMIN+15\t<span class=\"token number\">50</span><span class=\"token punctuation\">)</span> SIGRTMAX-14\t<span class=\"token number\">51</span><span class=\"token punctuation\">)</span> SIGRTMAX-13\t<span class=\"token number\">52</span><span class=\"token punctuation\">)</span> SIGRTMAX-12\n<span class=\"token number\">53</span><span class=\"token punctuation\">)</span> SIGRTMAX-11\t<span class=\"token number\">54</span><span class=\"token punctuation\">)</span> SIGRTMAX-10\t<span class=\"token number\">55</span><span class=\"token punctuation\">)</span> SIGRTMAX-9\t<span class=\"token number\">56</span><span class=\"token punctuation\">)</span> SIGRTMAX-8\t<span class=\"token number\">57</span><span class=\"token punctuation\">)</span> SIGRTMAX-7\n<span class=\"token number\">58</span><span class=\"token punctuation\">)</span> SIGRTMAX-6\t<span class=\"token number\">59</span><span class=\"token punctuation\">)</span> SIGRTMAX-5\t<span class=\"token number\">60</span><span class=\"token punctuation\">)</span> SIGRTMAX-4\t<span class=\"token number\">61</span><span class=\"token punctuation\">)</span> SIGRTMAX-3\t<span class=\"token number\">62</span><span class=\"token punctuation\">)</span> SIGRTMAX-2\n<span class=\"token number\">63</span><span class=\"token punctuation\">)</span> SIGRTMAX-1\t<span class=\"token number\">64</span><span class=\"token punctuation\">)</span> SIGRTMAX<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>trap</code>的命令格式如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">trap</span> <span class=\"token punctuation\">[</span>动作<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>信号1<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>信号2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，“动作”是一个 Bash 命令，“信号”常用的有以下几个。</p>\n<blockquote>\n<ul>\n<li>HUP：编号1，脚本与所在的终端脱离联系。</li>\n<li>INT：编号2，用户按下 Ctrl + C，意图让脚本终止运行。</li>\n<li>QUIT：编号3，用户按下 Ctrl + 斜杠，意图退出脚本。</li>\n<li>KILL：编号9，该信号用于杀死进程。</li>\n<li>TERM：编号15，这是<code>kill</code>命令发出的默认信号。</li>\n<li>EXIT：编号0，这不是系统信号，而是 Bash 脚本特有的信号，不管什么情况，只要退出脚本就会产生。</li>\n</ul>\n</blockquote>\n<p><code>trap</code>命令响应<code>EXIT</code>信号的写法如下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">trap</span> <span class=\"token string\">'rm -f \"<span class=\"token variable\">$TMPFILE</span>\"'</span> EXIT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，脚本遇到<code>EXIT</code>信号时，就会执行<code>rm -f &quot;$TMPFILE&quot;</code>。</p>\n<p>trap 命令的常见使用场景，就是在 Bash 脚本中指定退出时执行的清理命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">trap</span> <span class=\"token string\">'rm -f \"<span class=\"token variable\">$TMPFILE</span>\"'</span> EXIT\n\n<span class=\"token assign-left variable\">TMPFILE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>mktemp<span class=\"token variable\">)</span></span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token function\">ls</span> /etc <span class=\"token operator\">></span> <span class=\"token variable\">$TMPFILE</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">grep</span> -qi <span class=\"token string\">\"kernel\"</span> <span class=\"token variable\">$TMPFILE</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'find'</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，不管是脚本正常执行结束，还是用户按 Ctrl + C 终止，都会产生<code>EXIT</code>信号，从而触发删除临时文件。</p>\n<p>注意，<code>trap</code>命令必须放在脚本的开头。否则，它上方的任何命令导致脚本退出，都不会被它捕获。</p>\n<p>如果<code>trap</code>需要触发多条命令，可以封装一个 Bash 函数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">egress</span> <span class=\"token punctuation\">&#123;</span>\n  command1\n  command2\n  command3\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token builtin class-name\">trap</span> egress EXIT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考链接-6\"><a href=\"#参考链接-6\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://www.putorius.net/working-with-temporary-files.html\">Working with Temporary Files and Directories in Shell Scripts</a>, Steven Vona</li>\n<li><a href=\"https://www.putorius.net/using-trap-to-exit-bash-scripts-cleanly.html\">Using Trap to Exit Bash Scripts Cleanly</a></li>\n<li><a href=\"https://mywiki.wooledge.org/SignalTrap\">Sending and Trapping Signals</a></li>\n</ul>\n<h1 id=\"启动环境\"><a href=\"#启动环境\" class=\"headerlink\" title=\"启动环境\"></a>启动环境</h1><h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>用户每次使用 Shell，都会开启一个与 Shell 的 Session（对话）。</p>\n<p>Session 有两种类型：登录 Session 和非登录 Session，也可以叫做 login shell 和 non-login shell。</p>\n<h3 id=\"登录-Session\"><a href=\"#登录-Session\" class=\"headerlink\" title=\"登录 Session\"></a>登录 Session</h3><p>登录 Session 是用户登录系统以后，系统为用户开启的原始 Session，通常需要用户输入用户名和密码进行登录。</p>\n<p>登录 Session 一般进行整个系统环境的初始化，启动的初始化脚本依次如下。</p>\n<ul>\n<li><code>/etc/profile</code>：所有用户的全局配置脚本。</li>\n<li><code>/etc/profile.d</code>目录里面所有<code>.sh</code>文件</li>\n<li><code>~/.bash_profile</code>：用户的个人配置脚本。如果该脚本存在，则执行完就不再往下执行。</li>\n<li><code>~/.bash_login</code>：如果<code>~/.bash_profile</code>没找到，则尝试执行这个脚本（C shell 的初始化脚本）。如果该脚本存在，则执行完就不再往下执行。</li>\n<li><code>~/.profile</code>：如果<code>~/.bash_profile</code>和<code>~/.bash_login</code>都没找到，则尝试读取这个脚本（Bourne shell 和 Korn shell 的初始化脚本）。</li>\n</ul>\n<p>Linux 发行版更新的时候，会更新<code>/etc</code>里面的文件，比如<code>/etc/profile</code>，因此不要直接修改这个文件。如果想修改所有用户的登陆环境，就在<code>/etc/profile.d</code>目录里面新建<code>.sh</code>脚本。</p>\n<p>如果想修改你个人的登录环境，一般是写在<code>~/.bash_profile</code>里面。下面是一个典型的<code>.bash_profile</code>文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># .bash_profile</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token environment constant\">$HOME</span>/bin\n\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHELL</span></span><span class=\"token operator\">=</span>/bin/bash\n<span class=\"token assign-left variable\">MANPATH</span><span class=\"token operator\">=</span>/usr/man:/usr/X11/man\n<span class=\"token assign-left variable\">EDITOR</span><span class=\"token operator\">=</span>/usr/bin/vi\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">'\\h:\\w\\$ '</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS2</span></span><span class=\"token operator\">=</span><span class=\"token string\">'> '</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f ~/.bashrc <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n<span class=\"token builtin class-name\">.</span> ~/.bashrc\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token environment constant\">PATH</span>\n<span class=\"token builtin class-name\">export</span> EDITOR<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，这个脚本定义了一些最基本的环境变量，然后执行了<code>~/.bashrc</code>。</p>\n<p><code>bash</code>命令的<code>--login</code>参数，会强制执行登录 Session 会执行的脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> --login<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>bash</code>命令的<code>--noprofile</code>参数，会跳过上面这些 Profile 脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> --noprofile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"非登录-Session\"><a href=\"#非登录-Session\" class=\"headerlink\" title=\"非登录 Session\"></a>非登录 Session</h3><p>非登录 Session 是用户进入系统以后，手动新建的 Session，这时不会进行环境初始化。比如，在命令行执行<code>bash</code>命令，就会新建一个非登录 Session。</p>\n<p>非登录 Session 的初始化脚本依次如下。</p>\n<ul>\n<li><code>/etc/bash.bashrc</code>：对全体用户有效。</li>\n<li><code>~/.bashrc</code>：仅对当前用户有效。</li>\n</ul>\n<p>对用户来说，<code>~/.bashrc</code>通常是最重要的脚本。非登录 Session 默认会执行它，而登录 Session 一般也会通过调用执行它。每次新建一个 Bash 窗口，就相当于新建一个非登录 Session，所以<code>~/.bashrc</code>每次都会执行。注意，执行脚本相当于新建一个非互动的 Bash 环境，但是这种情况不会调用<code>~/.bashrc</code>。</p>\n<p><code>bash</code>命令的<code>--norc</code>参数，可以禁止在非登录 Session 执行<code>~/.bashrc</code>脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> --norc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>bash</code>命令的<code>--rcfile</code>参数，指定另一个脚本代替<code>.bashrc</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> --rcfile testrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"bash-logout\"><a href=\"#bash-logout\" class=\"headerlink\" title=\".bash_logout\"></a>.bash_logout</h3><p><code>~/.bash_logout</code>脚本在每次退出 Session 时执行，通常用来做一些清理工作和记录工作，比如删除临时文件，记录用户在本次 Session 花费的时间。</p>\n<p>如果没有退出时要执行的命令，这个文件也可以不存在。</p>\n<h2 id=\"启动选项\"><a href=\"#启动选项\" class=\"headerlink\" title=\"启动选项\"></a>启动选项</h2><p>为了方便 Debug，有时在启动 Bash 的时候，可以加上启动参数。</p>\n<ul>\n<li><code>-n</code>：不运行脚本，只检查是否有语法错误。</li>\n<li><code>-v</code>：输出每一行语句运行结果前，会先输出该行语句。</li>\n<li><code>-x</code>：每一个命令处理之前，先输出该命令，再执行该命令。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> -n scriptname\n$ <span class=\"token function\">bash</span> -v scriptname\n$ <span class=\"token function\">bash</span> -x scriptname<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"键盘绑定\"><a href=\"#键盘绑定\" class=\"headerlink\" title=\"键盘绑定\"></a>键盘绑定</h2><p>Bash 允许用户定义自己的快捷键。全局的键盘绑定文件默认为<code>/etc/inputrc</code>，你可以在主目录创建自己的键盘绑定文件<code>.inputrc</code>文件。如果定义了这个文件，需要在其中加入下面这行，保证全局绑定不会被遗漏。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$include</span> /etc/inputrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>.inputrc</code>文件里面的快捷键，可以像这样定义，<code>&quot;\\C-t&quot;:&quot;pwd\\n&quot;</code>表示将<code>Ctrl + t</code>绑定为运行<code>pwd</code>命令。</p>\n<h1 id=\"命令提示符\"><a href=\"#命令提示符\" class=\"headerlink\" title=\"命令提示符\"></a>命令提示符</h1><p>用户进入 Bash 以后，Bash 会显示一个命令提示符，用来提示用户在该位置后面输入命令。</p>\n<h2 id=\"环境变量-PS1\"><a href=\"#环境变量-PS1\" class=\"headerlink\" title=\"环境变量 PS1\"></a>环境变量 PS1</h2><p>命令提示符通常是美元符号<code>$</code>，对于根用户则是井号<code>#</code>。这个符号是环境变量<code>PS1</code>决定的，执行下面的命令，可以看到当前命令提示符的定义。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PS1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Bash 允许用户自定义命令提示符，只要改写这个变量即可。改写后的<code>PS1</code>，可以放在用户的 Bash 配置文件<code>.bashrc</code>里面，以后新建 Bash 对话时，新的提示符就会生效。要在当前窗口看到修改后的提示符，可以执行下面的命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>命令提示符的定义，可以包含特殊的转义字符，表示特定内容。</p>\n<ul>\n<li><code>\\a</code>：响铃，计算机发出一记声音。</li>\n<li><code>\\d</code>：以星期、月、日格式表示当前日期，例如“Mon May 26”。</li>\n<li><code>\\h</code>：本机的主机名。</li>\n<li><code>\\H</code>：完整的主机名。</li>\n<li><code>\\j</code>：运行在当前 Shell 会话的工作数。</li>\n<li><code>\\l</code>：当前终端设备名。</li>\n<li><code>\\n</code>：一个换行符。</li>\n<li><code>\\r</code>：一个回车符。</li>\n<li><code>\\s</code>：Shell 的名称。</li>\n<li><code>\\t</code>：24小时制的<code>hours:minutes:seconds</code>格式表示当前时间。</li>\n<li><code>\\T</code>：12小时制的当前时间。</li>\n<li><code>\\@</code>：12小时制的<code>AM/PM</code>格式表示当前时间。</li>\n<li><code>\\A</code>：24小时制的<code>hours:minutes</code>表示当前时间。</li>\n<li><code>\\u</code>：当前用户名。</li>\n<li><code>\\v</code>：Shell 的版本号。</li>\n<li><code>\\V</code>：Shell 的版本号和发布号。</li>\n<li><code>\\w</code>：当前的工作路径。</li>\n<li><code>\\W</code>：当前目录名。</li>\n<li><code>\\!</code>：当前命令在命令历史中的编号。</li>\n<li><code>\\#</code>：当前 shell 会话中的命令数。</li>\n<li><code>\\$</code>：普通用户显示为<code>$</code>字符，根用户显示为<code>#</code>字符。</li>\n<li><code>\\[</code>：非打印字符序列的开始标志。</li>\n<li><code>\\]</code>：非打印字符序列的结束标志。</li>\n</ul>\n<p>举例来说，<code>[\\u@\\h \\W]\\$</code>这个提示符定义，显示出来就是<code>[user@host ~]$</code>（具体的显示内容取决于你的系统）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>user@host ~<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PS1</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span>u@<span class=\"token punctuation\">\\</span>h <span class=\"token punctuation\">\\</span>W<span class=\"token punctuation\">]</span><span class=\"token punctuation\">\\</span>$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>改写<code>PS1</code>变量，就可以改变这个命令提示符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"\\A \\h \\$ \"</span>\n<span class=\"token number\">17</span>:33 <span class=\"token function\">host</span> $<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意，<code>$</code>后面最好跟一个空格，这样的话，用户的输入与提示符就不会连在一起。</p>\n<h2 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h2><p>默认情况下，命令提示符是显示终端预定义的颜色。Bash 允许自定义提示符颜色。</p>\n<p>使用下面的代码，可以设定其后文本的颜色。</p>\n<ul>\n<li><code>\\033[0;30m</code>：黑色</li>\n<li><code>\\033[1;30m</code>：深灰色</li>\n<li><code>\\033[0;31m</code>：红色</li>\n<li><code>\\033[1;31m</code>：浅红色</li>\n<li><code>\\033[0;32m</code>：绿色</li>\n<li><code>\\033[1;32m</code>：浅绿色</li>\n<li><code>\\033[0;33m</code>：棕色</li>\n<li><code>\\033[1;33m</code>：黄色</li>\n<li><code>\\033[0;34m</code>：蓝色</li>\n<li><code>\\033[1;34m</code>：浅蓝色</li>\n<li><code>\\033[0;35m</code>：粉红</li>\n<li><code>\\033[1;35m</code>：浅粉色</li>\n<li><code>\\033[0;36m</code>：青色</li>\n<li><code>\\033[1;36m</code>：浅青色</li>\n<li><code>\\033[0;37m</code>：浅灰色</li>\n<li><code>\\033[1;37m</code>：白色</li>\n</ul>\n<p>举例来说，如果要将提示符设为红色，可以将<code>PS1</code>设成下面的代码。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">'\\[<span class=\"token entity\" title=\"\\033\">\\033</span>[0;31m\\]&lt;\\u@\\h \\W>\\$'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>但是，上面这样设置以后，用户在提示符后面输入的文本也是红色的。为了解决这个问题， 可以在结尾添加另一个特殊代码<code>\\[\\033[00m\\]</code>，表示将其后的文本恢复到默认颜色。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">'\\[<span class=\"token entity\" title=\"\\033\">\\033</span>[0;31m\\]&lt;\\u@\\h \\W>\\$\\[<span class=\"token entity\" title=\"\\033\">\\033</span>[00m\\]'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>除了设置前景颜色，Bash 还允许设置背景颜色。</p>\n<ul>\n<li><code>\\033[0;40m</code>：蓝色</li>\n<li><code>\\033[1;44m</code>：黑色</li>\n<li><code>\\033[0;41m</code>：红色</li>\n<li><code>\\033[1;45m</code>：粉红</li>\n<li><code>\\033[0;42m</code>：绿色</li>\n<li><code>\\033[1;46m</code>：青色</li>\n<li><code>\\033[0;43m</code>：棕色</li>\n<li><code>\\033[1;47m</code>：浅灰色</li>\n</ul>\n<p>下面是一个带有红色背景的提示符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">'\\[<span class=\"token entity\" title=\"\\033\">\\033</span>[0;41m\\]&lt;\\u@\\h \\W>\\$\\[<span class=\"token entity\" title=\"\\033\">\\033</span>[0m\\] '</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"环境变量-PS2，PS3，PS4\"><a href=\"#环境变量-PS2，PS3，PS4\" class=\"headerlink\" title=\"环境变量 PS2，PS3，PS4\"></a>环境变量 PS2，PS3，PS4</h2><p>除了<code>PS1</code>，Bash 还提供了提示符相关的另外三个环境变量。</p>\n<p>环境变量<code>PS2</code>是命令行折行输入时系统的提示符，默认为<code>&gt; </code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello\n> world\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面命令中，输入<code>hello</code>以后按下回车键，系统会提示继续输入。这时，第二行显示的提示符就是<code>PS2</code>定义的<code>&gt; </code>。</p>\n<p>环境变量<code>PS3</code>是使用<code>select</code>命令时，系统输入菜单的提示符。</p>\n<p>环境变量<code>PS4</code>默认为<code>+ </code>。它是使用 Bash 的<code>-x</code>参数执行脚本时，每一行命令在执行前都会先打印出来，并且在行首出现的那个提示符。</p>\n<p>比如下面是脚本<code>test.sh</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello world\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>使用<code>-x</code>参数执行这个脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> -x test.sh\n+ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'hello world'</span>\nhello world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，输出的第一行前面有一个<code>+ </code>，这就是变量<code>PS4</code>定义的。</p>\n","categories":["Programming","Linux","Shell","脚本"],"tags":["Programming","Shell","脚本","Linux"]},{"title":"Web API 教程","url":"/2021/10/12/Web%20API%20%E6%95%99%E7%A8%8B/","content":"<h1 id=\"Canvas-API\"><a href=\"#Canvas-API\" class=\"headerlink\" title=\"Canvas API\"></a>Canvas API</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><code>&lt;canvas&gt;</code>元素用于生成图像。它本身就像一个画布，JavaScript 通过操作它的 API，在上面生成图像。它的底层是一个个像素，基本上<code>&lt;canvas&gt;</code>是一个可以用 JavaScript 操作的位图（bitmap）。</p>\n<p>它与 SVG 图像的区别在于，<code>&lt;canvas&gt;</code>是脚本调用各种方法生成图像，SVG 则是一个 XML 文件，通过各种子元素生成图像。</p>\n<p>使用 Canvas API 之前，需要在网页里面新建一个<code>&lt;canvas&gt;</code>元素。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myCanvas<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>400<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  您的浏览器不支持 Canvas\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<a id=\"more\"></a>\n<p>如果浏览器不支持这个 API，就会显示<code>&lt;canvas&gt;</code>标签中间的文字：“您的浏览器不支持 Canvas”。</p>\n<p>每个<code>&lt;canvas&gt;</code>元素都有一个对应的<code>CanvasRenderingContext2D</code>对象（上下文对象）。Canvas API 就定义在这个对象上面。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>&lt;canvas&gt;</code>元素节点对象的<code>getContext()</code>方法，返回的就是<code>CanvasRenderingContext2D</code>对象。</p>\n<p>注意，Canvas API 需要<code>getContext</code>方法指定参数<code>2d</code>，表示该<code>&lt;canvas&gt;</code>节点生成 2D 的平面图像。如果参数是<code>webgl</code>，就表示用于生成 3D 的立体图案，这部分属于 WebGL API。</p>\n<p>按照用途，Canvas API 分成两大部分：绘制图形和图像处理。</p>\n<h2 id=\"Canvas-API：绘制图形\"><a href=\"#Canvas-API：绘制图形\" class=\"headerlink\" title=\"Canvas API：绘制图形\"></a>Canvas API：绘制图形</h2><p>Canvas 画布提供了一个作图的平面空间，该空间的每个点都有自己的坐标。原点<code>(0, 0)</code>位于图像左上角，<code>x</code>轴的正向是原点向右，<code>y</code>轴的正向是原点向下。</p>\n<h3 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h3><p>以下方法和属性用来绘制路径。</p>\n<ul>\n<li><code>CanvasRenderingContext2D.beginPath()</code>：开始绘制路径。</li>\n<li><code>CanvasRenderingContext2D.closePath()</code>：结束路径，返回到当前路径的起始点，会从当前点到起始点绘制一条直线。如果图形已经封闭，或者只有一个点，那么此方法不会产生任何效果。</li>\n<li><code>CanvasRenderingContext2D.moveTo()</code>：设置路径的起点，即将一个新路径的起始点移动到<code>(x，y)</code>坐标。</li>\n<li><code>CanvasRenderingContext2D.lineTo()</code>：使用直线从当前点连接到<code>(x, y)</code>坐标。</li>\n<li><code>CanvasRenderingContext2D.fill()</code>：在路径内部填充颜色（默认为黑色）。</li>\n<li><code>CanvasRenderingContext2D.stroke()</code>：路径线条着色（默认为黑色）。</li>\n<li><code>CanvasRenderingContext2D.fillStyle</code>：指定路径填充的颜色和样式（默认为黑色）。</li>\n<li><code>CanvasRenderingContext2D.strokeStyle</code>：指定路径线条的颜色和样式（默认为黑色）。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码只是确定了路径的形状，画布上还看不出来，因为没有颜色。所以还需要着色。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 或者</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，这两个方法都可以使得路径可见。<code>fill()</code>在路径内部填充颜色，使之变成一个实心的图形；<code>stroke()</code>只对路径线条着色。</p>\n<p>这两个方法默认都是使用黑色，可以使用<code>fillStyle</code>和<code>strokeStyle</code>属性指定其他颜色。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或者</span>\nctx<span class=\"token punctuation\">.</span>strokeStyle <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码将填充和线条的颜色指定为红色。</p>\n<h3 id=\"线型\"><a href=\"#线型\" class=\"headerlink\" title=\"线型\"></a>线型</h3><p>以下的方法和属性控制线条的视觉特征。</p>\n<ul>\n<li><code>CanvasRenderingContext2D.lineWidth</code>：指定线条的宽度，默认为1.0。</li>\n<li><code>CanvasRenderingContext2D.lineCap</code>：指定线条末端的样式，有三个可能的值：<code>butt</code>（默认值，末端为矩形）、<code>round</code>（末端为圆形）、<code>square</code>（末端为突出的矩形，矩形宽度不变，高度为线条宽度的一半）。</li>\n<li><code>CanvasRenderingContext2D.lineJoin</code>：指定线段交点的样式，有三个可能的值：<code>round</code>（交点为扇形）、<code>bevel</code>（交点为三角形底边）、<code>miter</code>（默认值，交点为菱形)。</li>\n<li><code>CanvasRenderingContext2D.miterLimit</code>：指定交点菱形的长度，默认为10。该属性只在<code>lineJoin</code>属性的值等于<code>miter</code>时有效。</li>\n<li><code>CanvasRenderingContext2D.getLineDash()</code>：返回一个数组，表示虚线里面线段和间距的长度。</li>\n<li><code>CanvasRenderingContext2D.setLineDash()</code>：数组，用于指定虚线里面线段和间距的长度。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span>lineWidth <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>lineCap <span class=\"token operator\">=</span> <span class=\"token string\">'round'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>lineJoin <span class=\"token operator\">=</span> <span class=\"token string\">'round'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">setLineDash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，线条的宽度为3，线条的末端和交点都改成圆角，并且设置为虚线。</p>\n<h3 id=\"矩形\"><a href=\"#矩形\" class=\"headerlink\" title=\"矩形\"></a>矩形</h3><p>以下方法用来绘制矩形。</p>\n<ul>\n<li><code>CanvasRenderingContext2D.rect()</code>：绘制矩形路径。</li>\n<li><code>CanvasRenderingContext2D.fillRect()</code>：填充一个矩形。</li>\n<li><code>CanvasRenderingContext2D.strokeRect()</code>：绘制矩形边框。</li>\n<li><code>CanvasRenderingContext2D.clearRect()</code>：指定矩形区域的像素都变成透明。</li>\n</ul>\n<p>上面四个方法的格式都一样，都接受四个参数，分别是矩形左上角的横坐标和纵坐标、矩形的宽和高。</p>\n<p><code>CanvasRenderingContext2D.rect()</code>方法用于绘制矩形路径。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码绘制一个正方形，左上角坐标为<code>(10, 10)</code>，宽和高都为100。</p>\n<p><code>CanvasRenderingContext2D.fillRect()</code>用来向一个矩形区域填充颜色。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码绘制一个绿色的正方形，左上角坐标为<code>(10, 10)</code>，宽和高都为100。</p>\n<p><code>CanvasRenderingContext2D.strokeRect()</code>用来绘制一个矩形区域的边框。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span>strokeStyle <span class=\"token operator\">=</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">strokeRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码绘制一个绿色的空心正方形，左上角坐标为<code>(10, 10)</code>，宽和高都为100。</p>\n<p><code>CanvasRenderingContext2D.clearRect()</code>用于擦除指定矩形区域的像素颜色，等同于把早先的绘制效果都去除。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码先绘制一个 100 x 100 的正方形，然后在它的内部擦除 90 x 90 的区域，等同于形成了一个5像素宽度的边框。</p>\n<h3 id=\"弧线\"><a href=\"#弧线\" class=\"headerlink\" title=\"弧线\"></a>弧线</h3><p>以下方法用于绘制弧形。</p>\n<ul>\n<li><code>CanvasRenderingContext2D.arc()</code>：通过指定圆心和半径绘制弧形。</li>\n<li><code>CanvasRenderingContext2D.arcTo()</code>：通过指定两根切线和半径绘制弧形。</li>\n</ul>\n<p><code>CanvasRenderingContext2D.arc()</code>主要用来绘制圆形或扇形。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 格式</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> startAngle<span class=\"token punctuation\">,</span> endAngle<span class=\"token punctuation\">,</span> anticlockwise<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 实例</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>arc()</code>方法的<code>x</code>和<code>y</code>参数是圆心坐标，<code>radius</code>是半径，<code>startAngle</code>和<code>endAngle</code>则是扇形的起始角度和终止角度（以弧度表示），<code>anticlockwise</code>表示做图时应该逆时针画（<code>true</code>）还是顺时针画（<code>false</code>），这个参数用来控制扇形的方向（比如上半圆还是下半圆）。</p>\n<p>下面是绘制实心圆形的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码绘制了一个半径50，起始角度为0，终止角度为 2 * PI 的完整的圆。</p>\n<p>绘制空心半圆的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>CanvasRenderingContext2D.arcTo()</code>方法主要用来绘制圆弧，需要给出两个点的坐标，当前点与第一个点形成一条直线，第一个点与第二个点形成另一条直线，然后画出与这两根直线相切的弧线。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">arcTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>arcTo()</code>有5个参数，前两个参数是第一个点的坐标，第三个参数和第四个参数是第二个点的坐标，第五个参数是半径。然后，<code>(0, 0)</code>与<code>(50, 50)</code>形成一条直线，然后<code>(50, 50)</code>与<code>(100, 0)</code>形成第二条直线。弧线就是与这两根直线相切的部分。</p>\n<h3 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h3><p>以下方法和属性用于绘制文本。</p>\n<ul>\n<li><code>CanvasRenderingContext2D.fillText()</code>：在指定位置绘制实心字符。</li>\n<li><code>CanvasRenderingContext2D.strokeText()</code>：在指定位置绘制空心字符。</li>\n<li><code>CanvasRenderingContext2D.measureText()</code>：返回一个 TextMetrics 对象。</li>\n<li><code>CanvasRenderingContext2D.font</code>：指定字型大小和字体，默认值为<code>10px sans-serif</code>。</li>\n<li><code>CanvasRenderingContext2D.textAlign</code>：文本的对齐方式，默认值为<code>start</code>。</li>\n<li><code>CanvasRenderingContext2D.direction</code>：文本的方向，默认值为<code>inherit</code>。</li>\n<li><code>CanvasRenderingContext2D.textBaseline</code>：文本的垂直位置，默认值为<code>alphabetic</code>。</li>\n</ul>\n<p><code>fillText()</code>方法用来在指定位置绘制实心字符。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">CanvasRenderingContext2D<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> maxWidth<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>该方法接受四个参数。</p>\n<ul>\n<li><code>text</code>：所要填充的字符串。</li>\n<li><code>x</code>：文字起点的横坐标，单位像素。</li>\n<li><code>y</code>：文字起点的纵坐标，单位像素。</li>\n<li><code>maxWidth</code>：文本的最大像素宽度。该参数可选，如果省略，则表示宽度没有限制。如果文本实际长度超过这个参数指定的值，那么浏览器将尝试用较小的字体填充。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码在<code>(50, 50)</code>位置写入字符串<code>Hello world</code>。</p>\n<p>注意，<code>fillText()</code>方法不支持文本断行，所有文本一定出现在一行内。如果要生成多行文本，只有调用多次<code>fillText()</code>方法。</p>\n<p><code>strokeText()</code>方法用来添加空心字符，它的参数与<code>fillText()</code>一致。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">strokeText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面这两种方法绘制的文本，默认都是<code>10px</code>大小、<code>sans-serif</code>字体，<code>font</code>属性可以改变字体设置。该属性的值是一个字符串，使用 CSS 的<code>font</code>属性即可。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> <span class=\"token string\">'Bold 20px Arial'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>textAlign</code>属性用来指定文本的对齐方式。它可以取以下几个值。</p>\n<ul>\n<li><code>left</code>：左对齐</li>\n<li><code>right</code>：右对齐</li>\n<li><code>center</code>：居中</li>\n<li><code>start</code>：默认值，起点对齐（从左到右的文本为左对齐，从右到左的文本为右对齐）。</li>\n<li><code>end</code>：结尾对齐（从左到右的文本为右对齐，从右到左的文本为左对齐）。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> <span class=\"token string\">'Bold 20px Arial'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>textAlign <span class=\"token operator\">=</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>direction</code>属性指定文本的方向，默认值为<code>inherit</code>，表示继承<code>&lt;canvas&gt;</code>或<code>document</code>的设置。其他值包括<code>ltr</code>（从左到右）和<code>rtl</code>（从右到左）。</p>\n<p><code>textBaseline</code>属性指定文本的垂直位置，可以取以下值。</p>\n<ul>\n<li><code>top</code>：上部对齐（字母的基线是整体上移）。</li>\n<li><code>hanging</code>：悬挂对齐（字母的上沿在一根直线上），适用于印度文和藏文。</li>\n<li><code>middle</code>：中部对齐（字母的中线在一根直线上）。</li>\n<li><code>alphabetic</code>：默认值，表示字母位于字母表的正常位置（四线格的第三根线）。</li>\n<li><code>ideographic</code>：下沿对齐（字母的下沿在一根直线上），使用于东亚文字。</li>\n<li><code>bottom</code>：底部对齐（字母的基线下移）。对于英文字母，这个设置与<code>ideographic</code>没有差异。</li>\n</ul>\n<p><code>measureText()</code>方法接受一个字符串作为参数，返回一个 TextMetrics 对象，可以从这个对象上面获取参数字符串的信息，目前主要是文本渲染后的宽度（<code>width</code>）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> text1 <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">measureText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntext1<span class=\"token punctuation\">.</span>width <span class=\"token comment\">// 49.46</span>\n\nctx<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> <span class=\"token string\">'Bold 20px Arial'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> text2 <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">measureText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntext2<span class=\"token punctuation\">.</span>width <span class=\"token comment\">// 107.78</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>10px</code>大小的字符串<code>Hello world</code>，渲染后宽度为<code>49.46</code>。放大到<code>20px</code>以后，宽度为<code>107.78</code>。</p>\n<h3 id=\"渐变色和图像填充\"><a href=\"#渐变色和图像填充\" class=\"headerlink\" title=\"渐变色和图像填充\"></a>渐变色和图像填充</h3><p>以下方法用于设置渐变效果和图像填充效果。</p>\n<ul>\n<li><code>CanvasRenderingContext2D.createLinearGradient()</code>：定义线性渐变样式。</li>\n<li><code>CanvasRenderingContext2D.createRadialGradient()</code>：定义辐射渐变样式。</li>\n<li><code>CanvasRenderingContext2D.createPattern()</code>：定义图像填充样式。</li>\n</ul>\n<p><code>createLinearGradient()</code>方法按照给定直线，生成线性渐变的样式。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createLinearGradient</span><span class=\"token punctuation\">(</span>x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>ctx.createLinearGradient(x0, y0, x1, y1)</code>方法接受四个参数：<code>x0</code>和<code>y0</code>是起点的横坐标和纵坐标，<code>x1</code>和<code>y1</code>是终点的横坐标和纵坐标。通过不同的坐标值，可以生成从上至下、从左到右的渐变等等。</p>\n<p>该方法的返回值是一个<code>CanvasGradient</code>对象，该对象只有一个<code>addColorStop()</code>方向，用来指定渐变点的颜色。<code>addColorStop()</code>方法接受两个参数，第一个参数是0到1之间的一个位置量，0表示起点，1表示终点，第二个参数是一个字符串，表示 CSS 颜色。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> gradient <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngradient<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngradient<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> gradient<span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，定义了渐变样式<code>gradient</code>以后，将这个样式指定给<code>fillStyle</code>属性，然后<code>fillRect()</code>就会生成以这个样式填充的矩形区域。</p>\n<p><code>createRadialGradient()</code>方法定义一个辐射渐变，需要指定两个圆。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createRadialGradient</span><span class=\"token punctuation\">(</span>x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> r0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> r1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>createRadialGradient()</code>方法接受六个参数，<code>x0</code>和<code>y0</code>是辐射起始的圆的圆心坐标，<code>r0</code>是起始圆的半径，<code>x1</code>和<code>y1</code>是辐射终止的圆的圆心坐标，<code>r1</code>是终止圆的半径。</p>\n<p>该方法的返回值也是一个<code>CanvasGradient</code>对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> gradient <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createRadialGradient</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngradient<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngradient<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> gradient<span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，生成辐射样式以后，用这个样式填充一个矩形。</p>\n<p><code>createPattern()</code>方法定义一个图像填充样式，在指定方向上不断重复该图像，填充指定的区域。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createPattern</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> repetition<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>该方法接受两个参数，第一个参数是图像数据，它可以是<code>&lt;img&gt;</code>元素，也可以是另一个<code>&lt;canvas&gt;</code>元素，或者一个表示图像的 Blob 对象。第二个参数是一个字符串，有四个可能的值，分别是<code>repeat</code>（双向重复）、<code>repeat-x</code>(水平重复)、<code>repeat-y</code>(垂直重复)、<code>no-repeat</code>(不重复)。如果第二个参数是空字符串或<code>null</code>，则等同于<code>null</code>。</p>\n<p>该方法的返回值是一个<code>CanvasPattern</code>对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'https://example.com/pattern.png'</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> pattern <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createPattern</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token string\">'repeat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，图像加载成功以后，使用<code>createPattern()</code>生成图像样式，然后使用这个样式填充指定区域。</p>\n<h3 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h3><p>以下属性用于设置阴影。</p>\n<ul>\n<li><code>CanvasRenderingContext2D.shadowBlur</code>：阴影的模糊程度，默认为<code>0</code>。</li>\n<li><code>CanvasRenderingContext2D.shadowColor</code>：阴影的颜色，默认为<code>black</code>。</li>\n<li><code>CanvasRenderingContext2D.shadowOffsetX</code>：阴影的水平位移，默认为<code>0</code>。</li>\n<li><code>CanvasRenderingContext2D.shadowOffsetY</code>：阴影的垂直位移，默认为<code>0</code>。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span>shadowOffsetX <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>shadowOffsetY <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>shadowBlur <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>shadowColor <span class=\"token operator\">=</span> <span class=\"token string\">'rgba(0,0,0,0.5)'</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Canvas-API：图像处理\"><a href=\"#Canvas-API：图像处理\" class=\"headerlink\" title=\"Canvas API：图像处理\"></a>Canvas API：图像处理</h2><h3 id=\"CanvasRenderingContext2D-drawImage\"><a href=\"#CanvasRenderingContext2D-drawImage\" class=\"headerlink\" title=\"CanvasRenderingContext2D.drawImage()\"></a>CanvasRenderingContext2D.drawImage()</h3><p>Canvas API 允许将图像文件写入画布，做法是读取图片后，使用<code>drawImage()</code>方法将这张图片放上画布。</p>\n<p><code>CanvasRenderingContext2D.drawImage()</code>有三种使用格式。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">,</span> dWidth<span class=\"token punctuation\">,</span> dHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> sx<span class=\"token punctuation\">,</span> sy<span class=\"token punctuation\">,</span> sWidth<span class=\"token punctuation\">,</span> sHeight<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">,</span> dWidth<span class=\"token punctuation\">,</span> dHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>各个参数的含义如下。</p>\n<ul>\n<li>image：图像元素</li>\n<li>sx：图像内部的横坐标，用于映射到画布的放置点上。</li>\n<li>sy：图像内部的纵坐标，用于映射到画布的放置点上。</li>\n<li>sWidth：图像在画布上的宽度，会产生缩放效果。如果未指定，则图像不会缩放，按照实际大小占据画布的宽度。</li>\n<li>sHeight：图像在画布上的高度，会产生缩放效果。如果未指定，则图像不会缩放，按照实际大小占据画布的高度。</li>\n<li>dx：画布内部的横坐标，用于放置图像的左上角</li>\n<li>dy：画布内部的纵坐标，用于放置图像的右上角</li>\n<li>dWidth：图像在画布内部的宽度，会产生缩放效果。</li>\n<li>dHeight：图像在画布内部的高度，会产生缩放效果。</li>\n</ul>\n<p>下面是最简单的使用场景，将图像放在画布上，两者左上角对齐。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'image.png'</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码将一个 PNG 图像放入画布。这时，图像将是原始大小，如果画布小于图像，就会只显示出图像左上角，正好等于画布大小的那一块。</p>\n<p>如果要显示完整的图片，可以用图像的宽和高，设置成画布的宽和高。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimage<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> drawImageActualSize<span class=\"token punctuation\">;</span>\nimage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'https://example.com/image.jpg'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">drawImageActualSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>naturalWidth<span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>naturalHeight<span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>naturalWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>naturalHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>&lt;canvas&gt;</code>元素的大小设置成图像的本来大小，就能保证完整展示图像。由于图像的本来大小，只有图像加载成功以后才能拿到，因此调整画布的大小，必须放在<code>image.onload</code>这个监听函数里面。</p>\n<h3 id=\"像素读写\"><a href=\"#像素读写\" class=\"headerlink\" title=\"像素读写\"></a>像素读写</h3><p>以下三个方法与像素读写相关。</p>\n<ul>\n<li><code>CanvasRenderingContext2D.getImageData()</code>：将画布读取成一个 ImageData 对象</li>\n<li><code>CanvasRenderingContext2D.putImageData()</code>：将 ImageData 对象写入画布</li>\n<li><code>CanvasRenderingContext2D.createImageData()</code>：生成 ImageData 对象</li>\n</ul>\n<p><strong>（1）getImageData()</strong></p>\n<p><code>CanvasRenderingContext2D.getImageData()</code>方法用来读取<code>&lt;canvas&gt;</code>的内容，返回一个 ImageData 对象，包含了每个像素的信息。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span>sx<span class=\"token punctuation\">,</span> sy<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">,</span> sh<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>getImageData()</code>方法接受四个参数。<code>sx</code>和<code>sy</code>是读取区域的左上角坐标，<code>sw</code>和<code>sh</code>是读取区域的宽度和高度。如果想要读取整个<code>&lt;canvas&gt;</code>区域，可以写成下面这样。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> imageData <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>getImageData()</code>方法返回的是一个<code>ImageData</code>对象。该对象有三个属性。</p>\n<ul>\n<li>ImageData.data：一个一维数组。该数组的值，依次是每个像素的红、绿、蓝、alpha 通道值（每个值的范围是 0～255），因此该数组的长度等于<code>图像的像素宽度 x 图像的像素高度 x 4</code>。这个数组不仅可读，而且可写，因此通过操作这个数组，就可以达到操作图像的目的。</li>\n<li>ImageData.width：浮点数，表示 ImageData 的像素宽度。</li>\n<li>ImageData.height：浮点数，表示 ImageData 的像素高度。</li>\n</ul>\n<p><strong>（2）putImageData()</strong></p>\n<p><code>CanvasRenderingContext2D.putImageData()</code>方法将<code>ImageData</code>对象的像素绘制在<code>&lt;canvas&gt;</code>画布上。该方法有两种使用格式。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">putImageData</span><span class=\"token punctuation\">(</span>imagedata<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">)</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">putImageData</span><span class=\"token punctuation\">(</span>imagedata<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">,</span> dirtyX<span class=\"token punctuation\">,</span> dirtyY<span class=\"token punctuation\">,</span> dirtyWidth<span class=\"token punctuation\">,</span> dirtyHeight<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>该方法有如下参数。</p>\n<ul>\n<li>imagedata：包含像素信息的 ImageData 对象。</li>\n<li>dx：<code>&lt;canvas&gt;</code>元素内部的横坐标，用于放置 ImageData 图像的左上角。</li>\n<li>dy：<code>&lt;canvas&gt;</code>元素内部的纵坐标，用于放置 ImageData 图像的左上角。</li>\n<li>dirtyX：ImageData 图像内部的横坐标，用于作为放置到<code>&lt;canvas&gt;</code>的矩形区域的左上角的横坐标，默认为0。</li>\n<li>dirtyY：ImageData 图像内部的纵坐标，用于作为放置到<code>&lt;canvas&gt;</code>的矩形区域的左上角的纵坐标，默认为0。</li>\n<li>dirtyWidth：放置到<code>&lt;canvas&gt;</code>的矩形区域的宽度，默认为 ImageData 图像的宽度。</li>\n<li>dirtyHeight：放置到<code>&lt;canvas&gt;</code>的矩形区域的高度，默认为 ImageData 图像的高度。</li>\n</ul>\n<p>下面是将 ImageData 对象绘制到<code>&lt;canvas&gt;</code>的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">putImageData</span><span class=\"token punctuation\">(</span>imageData<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>（3）createImageData()</strong></p>\n<p><code>CanvasRenderingContext2D.createImageData()</code>方法用于生成一个空的<code>ImageData</code>对象，所有像素都是透明的黑色（即每个值都是<code>0</code>）。该方法有两种使用格式。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createImageData</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">createImageData</span><span class=\"token punctuation\">(</span>imagedata<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>createImageData()</code>方法的参数如下。</p>\n<ul>\n<li>width：ImageData 对象的宽度，单位为像素。</li>\n<li>height：ImageData 对象的高度，单位为像素。</li>\n<li>imagedata：一个现有的 ImageData 对象，返回值将是这个对象的拷贝。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> imageData <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>imageData</code>是一个 100 x 100 的像素区域，其中每个像素都是透明的黑色。</p>\n<h3 id=\"CanvasRenderingContext2D-save-，CanvasRenderingContext2D-restore\"><a href=\"#CanvasRenderingContext2D-save-，CanvasRenderingContext2D-restore\" class=\"headerlink\" title=\"CanvasRenderingContext2D.save()，CanvasRenderingContext2D.restore()\"></a>CanvasRenderingContext2D.save()，CanvasRenderingContext2D.restore()</h3><p><code>CanvasRenderingContext2D.save()</code>方法用于将画布的当前样式保存到堆栈，相当于在内存之中产生一个样式快照。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>save()</code>会为画布的默认样式产生一个快照。</p>\n<p><code>CanvasRenderingContext2D.restore()</code>方法将画布的样式恢复到上一个保存的快照，如果没有已保存的快照，则不产生任何效果。</p>\n<p>上下文环境，restore方法用于恢复到上一次保存的上下文环境。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码画一个矩形。矩形的填充色本来设为绿色，但是<code>restore()</code>方法撤销了这个设置，将样式恢复上一次保存的状态（即默认样式），所以实际的填充色是黑色（默认颜色）。</p>\n<h3 id=\"CanvasRenderingContext2D-canvas\"><a href=\"#CanvasRenderingContext2D-canvas\" class=\"headerlink\" title=\"CanvasRenderingContext2D.canvas\"></a>CanvasRenderingContext2D.canvas</h3><p><code>CanvasRenderingContext2D.canvas</code>属性指向当前<code>CanvasRenderingContext2D</code>对象所在的<code>&lt;canvas&gt;</code>元素。该属性只读。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span>canvas <span class=\"token operator\">===</span> canvas <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"图像变换\"><a href=\"#图像变换\" class=\"headerlink\" title=\"图像变换\"></a>图像变换</h3><p>以下方法用于图像变换。</p>\n<ul>\n<li><code>CanvasRenderingContext2D.rotate()</code>：图像旋转</li>\n<li><code>CanvasRenderingContext2D.scale()</code>：图像缩放</li>\n<li><code>CanvasRenderingContext2D.translate()</code>：图像平移</li>\n<li><code>CanvasRenderingContext2D.transform()</code>：通过一个变换矩阵完成图像变换</li>\n<li><code>CanvasRenderingContext2D.setTransform()</code>：取消前面的图像变换</li>\n</ul>\n<p><strong>（1）rotate()</strong></p>\n<p><code>CanvasRenderingContext2D.rotate()</code>方法用于图像旋转。它接受一个弧度值作为参数，表示顺时针旋转的度数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码会显示一个顺时针倾斜45度的矩形。注意，<code>rotate()</code>方法必须在<code>fillRect()</code>方法之前调用，否则是不起作用的。</p>\n<p>旋转中心点始终是画布左上角的原点。如果要更改中心点，需要使用<code>translate()</code>方法移动画布。</p>\n<p><strong>（2）scale()</strong></p>\n<p><code>CanvasRenderingContext2D.scale()</code>方法用于缩放图像。它接受两个参数，分别是<code>x</code>轴方向的缩放因子和<code>y</code>轴方向的缩放因子。默认情况下，一个单位就是一个像素，缩放因子可以缩放单位，比如缩放因子<code>0.5</code>表示将大小缩小为原来的50%，缩放因子<code>10</code>表示放大十倍。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，原来的矩形是 10 x 10，缩放后展示出来是 100 x 30。</p>\n<p>如果缩放因子为1，就表示图像没有任何缩放。如果为-1，则表示方向翻转。<code>ctx.scale(-1, 1)</code>为水平翻转，<code>ctx.scale(1, -1)</code>表示垂直翻转。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> <span class=\"token string\">\"16px serif\"</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码会显示一个水平倒转的、高度放大2倍的<code>Hello World!</code>。</p>\n<p>注意，负向缩放本质是坐标翻转，所针对的坐标轴就是画布左上角原点的坐标轴。</p>\n<p><strong>（3）translate()</strong></p>\n<p><code>CanvasRenderingContext2D.translate()</code>方法用于平移图像。它接受两个参数，分别是 x 轴和 y 轴移动的距离（单位像素）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>（4）transform()</strong></p>\n<p><code>CanvasRenderingContext2D.transform()</code>方法接受一个变换矩阵的六个元素作为参数，完成缩放、旋转、移动和倾斜等变形。</p>\n<p>它的使用格式如下。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\na:水平缩放(默认值1，单位倍数)\nb:水平倾斜(默认值0，单位弧度)\nc:垂直倾斜(默认值0，单位弧度)\nd:垂直缩放(默认值1，单位倍数)\ne:水平位移(默认值0，单位像素)\nf:垂直位移(默认值0，单位像素)\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，原始图形是 100 x 100 的矩形，结果缩放成 200 x 100 的矩形，并且左上角从<code>(0, 0)</code>移动到<code>(50, 50)</code>。</p>\n<p>注意，多个<code>transform()</code>方法具有叠加效果。</p>\n<p><strong>（5）setTransform()</strong></p>\n<p><code>CanvasRenderingContext2D.setTransform()</code>方法取消前面的图形变换，将画布恢复到该方法指定的状态。该方法的参数与<code>transform()</code>方法完全一致。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">setTransform</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，第一个<code>fillRect()</code>方法绘制的矩形，左上角从<code>(0, 0)</code>平移到<code>(50, 50)</code>。<code>setTransform()</code>方法取消了这个变换（已绘制的图形不受影响），将画布恢复到默认状态（变换矩形<code>1, 0, 0, 1, 0, 0</code>），所以第二个矩形的左上角回到<code>(0, 0)</code>。</p>\n<h2 id=\"lt-canvas-gt-元素的方法\"><a href=\"#lt-canvas-gt-元素的方法\" class=\"headerlink\" title=\"&lt;canvas&gt; 元素的方法\"></a><code>&lt;canvas&gt;</code> 元素的方法</h2><p>除了<code>CanvasRenderingContext2D</code>对象提供的方法，<code>&lt;canvas&gt;</code>元素本身也有自己的方法。</p>\n<h3 id=\"HTMLCanvasElement-toDataURL\"><a href=\"#HTMLCanvasElement-toDataURL\" class=\"headerlink\" title=\"HTMLCanvasElement.toDataURL()\"></a>HTMLCanvasElement.toDataURL()</h3><p><code>&lt;canvas&gt;</code>元素的<code>toDataURL()</code>方法，可以将 Canvas 数据转为 Data URI 格式的图像。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> quality<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>toDataURL()</code>方法接受两个参数。</p>\n<ul>\n<li>type：字符串，表示图像的格式。默认为<code>image/png</code>，另一个可用的值是<code>image/jpeg</code>，Chrome 浏览器还可以使用<code>image/webp</code>。</li>\n<li>quality：浮点数，0到1之间，表示 JPEG 和 WebP 图像的质量系数，默认值为0.92。</li>\n</ul>\n<p>该方法的返回值是一个 Data URI 格式的字符串。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">convertCanvasToImage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">canvas</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  image<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> image<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的代码将<code>&lt;canvas&gt;</code>元素，转化成PNG Data URI。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fullQuality <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mediumQuality <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lowQuality <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码将<code>&lt;canvas&gt;</code>元素转成高画质、中画质、低画质三种 JPEG 图像。</p>\n<h3 id=\"HTMLCanvasElement-toBlob\"><a href=\"#HTMLCanvasElement-toBlob\" class=\"headerlink\" title=\"HTMLCanvasElement.toBlob()\"></a>HTMLCanvasElement.toBlob()</h3><p><code>HTMLCanvasElement.toBlob()</code>方法用于将<code>&lt;canvas&gt;</code>图像转成一个 Blob 对象，默认类型是<code>image/png</code>。它的使用格式如下。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 格式</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">toBlob</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> mimeType<span class=\"token punctuation\">,</span> quality<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 示例</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">toBlob</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.95</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>toBlob()</code>方法可以接受三个参数。</p>\n<ul>\n<li>callback：回调函数。它接受生成的 Blob 对象作为参数。</li>\n<li>mimeType：字符串，图像的 MIMEType 类型，默认是<code>image/png</code>。</li>\n<li>quality：浮点数，0到1之间，表示图像的质量，只对<code>image/jpeg</code>和<code>image/webp</code>类型的图像有效。</li>\n</ul>\n<p>注意，该方法没有返回值。</p>\n<p>下面的例子将<code>&lt;canvas&gt;</code>图像复制成<code>&lt;img&gt;</code>图像。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">blobToImg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> newImg <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  newImg<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 使用完毕，释放 URL 对象</span>\n    <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  newImg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newImg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">toBlob</span><span class=\"token punctuation\">(</span>blobToImg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Canvas-使用实例\"><a href=\"#Canvas-使用实例\" class=\"headerlink\" title=\"Canvas 使用实例\"></a>Canvas 使用实例</h2><h3 id=\"动画效果\"><a href=\"#动画效果\" class=\"headerlink\" title=\"动画效果\"></a>动画效果</h3><p>通过改变坐标，很容易在画布 Canvas 元素上产生动画效果。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> posX <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> posY <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  posX <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  posY <span class=\"token operator\">+=</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">;</span>\n\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span>\n\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>posX<span class=\"token punctuation\">,</span> posY<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">closePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码会产生一个小圆点，每隔30毫秒就向右下方移动的效果。<code>setInterval()</code>函数的一开始，之所以要将画布重新渲染黑色底色，是为了抹去上一步的小圆点。</p>\n<p>在这个例子的基础上，通过设置圆心坐标，可以产生各种运动轨迹。下面是先上升后下降的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> vx <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> vy <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> gravity <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  posX <span class=\"token operator\">+=</span> vx<span class=\"token punctuation\">;</span>\n  posY <span class=\"token operator\">+=</span> vy<span class=\"token punctuation\">;</span>\n  vy <span class=\"token operator\">+=</span> gravity<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>x</code>坐标始终增大，表示持续向右运动。<code>y</code>坐标先变小，然后在重力作用下，不断增大，表示先上升后下降。</p>\n<h3 id=\"像素处理\"><a href=\"#像素处理\" class=\"headerlink\" title=\"像素处理\"></a>像素处理</h3><p>通过<code>getImageData()</code>方法和<code>putImageData()</code>方法，可以处理每个像素，进而操作图像内容，因此可以改写图像。</p>\n<p>下面是图像处理的通用写法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> imageData <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>imageData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">putImageData</span><span class=\"token punctuation\">(</span>imageData<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>filter</code>是一个处理像素的函数。以下是几种常见的<code>filter</code>。</p>\n<p><strong>（1）灰度效果</strong></p>\n<p>灰度图（grayscale）就是取红、绿、蓝三个像素值的算术平均值，这实际上将图像转成了黑白形式。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">grayscale</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pixels</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> d<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">+</span> g <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>d[i]</code>是红色值，<code>d[i+1]</code>是绿色值，<code>d[i+2]</code>是蓝色值，<code>d[i+3]</code>是 alpha 通道值。转成灰度的算法，就是将红、绿、蓝三个值相加后除以3，再将结果写回数组。</p>\n<p><strong>（2）复古效果</strong></p>\n<p>复古效果（sepia）是将红、绿、蓝三种值，分别取这三个值的某种加权平均值，使得图像有一种古旧的效果。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">sepia</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pixels</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> d<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>     <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span> <span class=\"token number\">0.393</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">*</span> <span class=\"token number\">0.769</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> <span class=\"token number\">0.189</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// red</span>\n      d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span> <span class=\"token number\">0.349</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">*</span> <span class=\"token number\">0.686</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> <span class=\"token number\">0.168</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// green</span>\n      d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span> <span class=\"token number\">0.272</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">*</span> <span class=\"token number\">0.534</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> <span class=\"token number\">0.131</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// blue</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>（3）红色蒙版效果</strong></p>\n<p>红色蒙版指的是，让图像呈现一种偏红的效果。算法是将红色通道设为红、绿、蓝三个值的平均值，而将绿色通道和蓝色通道都设为0。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">red</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pixels</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> d<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">+</span> g <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 红色通道取平均值</span>\n    d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 绿色通道和蓝色通道都设为0</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>（4）亮度效果</strong></p>\n<p>亮度效果（brightness）是指让图像变得更亮或更暗。算法将红色通道、绿色通道、蓝色通道，同时加上一个正值或负值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">brightness</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pixels<span class=\"token punctuation\">,</span> delta</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> d<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> delta<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// red</span>\n    d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> delta<span class=\"token punctuation\">;</span> <span class=\"token comment\">// green</span>\n    d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> delta<span class=\"token punctuation\">;</span> <span class=\"token comment\">// blue</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>（5）反转效果</strong></p>\n<p>反转效果（invert）是指图片呈现一种色彩颠倒的效果。算法为红、绿、蓝通道都取各自的相反值（<code>255 - 原值</code>）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">invert</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pixels</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> d<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li>David Walsh, <a href=\"http://davidwalsh.name/convert-canvas-image\">JavaScript Canvas Image Conversion</a></li>\n<li>Matt West, <a href=\"http://blog.teamtreehouse.com/getting-started-with-the-canvas-api\">Getting Started With The Canvas API</a></li>\n<li>John Robinson, <a href=\"http://www.storminthecastle.com/2013/04/06/how-you-can-do-cool-image-effects-using-html5-canvas/\">How You Can Do Cool Image Effects Using HTML5 Canvas</a></li>\n<li>Ivaylo Gerchev, <a href=\"http://www.sitepoint.com/html5-canvas-tutorial-introduction/\">HTML5 Canvas Tutorial: An Introduction</a></li>\n<li>Donovan Hutchinson, <a href=\"http://hop.ie/blog/particles/\">Particles in canvas</a></li>\n</ul>\n<h1 id=\"Clipboard-API\"><a href=\"#Clipboard-API\" class=\"headerlink\" title=\"Clipboard API\"></a>Clipboard API</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>浏览器允许 JavaScript 脚本读写剪贴板，自动复制或粘贴内容。</p>\n<p>一般来说，脚本不应该改动用户的剪贴板，以免不符合用户的预期。但是，有些时候这样做确实能够带来方便，比如“一键复制”功能，用户点击一下按钮，指定的内容就自动进入剪贴板。</p>\n<p>目前，一共有三种方法可以实现剪贴板操作。</p>\n<ul>\n<li><code>Document.execCommand()</code>方法</li>\n<li>异步的 Clipboard API</li>\n<li><code>copy</code>事件和<code>paste</code>事件</li>\n</ul>\n<p>本文逐一介绍这三种方法。</p>\n<h2 id=\"Document-execCommand-方法\"><a href=\"#Document-execCommand-方法\" class=\"headerlink\" title=\"Document.execCommand() 方法\"></a>Document.execCommand() 方法</h2><p><code>Document.execCommand()</code>是操作剪贴板的传统方法，各种浏览器都支持。</p>\n<p>它支持复制、剪切和粘贴这三个操作。</p>\n<ul>\n<li><code>document.execCommand(&#39;copy&#39;)</code>（复制）</li>\n<li><code>document.execCommand(&#39;cut&#39;)</code>（剪切）</li>\n<li><code>document.execCommand(&#39;paste&#39;)</code>（粘贴）</li>\n</ul>\n<p>（1）复制操作</p>\n<p>复制时，先选中文本，然后调用<code>document.execCommand(&#39;copy&#39;)</code>，选中的文本就会进入剪贴板。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> inputElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninputElement<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">execCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，脚本先选中输入框<code>inputElement</code>里面的文字（<code>inputElement.select()</code>），然后<code>document.execCommand(&#39;copy&#39;)</code>将其复制到剪贴板。</p>\n<p>注意，复制操作最好放在事件监听函数里面，由用户触发（比如用户点击按钮）。如果脚本自主执行，某些浏览器可能会报错。</p>\n<p>（2）粘贴操作</p>\n<p>粘贴时，调用<code>document.execCommand(&#39;paste&#39;)</code>，就会将剪贴板里面的内容，输出到当前的焦点元素中。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> pasteText <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npasteText<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">execCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">'paste'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>（3）缺点</p>\n<p><code>Document.execCommand()</code>方法虽然方便，但是有一些缺点。</p>\n<p>首先，它只能将选中的内容复制到剪贴板，无法向剪贴板任意写入内容。</p>\n<p>其次，它是同步操作，如果复制/粘贴大量数据，页面会出现卡顿。有些浏览器还会跳出提示框，要求用户许可，这时在用户做出选择前，页面会失去响应。</p>\n<p>为了解决这些问题，浏览器厂商提出了异步的 Clipboard API。</p>\n<h2 id=\"异步-Clipboard-API\"><a href=\"#异步-Clipboard-API\" class=\"headerlink\" title=\"异步 Clipboard API\"></a>异步 Clipboard API</h2><p>Clipboard API 是下一代的剪贴板操作方法，比传统的<code>document.execCommand()</code>方法更强大、更合理。</p>\n<p>它的所有操作都是异步的，返回 Promise 对象，不会造成页面卡顿。而且，它可以将任意内容（比如图片）放入剪贴板。</p>\n<p><code>navigator.clipboard</code>属性返回 Clipboard 对象，所有操作都通过这个对象进行。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> clipboardObj <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果<code>navigator.clipboard</code>属性返回<code>undefined</code>，就说明当前浏览器不支持这个 API。</p>\n<p>由于用户可能把敏感数据（比如密码）放在剪贴板，允许脚本任意读取会产生安全风险，所以这个 API 的安全限制比较多。</p>\n<p>首先，Chrome 浏览器规定，只有 HTTPS 协议的页面才能使用这个 API。不过，开发环境（<code>localhost</code>）允许使用非加密协议。</p>\n<p>其次，调用时需要明确获得用户的许可。权限的具体实现使用了 Permissions API，跟剪贴板相关的有两个权限：<code>clipboard-write</code>（写权限）和<code>clipboard-read</code>（读权限）。“写权限”自动授予脚本，而“读权限”必须用户明确同意给予。也就是说，写入剪贴板，脚本可以自动完成，但是读取剪贴板时，浏览器会弹出一个对话框，询问用户是否同意读取。</p>\n<p><img src=\"https://www.wangbase.com/blogimg/asset/202101/bg2021012004.jpg\"></p>\n<p>另外，需要注意的是，脚本读取的总是当前页面的剪贴板。这带来的一个问题是，如果把相关的代码粘贴到开发者工具中直接运行，可能会报错，因为这时的当前页面是开发者工具的窗口，而不是网页页面。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">readText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你把上面的代码，粘贴到开发者工具里面运行，就会报错。因为代码运行的时候，开发者工具窗口是当前页，这个页面不存在 Clipboard API 依赖的 DOM 接口。一个解决方法就是，相关代码放到<code>setTimeout()</code>里面延迟运行，在调用函数之前快速点击浏览器的页面窗口，将其变成当前页。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">readText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码粘贴到开发者工具运行后，快速点击一下网页的页面窗口，使其变为当前页，这样就不会报错了。</p>\n<h2 id=\"Clipboard-对象\"><a href=\"#Clipboard-对象\" class=\"headerlink\" title=\"Clipboard 对象\"></a>Clipboard 对象</h2><p>Clipboard 对象提供了四个方法，用来读写剪贴板。它们都是异步方法，返回 Promise 对象。</p>\n<h3 id=\"Clipboard-readText\"><a href=\"#Clipboard-readText\" class=\"headerlink\" title=\"Clipboard.readText()\"></a>Clipboard.readText()</h3><p><code>Clipboard.readText()</code>方法用于复制剪贴板里面的文本数据。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">readText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，用户点击页面后，就会输出剪贴板里面的文本。注意，浏览器这时会跳出一个对话框，询问用户是否同意脚本读取剪贴板。</p>\n<p>如果用户不同意，脚本就会报错。这时，可以使用<code>try...catch</code>结构，处理报错。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getClipboardContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">readText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pasted content: '</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failed to read clipboard contents: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Clipboard-read\"><a href=\"#Clipboard-read\" class=\"headerlink\" title=\"Clipboard.read()\"></a>Clipboard.read()</h3><p><code>Clipboard.read()</code>方法用于复制剪贴板里面的数据，可以是文本数据，也可以是二进制数据（比如图片）。该方法需要用户明确给予许可。</p>\n<p>该方法返回一个 Promise 对象。一旦该对象的状态变为 resolved，就可以获得一个数组，每个数组成员都是 ClipboardItem 对象的实例。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getClipboardContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> clipboardItems <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> clipboardItem <span class=\"token keyword\">of</span> clipboardItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> type <span class=\"token keyword\">of</span> clipboardItem<span class=\"token punctuation\">.</span>types<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> clipboardItem<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>ClipboardItem 对象表示一个单独的剪贴项，每个剪贴项都拥有<code>ClipboardItem.types</code>属性和<code>ClipboardItem.getType()</code>方法。</p>\n<p><code>ClipboardItem.types</code>属性返回一个数组，里面的成员是该剪贴项可用的 MIME 类型，比如某个剪贴项可以用 HTML 格式粘贴，也可以用纯文本格式粘贴，那么它就有两个 MIME 类型（<code>text/html</code>和<code>text/plain</code>）。</p>\n<p><code>ClipboardItem.getType(type)</code>方法用于读取剪贴项的数据，返回一个 Promise 对象。该方法接受剪贴项的 MIME 类型作为参数，返回该类型的数据，该参数是必需的，否则会报错。</p>\n<h3 id=\"Clipboard-writeText\"><a href=\"#Clipboard-writeText\" class=\"headerlink\" title=\"Clipboard.writeText()\"></a>Clipboard.writeText()</h3><p><code>Clipboard.writeText()</code>方法用于将文本内容写入剪贴板。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">writeText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Yo'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例是用户在网页点击后，脚本向剪贴板写入文本数据。</p>\n<p>该方法不需要用户许可，但是最好也放在<code>try...catch</code>里面防止报错。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">copyPageUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">writeText</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Page URL copied to clipboard'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failed to copy: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Clipboard-write\"><a href=\"#Clipboard-write\" class=\"headerlink\" title=\"Clipboard.write()\"></a>Clipboard.write()</h3><p><code>Clipboard.write()</code>方法用于将任意数据写入剪贴板，可以是文本数据，也可以是二进制数据。</p>\n<p>该方法接受一个 ClipboardItem 实例作为参数，表示写入剪贴板的数据。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> imgURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://dummyimage.com/300.png'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>imgURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClipboardItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token punctuation\">[</span>blob<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> blob\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Image copied.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，脚本向剪贴板写入了一张图片。注意，Chrome 浏览器目前只支持写入 PNG 格式的图片。</p>\n<p><code>ClipboardItem()</code>是浏览器原生提供的构造函数，用来生成<code>ClipboardItem</code>实例，它接受一个对象作为参数，该对象的键名是数据的 MIME 类型，键值就是数据本身。</p>\n<p>下面的例子是将同一个剪贴项的多种格式的值，写入剪贴板，一种是文本数据，另一种是二进制数据，供不同的场合粘贴使用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'kitten.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Cute sleeping kitten'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClipboardItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'text/plain'</span><span class=\"token operator\">:</span> text<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'image/png'</span><span class=\"token operator\">:</span> image\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"copy-事件，cut-事件\"><a href=\"#copy-事件，cut-事件\" class=\"headerlink\" title=\"copy 事件，cut 事件\"></a>copy 事件，cut 事件</h2><p>用户向剪贴板放入数据时，将触发<code>copy</code>事件。</p>\n<p>下面的示例是将用户放入剪贴板的文本，转为大写。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.source'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> selection <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  event<span class=\"token punctuation\">.</span>clipboardData<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">,</span> selection<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，事件对象的<code>clipboardData</code>属性包含了剪贴板数据。它是一个对象，有以下属性和方法。</p>\n<ul>\n<li><code>Event.clipboardData.setData(type, data)</code>：修改剪贴板数据，需要指定数据类型。</li>\n<li><code>Event.clipboardData.getData(type)</code>：获取剪贴板数据，需要指定数据类型。</li>\n<li><code>Event.clipboardData.clearData([type])</code>：清除剪贴板数据，可以指定数据类型。如果不指定类型，将清除所有类型的数据。</li>\n<li><code>Event.clipboardData.items</code>：一个类似数组的对象，包含了所有剪贴项，不过通常只有一个剪贴项。</li>\n</ul>\n<p>下面的示例是拦截用户的复制操作，将指定内容放入剪贴板。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> clipboardItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> clipboardItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> e<span class=\"token punctuation\">.</span>clipboardData<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      clipboardItems<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClipboardItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> item<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>clipboardItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Image copied.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，先使用<code>e.preventDefault()</code>取消了剪贴板的默认操作，然后由脚本接管复制操作。</p>\n<p><code>cut</code>事件则是在用户进行剪切操作时触发，它的处理跟<code>copy</code>事件完全一样，也是从<code>Event.clipboardData</code>属性拿到剪切的数据。</p>\n<h2 id=\"paste-事件\"><a href=\"#paste-事件\" class=\"headerlink\" title=\"paste 事件\"></a>paste 事件</h2><p>用户使用剪贴板数据，进行粘贴操作时，会触发<code>paste</code>事件。</p>\n<p>下面的示例是拦截粘贴操作，由脚本将剪贴板里面的数据取出来。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'paste'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">readText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pasted text: '</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考链接-1\"><a href=\"#参考链接-1\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://web.dev/async-clipboard/\">Unblocking clipboard access</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard\">Interact with the clipboard</a></li>\n<li><a href=\"https://blog.tomayac.com/2020/03/20/multi-mime-type-copying-with-the-async-clipboard-api/\">Multi-MIME Type Copying with the Async Clipboard API</a></li>\n</ul>\n<h1 id=\"Fetch-API\"><a href=\"#Fetch-API\" class=\"headerlink\" title=\"Fetch API\"></a>Fetch API</h1><p><code>fetch()</code>是 XMLHttpRequest 的升级版，用于在 JavaScript 脚本里面发出 HTTP 请求。</p>\n<p>浏览器原生提供这个对象。本章详细介绍它的用法。</p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p><code>fetch()</code>的功能与 XMLHttpRequest 基本相同，但有三个主要的差异。</p>\n<p>（1）<code>fetch()</code>使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简洁。</p>\n<p>（2）<code>fetch()</code>采用模块化设计，API 分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些；相比之下，XMLHttpRequest 的 API 设计并不是很好，输入、输出、状态都在同一个接口管理，容易写出非常混乱的代码。</p>\n<p>（3）<code>fetch()</code>通过数据流（Stream 对象）处理数据，可以分块读取，有利于提高网站性能表现，减少内存占用，对于请求大文件或者网速慢的场景相当有用。XMLHTTPRequest 对象不支持数据流，所有的数据必须放在缓存里，不支持分块读取，必须等待全部拿到后，再一次性吐出来。</p>\n<p>在用法上，<code>fetch()</code>接受一个 URL 字符串作为参数，默认向该网址发出 GET 请求，返回一个 Promise 对象。它的基本用法如下。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是一个例子，从服务器获取 JSON 数据。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com/users/ruanyf'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request Failed'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>fetch()</code>接收到的<code>response</code>是一个 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\">Stream 对象</a>，<code>response.json()</code>是一个异步操作，取出所有内容，并将其转为 JSON 对象。</p>\n<p>Promise 可以使用 await 语法改写，使得语义更清晰。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.github.com/users/ruanyf'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request Failed'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>await</code>语句必须放在<code>try...catch</code>里面，这样才能捕捉异步操作中可能发生的错误。</p>\n<p>后文都采用<code>await</code>的写法，不使用<code>.then()</code>的写法。</p>\n<h2 id=\"Response-对象：处理-HTTP-回应\"><a href=\"#Response-对象：处理-HTTP-回应\" class=\"headerlink\" title=\"Response 对象：处理 HTTP 回应\"></a>Response 对象：处理 HTTP 回应</h2><h3 id=\"Response-对象的同步属性\"><a href=\"#Response-对象的同步属性\" class=\"headerlink\" title=\"Response 对象的同步属性\"></a>Response 对象的同步属性</h3><p><code>fetch()</code>请求成功以后，得到的是一个 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\">Response 对象</a>。它对应服务器的 HTTP 回应。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>前面说过，Response 包含的数据通过 Stream 接口异步读取，但是它还包含一些同步属性，对应 HTTP 回应的标头信息（Headers），可以立即读取。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/readme.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>response.status</code>和<code>response.statusText</code>就是 Response 的同步属性，可以立即读取。</p>\n<p>标头信息属性有下面这些。</p>\n<p><strong>Response.ok</strong></p>\n<p><code>Response.ok</code>属性返回一个布尔值，表示请求是否成功，<code>true</code>对应 HTTP 请求的状态码 200 到 299，<code>false</code>对应其他的状态码。</p>\n<p><strong>Response.status</strong></p>\n<p><code>Response.status</code>属性返回一个数字，表示 HTTP 回应的状态码（例如200，表示成功请求）。</p>\n<p><strong>Response.statusText</strong></p>\n<p><code>Response.statusText</code>属性返回一个字符串，表示 HTTP 回应的状态信息（例如请求成功以后，服务器返回“OK”）。</p>\n<p><strong>Response.url</strong></p>\n<p><code>Response.url</code>属性返回请求的 URL。如果 URL 存在跳转，该属性返回的是最终 URL。</p>\n<p><strong>Response.type</strong></p>\n<p><code>Response.type</code>属性返回请求的类型。可能的值如下：</p>\n<ul>\n<li><code>basic</code>：普通请求，即同源请求。</li>\n<li><code>cors</code>：跨域请求。</li>\n<li><code>error</code>：网络错误，主要用于 Service Worker。</li>\n<li><code>opaque</code>：如果<code>fetch()</code>请求的<code>type</code>属性设为<code>no-cors</code>，就会返回这个值，详见请求部分。表示发出的是简单的跨域请求，类似<code>&lt;form&gt;</code>表单的那种跨域请求。</li>\n<li><code>opaqueredirect</code>：如果<code>fetch()</code>请求的<code>redirect</code>属性设为<code>manual</code>，就会返回这个值，详见请求部分。</li>\n</ul>\n<p><strong>Response.redirected</strong></p>\n<p><code>Response.redirected</code>属性返回一个布尔值，表示请求是否发生过跳转。</p>\n<h3 id=\"判断请求是否成功\"><a href=\"#判断请求是否成功\" class=\"headerlink\" title=\"判断请求是否成功\"></a>判断请求是否成功</h3><p><code>fetch()</code>发出请求以后，有一个很重要的注意点：只有网络错误，或者无法连接时，<code>fetch()</code>才会报错，其他情况都不会报错，而是认为请求成功。</p>\n<p>这就是说，即使服务器返回的状态码是 4xx 或 5xx，<code>fetch()</code>也不会报错（即 Promise 不会变为 <code>rejected</code>状态）。</p>\n<p>只有通过<code>Response.status</code>属性，得到 HTTP 回应的真实状态码，才能判断请求是否成功。请看下面的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/readme.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>response.status</code>属性只有等于 2xx （200~299），才能认定请求成功。这里不用考虑网址跳转（状态码为 3xx），因为<code>fetch()</code>会将跳转的状态码自动转为 200。</p>\n<p>另一种方法是判断<code>response.ok</code>是否为<code>true</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 请求成功</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 请求失败</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Response-headers-属性\"><a href=\"#Response-headers-属性\" class=\"headerlink\" title=\"Response.headers 属性\"></a>Response.headers 属性</h3><p>Response 对象还有一个<code>Response.headers</code>属性，指向一个 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Headers\">Headers 对象</a>，对应 HTTP 回应的所有标头。</p>\n<p>Headers 对象可以使用<code>for...of</code>循环进行遍历。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 或者</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Headers 对象提供了以下方法，用来操作标头。</p>\n<blockquote>\n<ul>\n<li><code>Headers.get()</code>：根据指定的键名，返回键值。</li>\n<li><code>Headers.has()</code>： 返回一个布尔值，表示是否包含某个标头。</li>\n<li><code>Headers.set()</code>：将指定的键名设置为新的键值，如果该键名不存在则会添加。</li>\n<li><code>Headers.append()</code>：添加标头。</li>\n<li><code>Headers.delete()</code>：删除标头。</li>\n<li><code>Headers.keys()</code>：返回一个遍历器，可以依次遍历所有键名。</li>\n<li><code>Headers.values()</code>：返回一个遍历器，可以依次遍历所有键值。</li>\n<li><code>Headers.entries()</code>：返回一个遍历器，可以依次遍历所有键值对（<code>[key, value]</code>）。</li>\n<li><code>Headers.forEach()</code>：依次遍历标头，每个标头都会执行一次参数函数。</li>\n</ul>\n</blockquote>\n<p>上面的有些方法可以修改标头，那是因为继承自 Headers 接口。对于 HTTP 回应来说，修改标头意义不大，况且很多标头是只读的，浏览器不允许修改。</p>\n<p>这些方法中，最常用的是<code>response.headers.get()</code>，用于读取某个标头的值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span>  <span class=\"token keyword\">await</span>  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponse<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// application/json; charset=utf-8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Headers.keys()</code>和<code>Headers.values()</code>方法用来分别遍历标头的键名和键值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 键名</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> myHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 键值</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> myHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Headers.forEach()</code>方法也可以遍历所有的键值和键名。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponse<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"读取内容的方法\"><a href=\"#读取内容的方法\" class=\"headerlink\" title=\"读取内容的方法\"></a>读取内容的方法</h3><p><code>Response</code>对象根据服务器返回的不同类型的数据，提供了不同的读取方法。</p>\n<blockquote>\n<ul>\n<li><code>response.text()</code>：得到文本字符串。</li>\n<li><code>response.json()</code>：得到 JSON 对象。</li>\n<li><code>response.blob()</code>：得到二进制 Blob 对象。</li>\n<li><code>response.formData()</code>：得到 FormData 表单对象。</li>\n<li><code>response.arrayBuffer()</code>：得到二进制 ArrayBuffer 对象。</li>\n</ul>\n</blockquote>\n<p>上面5个读取方法都是异步的，返回的都是 Promise 对象。必须等到异步操作结束，才能得到服务器返回的完整数据。</p>\n<p><strong>response.text()</strong></p>\n<p><code>response.text()</code>可以用于获取文本数据，比如 HTML 文件。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> body<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>response.json()</strong></p>\n<p><code>response.json()</code>主要用于获取服务器返回的 JSON 数据，前面已经举过例子了。</p>\n<p><strong>response.formData()</strong></p>\n<p><code>response.formData()</code>主要用在 Service Worker 里面，拦截用户提交的表单，修改某些数据以后，再提交给服务器。</p>\n<p><strong>response.blob()</strong></p>\n<p><code>response.blob()</code>用于获取二进制文件。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flower.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myBlob <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> objectURL <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>myBlob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> objectURL<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> 上面示例读取图片文件<code>flower.jpg</code>，显示在网页上。</p>\n<p><strong>response.arrayBuffer()</strong></p>\n<p><code>response.arrayBuffer()</code>主要用于获取流媒体文件。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">window<span class=\"token punctuation\">.</span>AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'song.ogg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> decodeData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">decodeAudioData</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">;</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource<span class=\"token punctuation\">.</span>loop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例是<code>response.arrayBuffer()</code>获取音频文件<code>song.ogg</code>，然后在线播放的例子。</p>\n<h3 id=\"Response-clone\"><a href=\"#Response-clone\" class=\"headerlink\" title=\"Response.clone()\"></a>Response.clone()</h3><p>Stream 对象只能读取一次，读取完就没了。这意味着，前一节的五个读取方法，只能使用一个，否则会报错。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span>  <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span>  <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例先使用了<code>response.text()</code>，就把 Stream 读完了。后面再调用<code>response.json()</code>，就没有内容可读了，所以报错。</p>\n<p>Response 对象提供<code>Response.clone()</code>方法，创建<code>Response</code>对象的副本，实现多次读取。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> response1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> response2 <span class=\"token operator\">=</span> response1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myBlob1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response1<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myBlob2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response2<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nimage1<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>myBlob1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimage2<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>myBlob2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>response.clone()</code>复制了一份 Response 对象，然后将同一张图片读取了两次。</p>\n<p>Response 对象还有一个<code>Response.redirect()</code>方法，用于将 Response 结果重定向到指定的 URL。该方法一般只用在 Service Worker 里面，这里就不介绍了。</p>\n<h3 id=\"Response-body-属性\"><a href=\"#Response-body-属性\" class=\"headerlink\" title=\"Response.body 属性\"></a>Response.body 属性</h3><p><code>Response.body</code>属性是 Response 对象暴露出的底层接口，返回一个 ReadableStream 对象，供用户操作。</p>\n<p>它可以用来分块读取内容，应用之一就是显示下载的进度。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flower.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>done<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Received </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>value<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> bytes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>response.body.getReader()</code>方法返回一个遍历器。这个遍历器的<code>read()</code>方法每次返回一个对象，表示本次读取的内容块。</p>\n<p>这个对象的<code>done</code>属性是一个布尔值，用来判断有没有读完；<code>value</code>属性是一个 arrayBuffer 数组，表示内容块的内容，而<code>value.length</code>属性是当前块的大小。</p>\n<h2 id=\"fetch-的第二个参数：定制-HTTP-请求\"><a href=\"#fetch-的第二个参数：定制-HTTP-请求\" class=\"headerlink\" title=\"fetch()的第二个参数：定制 HTTP 请求\"></a><code>fetch()</code>的第二个参数：定制 HTTP 请求</h2><p><code>fetch()</code>的第一个参数是 URL，还可以接受第二个参数，作为配置对象，定制发出的 HTTP 请求。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> optionObj<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令的<code>optionObj</code>就是第二个参数。</p>\n<p>HTTP 请求的方法、标头、数据体都在这个对象里面设置。下面是一些示例。</p>\n<p><strong>（1）POST 请求</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"Content-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/x-www-form-urlencoded; charset=UTF-8\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> <span class=\"token string\">'foo=bar&amp;lorem=ipsum'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，配置对象用到了三个属性。</p>\n<blockquote>\n<ul>\n<li><code>method</code>：HTTP 请求的方法，<code>POST</code>、<code>DELETE</code>、<code>PUT</code>都在这个属性设置。</li>\n<li><code>headers</code>：一个对象，用来定制 HTTP 请求的标头。</li>\n<li><code>body</code>：POST 请求的数据体。</li>\n</ul>\n</blockquote>\n<p>注意，有些标头不能通过<code>headers</code>属性设置，比如<code>Content-Length</code>、<code>Cookie</code>、<code>Host</code>等等。它们是由浏览器自动生成，无法修改。</p>\n<p><strong>（2）提交 JSON 数据</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span>  <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span>  <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> surname<span class=\"token operator\">:</span>  <span class=\"token string\">'Smith'</span>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/article/fetch/post/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json;charset=utf-8'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> \n  body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，标头<code>Content-Type</code>要设成<code>&#39;application/json;charset=utf-8&#39;</code>。因为默认发送的是纯文本，<code>Content-Type</code>的默认值是<code>&#39;text/plain;charset=UTF-8&#39;</code>。</p>\n<p><strong>（3）提交表单</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>（4）文件上传</strong></p>\n<p>如果表单里面有文件选择器，可以用前一个例子的写法，上传的文件包含在整个表单里面，一起提交。</p>\n<p>另一种方法是用脚本添加文件，构造出一个表单，进行上传，请看下面的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[type=\"file\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndata<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndata<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/avatars'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> data\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上传二进制文件时，不用修改标头的<code>Content-Type</code>，浏览器会自动设置。</p>\n<p><strong>（5）直接上传二进制数据</strong></p>\n<p><code>fetch()</code>也可以直接上传二进制数据，将 Blob 或 arrayBuffer 数据放在<code>body</code>属性里面。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span>\n  canvasElem<span class=\"token punctuation\">.</span><span class=\"token function\">toBlob</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span>  <span class=\"token string\">'image/png'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/article/fetch/post/image'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  method<span class=\"token operator\">:</span>  <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> blob\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"fetch-配置对象的完整-API\"><a href=\"#fetch-配置对象的完整-API\" class=\"headerlink\" title=\"fetch()配置对象的完整 API\"></a><code>fetch()</code>配置对象的完整 API</h2><p><code>fetch()</code>第二个参数的完整 API 如下。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain;charset=UTF-8\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  referrer<span class=\"token operator\">:</span> <span class=\"token string\">\"about:client\"</span><span class=\"token punctuation\">,</span>\n  referrerPolicy<span class=\"token operator\">:</span> <span class=\"token string\">\"no-referrer-when-downgrade\"</span><span class=\"token punctuation\">,</span>\n  mode<span class=\"token operator\">:</span> <span class=\"token string\">\"cors\"</span><span class=\"token punctuation\">,</span>\n  credentials<span class=\"token operator\">:</span> <span class=\"token string\">\"same-origin\"</span><span class=\"token punctuation\">,</span>\n  cache<span class=\"token operator\">:</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span>\n  redirect<span class=\"token operator\">:</span> <span class=\"token string\">\"follow\"</span><span class=\"token punctuation\">,</span>\n  integrity<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  keepalive<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  signal<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>fetch()</code>请求的底层用的是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\">Request() 对象</a>的接口，参数完全一样，因此上面的 API 也是<code>Request()</code>的 API。</p>\n<p>这些属性里面，<code>headers</code>、<code>body</code>、<code>method</code>前面已经给过示例了，下面是其他属性的介绍。</p>\n<p><strong>cache</strong></p>\n<p><code>cache</code>属性指定如何处理缓存。可能的取值如下：</p>\n<ul>\n<li><code>default</code>：默认值，先在缓存里面寻找匹配的请求。</li>\n<li><code>no-store</code>：直接请求远程服务器，并且不更新缓存。</li>\n<li><code>reload</code>：直接请求远程服务器，并且更新缓存。</li>\n<li><code>no-cache</code>：将服务器资源跟本地缓存进行比较，有新的版本才使用服务器资源，否则使用缓存。</li>\n<li><code>force-cache</code>：缓存优先，只有不存在缓存的情况下，才请求远程服务器。</li>\n<li><code>only-if-cached</code>：只检查缓存，如果缓存里面不存在，将返回504错误。</li>\n</ul>\n<p><strong>mode</strong></p>\n<p><code>mode</code>属性指定请求的模式。可能的取值如下：</p>\n<ul>\n<li><code>cors</code>：默认值，允许跨域请求。</li>\n<li><code>same-origin</code>：只允许同源请求。</li>\n<li><code>no-cors</code>：请求方法只限于 GET、POST 和 HEAD，并且只能使用有限的几个简单标头，不能添加跨域的复杂标头，相当于提交表单、<code>&lt;script&gt;</code>加载脚本、<code>&lt;img&gt;</code>加载图片等传统的跨域请求方法。</li>\n</ul>\n<p><strong>credentials</strong></p>\n<p><code>credentials</code>属性指定是否发送 Cookie。可能的取值如下：</p>\n<ul>\n<li><code>same-origin</code>：默认值，同源请求时发送 Cookie，跨域请求时不发送。</li>\n<li><code>include</code>：不管同源请求，还是跨域请求，一律发送 Cookie。</li>\n<li><code>omit</code>：一律不发送。</li>\n</ul>\n<p>跨域请求发送 Cookie，需要将<code>credentials</code>属性设为<code>include</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://another.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  credentials<span class=\"token operator\">:</span> <span class=\"token string\">\"include\"</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>signal</strong></p>\n<p><code>signal</code>属性指定一个 AbortSignal 实例，用于取消<code>fetch()</code>请求，详见下一节。</p>\n<p><strong>keepalive</strong></p>\n<p><code>keepalive</code>属性用于页面卸载时，告诉浏览器在后台保持连接，继续发送数据。</p>\n<p>一个典型的场景就是，用户离开网页时，脚本向服务器提交一些用户行为的统计信息。这时，如果不用<code>keepalive</code>属性，数据可能无法发送，因为浏览器已经把页面卸载了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onunload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/analytics'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token string\">\"statistics\"</span><span class=\"token punctuation\">,</span>\n    keepalive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>redirect</strong></p>\n<p><code>redirect</code>属性指定 HTTP 跳转的处理方法。可能的取值如下：</p>\n<ul>\n<li><code>follow</code>：默认值，<code>fetch()</code>跟随 HTTP 跳转。</li>\n<li><code>error</code>：如果发生跳转，<code>fetch()</code>就报错。</li>\n<li><code>manual</code>：<code>fetch()</code>不跟随 HTTP 跳转，但是<code>response.url</code>属性会指向新的 URL，<code>response.redirected</code>属性会变为<code>true</code>，由开发者自己决定后续如何处理跳转。</li>\n</ul>\n<p><strong>integrity</strong></p>\n<p><code>integrity</code>属性指定一个哈希值，用于检查 HTTP 回应传回的数据是否等于这个预先设定的哈希值。</p>\n<p>比如，下载文件时，检查文件的 SHA-256 哈希值是否相符，确保没有被篡改。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://site.com/file'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  integrity<span class=\"token operator\">:</span> <span class=\"token string\">'sha256-abcdef'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>referrer</strong></p>\n<p><code>referrer</code>属性用于设定<code>fetch()</code>请求的<code>referer</code>标头。</p>\n<p>这个属性可以为任意字符串，也可以设为空字符串（即不发送<code>referer</code>标头）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/page'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  referrer<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>referrerPolicy</strong></p>\n<p><code>referrerPolicy</code>属性用于设定<code>Referer</code>标头的规则。可能的取值如下：</p>\n<ul>\n<li><code>no-referrer-when-downgrade</code>：默认值，总是发送<code>Referer</code>标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。</li>\n<li><code>no-referrer</code>：不发送<code>Referer</code>标头。</li>\n<li><code>origin</code>：<code>Referer</code>标头只包含域名，不包含完整的路径。</li>\n<li><code>origin-when-cross-origin</code>：同源请求<code>Referer</code>标头包含完整的路径，跨域请求只包含域名。</li>\n<li><code>same-origin</code>：跨域请求不发送<code>Referer</code>，同源请求发送。</li>\n<li><code>strict-origin</code>：<code>Referer</code>标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送<code>Referer</code>标头。</li>\n<li><code>strict-origin-when-cross-origin</code>：同源请求时<code>Referer</code>标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。</li>\n<li><code>unsafe-url</code>：不管什么情况，总是发送<code>Referer</code>标头。</li>\n</ul>\n<h2 id=\"取消fetch-请求\"><a href=\"#取消fetch-请求\" class=\"headerlink\" title=\"取消fetch()请求\"></a>取消<code>fetch()</code>请求</h2><p><code>fetch()</code>请求发送以后，如果中途想要取消，需要使用<code>AbortController</code>对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> signal <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  signal<span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsignal<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abort'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abort!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncontroller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取消</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span>aborted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，首先新建 AbortController 实例，然后发送<code>fetch()</code>请求，配置对象的<code>signal</code>属性必须指定接收 AbortController 实例发送的信号<code>controller.signal</code>。</p>\n<p><code>controller.abort()</code>方法用于发出取消信号。这时会触发<code>abort</code>事件，这个事件可以监听，也可以通过<code>controller.signal.aborted</code>属性判断取消信号是否已经发出。</p>\n<p>下面是一个1秒后自动取消请求的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/long-operation'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    signal<span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">'AbortError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Aborted!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考链接-2\"><a href=\"#参考链接-2\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://javascript.info/fetch\">Network requests: Fetch</a></li>\n<li><a href=\"https://github.com/node-fetch/node-fetch\">node-fetch</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2015/03/introduction-to-fetch\">Introduction to fetch()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">Using Fetch</a></li>\n<li><a href=\"https://developerhowto.com/2019/09/14/javascript-fetch-api/\">Javascript Fetch API: The XMLHttpRequest evolution</a></li>\n<li><a href=\"https://www.sitepen.com/blog/2017/10/02/a-guide-to-faster-web-app-io-and-data-operations-with-streams/\">A Guide to Faster Web App I/O and Data Operations with Streams</a></li>\n</ul>\n<h1 id=\"FontFace-API\"><a href=\"#FontFace-API\" class=\"headerlink\" title=\"FontFace API\"></a>FontFace API</h1><p>FontFace API 用来控制字体加载。</p>\n<p>这个 API 提供一个构造函数<code>FontFace()</code>，返回一个字体对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">FontFace</span><span class=\"token punctuation\">(</span>family<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> descriptors<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>FontFace()</code>构造函数接受三个参数。</p>\n<ul>\n<li><code>family</code>：字符串，表示字体名，写法与 CSS 的<code>@font-face</code>的<code>font-family</code>属性相同。</li>\n<li><code>source</code>：字体文件的 URL（必须包括 CSS 的<code>url()</code>方法），或者是一个字体的 ArrayBuffer 对象。</li>\n<li><code>descriptors</code>：对象，用来定制字体文件。该参数可选。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fontFace <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FontFace</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'Roboto'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'url(https://fonts.example.com/roboto.woff2)'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfontFace<span class=\"token punctuation\">.</span>family <span class=\"token comment\">// \"Roboto\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>FontFace()</code>返回的是一个字体对象，这个对象包含字体信息。注意，这时字体文件还没有开始加载。</p>\n<p>字体对象包含以下属性。</p>\n<ul>\n<li><code>FontFace.family</code>：字符串，表示字体的名字，等同于 CSS 的<code>font-family</code>属性。</li>\n<li><code>FontFace.display</code>：字符串，指定字体加载期间如何展示，等同于 CSS 的<code>font-display</code>属性。它有五个可能的值：<code>auto</code>（由浏览器决定）、<code>block</code>（字体加载期间，前3秒会显示不出内容，然后只要还没完成加载，就一直显示后备字体）、<code>fallback</code>（前100毫秒显示不出内容，后3秒显示后备字体，然后只要字体还没完成加载，就一直显示后备字体）、<code>optional</code>（前100毫秒显示不出内容，然后只要字体还没有完成加载，就一直显示后备字体），<code>swap</code>（只要字体没有完成加载，就一直显示后备字体）。</li>\n<li><code>FontFace.style</code>：字符串，等同于 CSS 的<code>font-style</code>属性。</li>\n<li><code>FontFace.weight</code>：字符串，等同于 CSS 的<code>font-weight</code>属性。</li>\n<li><code>FontFace.stretch</code>：字符串，等同于 CSS 的<code>font-strentch</code>属性。</li>\n<li><code>FontFace.unicodeRange</code>：字符串，等同于<code>descriptors</code>对象的同名属性。</li>\n<li><code>FontFace.variant</code>：字符串，等同于<code>descriptors</code>对象的同名属性。</li>\n<li><code>FontFace.featureSettings</code>：字符串，等同于<code>descriptors</code>对象的同名属性。</li>\n<li><code>FontFace.status</code>：字符串，表示字体的加载状态，有四个可能的值：<code>unloaded</code>、<code>loading</code>、<code>loaded</code>、<code>error</code>。该属性只读。</li>\n<li><code>FontFace.loaded</code>：返回一个 Promise 对象，字体加载成功或失败，会导致该 Promise 状态改变。该属性只读。</li>\n</ul>\n<p>字体对象的方法，只有一个<code>FontFace.load()</code>，该方法会真正开始加载字体。它返回一个 Promise 对象，状态由字体加载的结果决定。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FontFace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'url(x)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nf<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 网页可以开始使用该字体</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Geolocation-API\"><a href=\"#Geolocation-API\" class=\"headerlink\" title=\"Geolocation API\"></a>Geolocation API</h1><p>Geolocation API 用于获取用户的地理位置。</p>\n<p>由于该功能涉及用户隐私，所以浏览器会提示用户，是否同意给出地理位置，用户可能会拒绝。另外，这个 API 只能在 HTTPS 环境使用。</p>\n<p>浏览器通过<code>navigator.geolocation</code>属性提供该 API。</p>\n<h2 id=\"Geolocation-对象\"><a href=\"#Geolocation-对象\" class=\"headerlink\" title=\"Geolocation 对象\"></a>Geolocation 对象</h2><p><code>navigator.geolocation</code>属性返回一个 Geolocation 对象。该对象具有以下三个方法。</p>\n<ul>\n<li><code>Geolocation.getCurrentPosition()</code>：返回一个 Position 对象，表示用户的当前位置。</li>\n<li><code>Geolocation.watchPosition()</code>：指定一个监听函数，每当用户的位置发生变化，就执行该监听函数。</li>\n<li><code>Geolocation.clearWatch()</code>：取消<code>watchPosition()</code>方法指定的监听函数。</li>\n</ul>\n<h3 id=\"Geolocation-getCurrentPosition\"><a href=\"#Geolocation-getCurrentPosition\" class=\"headerlink\" title=\"Geolocation.getCurrentPosition()\"></a>Geolocation.getCurrentPosition()</h3><p><code>Geolocation.getCurrentPosition()</code>方法用于获取用户的位置。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">navigator<span class=\"token punctuation\">.</span>geolocation<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentPosition</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>该方法接受三个参数。</p>\n<ul>\n<li><code>success</code>：用户同意给出位置时的回调函数，它的参数是一个 Position 对象。</li>\n<li><code>error</code>：用户拒绝给出位置时的回调函数，它的参数是一个 PositionError 对象。该参数可选。</li>\n<li><code>options</code>：参数对象，该参数可选。</li>\n</ul>\n<p>Position 对象有两个属性。</p>\n<ul>\n<li><code>Position.coords</code>：返回一个 Coordinates 对象，表示当前位置的坐标。</li>\n<li><code>Position.timestamp</code>：返回一个对象，代表当前时间戳。</li>\n</ul>\n<p>PositionError 对象主要有两个属性。</p>\n<ul>\n<li><code>PositionError.code</code>：整数，表示发生错误的原因。<code>1</code>表示无权限，有可能是用户拒绝授权；<code>2</code>表示无法获得位置，可能设备有故障；<code>3</code>表示超时。</li>\n<li><code>PositionError.message</code>：字符串，表示错误的描述。</li>\n</ul>\n<p>参数对象<code>option</code>可以指定三个属性。</p>\n<ul>\n<li><code>enableHighAccuracy</code>：布尔值，是否返回高精度结果。如果设为<code>true</code>，可能导致响应时间变慢或（移动设备的）功耗增加；反之，如果设为<code>false</code>，设备可以更快速地响应。默认值为<code>false</code>。</li>\n<li><code>timeout</code>：正整数，表示等待查询的最长时间，单位为毫秒。默认值为<code>Infinity</code>。</li>\n<li><code>maximumAge</code>：正整数，表示可接受的缓存最长时间，单位为毫秒。如果设为<code>0</code>，表示不返回缓存值，必须查询当前的实际位置；如果设为<code>Infinity</code>，必须返回缓存值，不管缓存了多少时间。默认值为<code>0</code>。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  enableHighAccuracy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n  maximumAge<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pos</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> crd <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>coords<span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">经度：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>crd<span class=\"token punctuation\">.</span>latitude<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">纬度：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>crd<span class=\"token punctuation\">.</span>longitude<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">误差：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>crd<span class=\"token punctuation\">.</span>accuracy<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 米</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ERROR(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>err<span class=\"token punctuation\">.</span>code<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>err<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nnavigator<span class=\"token punctuation\">.</span>geolocation<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentPosition</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Geolocation-watchPosition\"><a href=\"#Geolocation-watchPosition\" class=\"headerlink\" title=\"Geolocation.watchPosition()\"></a>Geolocation.watchPosition()</h3><p><code>Geolocation.watchPosition()</code>对象指定一个监听函数，每当用户的位置发生变化，就是自动执行这个函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">navigator<span class=\"token punctuation\">.</span>geolocation<span class=\"token punctuation\">.</span><span class=\"token function\">watchPosition</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>该方法接受三个参数。</p>\n<ul>\n<li><code>success</code>：监听成功的回调函数，该函数的参数为一个 Position 对象。</li>\n<li><code>error</code>：该参数可选，表示监听失败的回调函数，该函数的参数是一个 PositionError 对象。</li>\n<li><code>options</code>：该参数可选，表示监听的参数配置对象。</li>\n</ul>\n<p>该方法返回一个整数值，表示监听函数的编号。该整数用来供<code>Geolocation.clearWatch()</code>方法取消监听。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> id<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  latitude <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  longitude<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  enableHighAccuracy<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n  maximumAge<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pos</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> crd <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>coords<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>latitude <span class=\"token operator\">===</span> crd<span class=\"token punctuation\">.</span>latitude <span class=\"token operator\">&amp;&amp;</span> target<span class=\"token punctuation\">.</span>longitude <span class=\"token operator\">===</span> crd<span class=\"token punctuation\">.</span>longitude<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'恭喜，你已经到达了指定位置。'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    navigator<span class=\"token punctuation\">.</span>geolocation<span class=\"token punctuation\">.</span><span class=\"token function\">clearWatch</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ERROR('</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>code <span class=\"token operator\">+</span> <span class=\"token string\">'): '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nid <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>geolocation<span class=\"token punctuation\">.</span><span class=\"token function\">watchPosition</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Geolocation-clearWatch\"><a href=\"#Geolocation-clearWatch\" class=\"headerlink\" title=\"Geolocation.clearWatch()\"></a>Geolocation.clearWatch()</h3><p><code>Geolocation.clearWatch()</code>方法用来取消<code>watchPosition()</code>方法指定的监听函数。它的参数是<code>watchPosition()</code>返回的监听函数的编号。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">navigator<span class=\"token punctuation\">.</span>geolocation<span class=\"token punctuation\">.</span><span class=\"token function\">clearWatch</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用方法的例子见上一节。</p>\n<h2 id=\"Coordinates-对象\"><a href=\"#Coordinates-对象\" class=\"headerlink\" title=\"Coordinates 对象\"></a>Coordinates 对象</h2><p>Coordinates 对象是地理位置的坐标接口，<code>Position.coords</code>属性返回的就是这个对象。</p>\n<p>它有以下属性，全部为只读属性。</p>\n<ul>\n<li><code>Coordinates.latitude</code>：浮点数，表示纬度。</li>\n<li><code>Coordinates.longitude</code>：浮点数，表示经度。</li>\n<li><code>Coordinates.altitude</code>：浮点数，表示海拔（单位：米）。如果不可得，返回<code>null</code>。</li>\n<li><code>Coordinates.accuracy</code>：浮点数，表示经度和纬度的精度（单位：米）。</li>\n<li><code>Coordinates.altitudeAccuracy</code>：浮点数，表示海拔的精度（单位：米）。返回<code>null</code>。</li>\n<li><code>Coordinates.speed</code>：浮点数，表示设备的速度（单位：米/秒）。如果不可得，返回<code>null</code>。</li>\n<li><code>Coordinates.heading</code>：浮点数，表示设备前进的方向（单位：度）。方向按照顺时针，北方是0度，东方是90度，西方是270度。如果<code>Coordinates.speed</code>为0，<code>heading</code>属性返回<code>NaN</code>。如果设备无法提供方向信息，该属性返回<code>null</code>。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">navigator<span class=\"token punctuation\">.</span>geolocation<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentPosition</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">position</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> lat <span class=\"token operator\">=</span> position<span class=\"token punctuation\">.</span>coords<span class=\"token punctuation\">.</span>latitude<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> long <span class=\"token operator\">=</span> position<span class=\"token punctuation\">.</span>coords<span class=\"token punctuation\">.</span>longitude<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">纬度：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>lat<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">经度：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>long<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考链接-3\"><a href=\"#参考链接-3\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API\">Geolocation API</a>, by MDN</li>\n</ul>\n<h1 id=\"IntersectionObserver\"><a href=\"#IntersectionObserver\" class=\"headerlink\" title=\"IntersectionObserver\"></a>IntersectionObserver</h1><p>网页开发时，常常需要了解某个元素是否进入了“视口”（viewport），即用户能不能看到它。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2016/bg2016110201.gif\"></p>\n<p>上图的绿色方块不断滚动，顶部会提示它的可见性。</p>\n<p>传统的实现方法是，监听到<code>scroll</code>事件后，调用目标元素（绿色方块）的<a href=\"https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect\"><code>getBoundingClientRect()</code></a>方法，得到它对应于视口左上角的坐标，再判断是否在视口之内。这种方法的缺点是，由于<code>scroll</code>事件密集发生，计算量很大，容易造成<a href=\"http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\">性能问题</a>。</p>\n<p><a href=\"https://wicg.github.io/IntersectionObserver/\">IntersectionObserver API</a>，可以自动“观察”元素是否可见，Chrome 51+ 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做“交叉观察器”（intersection oberserver）。</p>\n<h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>IntersectionObserver API 的用法，简单来说就是两行。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>IntersectionObserver</code>是浏览器原生提供的构造函数，接受两个参数：<code>callback</code>是可见性变化时的回调函数，<code>option</code>是配置对象（该参数可选）。</p>\n<p><code>IntersectionObserver()</code>的返回值是一个观察器实例。实例的<code>observe()</code>方法可以指定观察哪个 DOM 节点。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 开始观察</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 停止观察</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 关闭观察器</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>observe()</code>的参数是一个 DOM 节点对象。如果要观察多个节点，就要多次调用这个方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>elementA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>elementB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意，IntersectionObserver API 是异步的，不随着目标元素的滚动同步触发。规格写明，<code>IntersectionObserver</code>的实现，应该采用<code>requestIdleCallback()</code>，即只有线程空闲下来，才会执行观察器。这意味着，这个观察器的优先级非常低，只在其他任务执行完，浏览器有了空闲才会执行。</p>\n<h2 id=\"IntersectionObserver-observe\"><a href=\"#IntersectionObserver-observe\" class=\"headerlink\" title=\"IntersectionObserver.observe()\"></a>IntersectionObserver.observe()</h2><p>IntersectionObserver 实例的<code>observe()</code>方法用来启动对一个 DOM 元素的观察。该方法接受两个参数：回调函数<code>callback</code>和配置对象<code>options</code>。</p>\n<h3 id=\"callback-参数\"><a href=\"#callback-参数\" class=\"headerlink\" title=\"callback 参数\"></a>callback 参数</h3><p>目标元素的可见性变化时，就会调用观察器的回调函数<code>callback</code>。</p>\n<p><code>callback</code>会触发两次。一次是目标元素刚刚进入视口（开始可见），另一次是完全离开视口（开始不可见）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">entries<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，回调函数采用的是<a href=\"http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\">箭头函数</a>的写法。<code>callback</code>函数的参数（<code>entries</code>）是一个数组，每个成员都是一个<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry\"><code>IntersectionObserverEntry</code></a>对象（详见下文）。举例来说，如果同时有两个被观察的对象的可见性发生变化，<code>entries</code>数组就会有两个成员。</p>\n<h3 id=\"IntersectionObserverEntry-对象\"><a href=\"#IntersectionObserverEntry-对象\" class=\"headerlink\" title=\"IntersectionObserverEntry 对象\"></a>IntersectionObserverEntry 对象</h3><p><code>IntersectionObserverEntry</code>对象提供目标元素的信息，一共有六个属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  time<span class=\"token operator\">:</span> <span class=\"token number\">3893.92</span><span class=\"token punctuation\">,</span>\n  rootBounds<span class=\"token operator\">:</span> ClientRect <span class=\"token punctuation\">&#123;</span>\n    bottom<span class=\"token operator\">:</span> <span class=\"token number\">920</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n    left<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    right<span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n    top<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">920</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  boundingClientRect<span class=\"token operator\">:</span> ClientRect <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  intersectionRect<span class=\"token operator\">:</span> ClientRect <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  intersectionRatio<span class=\"token operator\">:</span> <span class=\"token number\">0.54</span><span class=\"token punctuation\">,</span>\n  target<span class=\"token operator\">:</span> element\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>每个属性的含义如下。</p>\n<blockquote>\n<ul>\n<li><code>time</code>：可见性发生变化的时间，是一个高精度时间戳，单位为毫秒</li>\n<li><code>target</code>：被观察的目标元素，是一个 DOM 节点对象</li>\n<li><code>rootBounds</code>：容器元素的矩形区域的信息，<code>getBoundingClientRect()</code>方法的返回值，如果没有容器元素（即直接相对于视口滚动），则返回<code>null</code></li>\n<li><code>boundingClientRect</code>：目标元素的矩形区域的信息</li>\n<li><code>intersectionRect</code>：目标元素与视口（或容器元素）的交叉区域的信息</li>\n<li><code>intersectionRatio</code>：目标元素的可见比例，即<code>intersectionRect</code>占<code>boundingClientRect</code>的比例，完全可见时为<code>1</code>，完全不可见时小于等于<code>0</code></li>\n</ul>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2016/bg2016110202.png\"></p>\n<p>上图中，灰色的水平方框代表视口，深红色的区域代表四个被观察的目标元素。它们各自的<code>intersectionRatio</code>图中都已经注明。</p>\n<p>我写了一个 <a href=\"http://jsbin.com/canuze/edit?js,console,output\">Demo</a>，演示<code>IntersectionObserverEntry</code>对象。注意，这个 Demo 只能在 Chrome 51+ 运行。</p>\n<h3 id=\"Option-对象\"><a href=\"#Option-对象\" class=\"headerlink\" title=\"Option 对象\"></a>Option 对象</h3><p><code>IntersectionObserver</code>构造函数的第二个参数是一个配置对象。它可以设置以下属性。</p>\n<p><strong>（1）threshold 属性</strong></p>\n<p><code>threshold</code>属性决定了什么时候触发回调函数，即元素进入视口（或者容器元素）多少比例时，执行回调函数。它是一个数组，每个成员都是一个门槛值，默认为<code>[0]</code>，即交叉比例（<code>intersectionRatio</code>）达到<code>0</code>时触发回调函数。</p>\n<p>如果<code>threshold</code>属性是0.5，当元素进入视口50%时，触发回调函数。如果值为<code>[0.3, 0.6]</code>，则当元素进入30％和60％是触发回调函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* … */</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    threshold<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>用户可以自定义这个数组。比如，上例的<code>[0, 0.25, 0.5, 0.75, 1]</code>就表示当目标元素 0%、25%、50%、75%、100% 可见时，会触发回调函数。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2016/bg2016110202.gif\"></p>\n<p><strong>（2）root 属性，rootMargin 属性</strong></p>\n<p><code>IntersectionObserver</code>不仅可以观察元素相对于视口的可见性，还可以观察元素相对于其所在容器的可见性。容器内滚动也会影响目标元素的可见性，参见本文开始时的那张示意图。</p>\n<p>IntersectionObserver API 支持容器内滚动。<code>root</code>属性指定目标元素所在的容器节点。注意，容器元素必须是目标元素的祖先节点。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  root<span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  rootMargin<span class=\"token operator\">:</span> <span class=\"token string\">'0px 0px -200px 0px'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>\n  callback<span class=\"token punctuation\">,</span>\n  opts\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，除了<code>root</code>属性，还有<a href=\"https://wicg.github.io/IntersectionObserver/#dom-intersectionobserverinit-rootmargin\"><code>rootMargin</code></a>属性。该属性用来扩展或缩小<code>rootBounds</code>这个矩形的大小，从而影响<code>intersectionRect</code>交叉区域的大小。它的写法类似于 CSS 的<code>margin</code>属性，比如<code>0px 0px 0px 0px</code>，依次表示 top、right、bottom 和 left 四个方向的值。</p>\n<p>上例的<code>0px 0px -200px 0px</code>，表示容器的下边缘向上收缩200像素，导致页面向下滚动时，目标元素的顶部进入可视区域200像素以后，才会触发回调函数。</p>\n<p>这样设置以后，不管是窗口滚动或者容器内滚动，只要目标元素可见性变化，都会触发观察器。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"惰性加载（lazy-load）\"><a href=\"#惰性加载（lazy-load）\" class=\"headerlink\" title=\"惰性加载（lazy load）\"></a>惰性加载（lazy load）</h3><p>有时，我们希望某些静态资源（比如图片），只有用户向下滚动，它们进入视口时才加载，这样可以节省带宽，提高网页性能。这就叫做“惰性加载”。</p>\n<p>有了 IntersectionObserver API，实现起来就很容易了。图像的 HTML 代码可以写成下面这样。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>placeholder.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img-1.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>placeholder.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img-2.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>placeholder.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img-3.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，图像默认显示一个占位符，<code>data-src</code>属性是惰性加载的真正图像。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">;</span>\n      observer<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.lazy-loaded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，只有图像开始可见时，才会加载真正的图像文件。</p>\n<h3 id=\"无限滚动\"><a href=\"#无限滚动\" class=\"headerlink\" title=\"无限滚动\"></a>无限滚动</h3><p>无限滚动（infinite scroll）指的是，随着网页滚动到底部，不断加载新的内容到页面，它的实现也很简单。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> intersectionObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 如果不可见，就返回</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">loadItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Loaded new items'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 开始观察</span>\nintersectionObserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.scrollerFooter'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>无限滚动时，最好像上例那样，页面底部有一个页尾栏（又称<a href=\"sentinels\">sentinels</a>，上例是<code>.scrollerFooter</code>）。一旦页尾栏可见，就表示用户到达了页面底部，从而加载新的条目放在页尾栏前面。否则就需要每一次页面加入新内容时，都调用<code>observe()</code>方法，对新增内容的底部建立观察。</p>\n<h3 id=\"视频自动播放\"><a href=\"#视频自动播放\" class=\"headerlink\" title=\"视频自动播放\"></a>视频自动播放</h3><p>下面是一个视频元素，希望它完全进入视口的时候自动播放，离开视口的时候自动暂停。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面是 JS 代码。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> isPaused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">!=</span> <span class=\"token number\">1</span>  <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>video<span class=\"token punctuation\">.</span>paused<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      video<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      isPaused <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPaused<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      isPaused<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>threshold<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>IntersectionObserver()</code>的第二个参数是配置对象，它的<code>threshold</code>属性等于<code>1</code>，即目标元素完全可见时触发回调函数。</p>\n<h2 id=\"参考链接-4\"><a href=\"#参考链接-4\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://developers.google.com/web/updates/2016/04/intersectionobserver\">IntersectionObserver’s Coming into View</a></li>\n<li><a href=\"https://github.com/WICG/IntersectionObserver/blob/gh-pages/explainer.md\">Intersection Observers Explained</a></li>\n<li><a href=\"https://css-tricks.com/a-few-functional-uses-for-intersection-observer-to-know-when-an-element-is-in-view/\">A Few Functional Uses for Intersection Observer to Know When an Element is in View</a>, Preethi</li>\n</ul>\n<h1 id=\"Intl-RelativeTimeFormat\"><a href=\"#Intl-RelativeTimeFormat\" class=\"headerlink\" title=\"Intl.RelativeTimeFormat\"></a>Intl.RelativeTimeFormat</h1><p>很多日期库支持显示相对时间，比如“昨天”、“五分钟前”、“两个月之前”等等。由于不同的语言，日期显示的格式和相关词语都不同，造成这些库的体积非常大。</p>\n<p>现在，浏览器提供内置的 Intl.RelativeTimeFormat API，可以不使用这些库，直接显示相对时间。</p>\n<h2 id=\"基本用法-1\"><a href=\"#基本用法-1\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p><code>Intl.RelativeTimeFormat()</code>是一个构造函数，接受一个语言代码作为参数，返回一个相对时间的实例对象。如果省略参数，则默认传入当前运行时的语言代码。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rtf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>RelativeTimeFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"in 3.14 seconds\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'minute'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"15 minutes ago\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hour'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"in 8 hours\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"2 days ago\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'week'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"in 3 weeks\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'month'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"5 months ago\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quarter'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"in 2 quarters\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'year'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"42 years ago\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码指定使用英语显示相对时间。</p>\n<p>下面是使用西班牙语显示相对时间的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rtf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>RelativeTimeFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'es'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"dentro de 3,14 segundos\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'minute'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hace 15 minutos\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hour'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"dentro de 8 horas\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hace 2 días\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'week'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"dentro de 3 semanas\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'month'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hace 5 meses\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quarter'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"dentro de 2 trimestres\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'year'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hace 42 años\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Intl.RelativeTimeFormat()</code>还可以接受一个配置对象，作为第二个参数，用来精确指定相对时间实例的行为。配置对象共有下面这些属性。</p>\n<ul>\n<li>options.style：表示返回字符串的风格，可能的值有<code>long</code>（默认值，比如“in 1 month”）、<code>short</code>（比如“in 1 mo.”）、<code>narrow</code>（比如“in 1 mo.”）。对于一部分语言来说，<code>narrow</code>风格和<code>short</code>风格是类似的。</li>\n<li>options.localeMatcher：表示匹配语言参数的算法，可能的值有<code>best fit</code>（默认值）和<code>lookup</code>。</li>\n<li>options.numeric：表示返回字符串是数字显示，还是文字显示，可能的值有<code>always</code>（默认值，总是文字显示）和<code>auto</code>（自动转换）。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 下面的配置对象，传入的都是默认值</span>\n<span class=\"token keyword\">const</span> rtf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>RelativeTimeFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  localeMatcher<span class=\"token operator\">:</span> <span class=\"token string\">'best fit'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 其他值：'lookup'</span>\n  style<span class=\"token operator\">:</span> <span class=\"token string\">'long'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 其他值：'short' or 'narrow'</span>\n  numeric<span class=\"token operator\">:</span> <span class=\"token string\">'always'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 其他值：'auto'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Now, let’s try some special cases!</span>\n\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1 day ago\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"in 0 days\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"in 1 day\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'week'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1 week ago\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'week'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"in 0 weeks\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'week'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"in 1 week\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，显示的是“1 day ago”，而不是“yesterday”；显示的是“in 0 weeks”，而不是“this week”。这是因为默认情况下，相对时间显示的是数值形式，而不是文字形式。</p>\n<p>改变这个行为，可以把配置对象的<code>numeric</code>属性改成<code>auto</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rtf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>RelativeTimeFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> numeric<span class=\"token operator\">:</span> <span class=\"token string\">'auto'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"yesterday\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"today\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"tomorrow\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'week'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"last week\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'week'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"this week\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'week'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"next week\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Intl-RelativeTimeFormat-prototype-format\"><a href=\"#Intl-RelativeTimeFormat-prototype-format\" class=\"headerlink\" title=\"Intl.RelativeTimeFormat.prototype.format()\"></a>Intl.RelativeTimeFormat.prototype.format()</h2><p>相对时间实例对象的<code>format</code>方法，接受两个参数，依次为时间间隔的数值和单位。其中，“单位”是一个字符串，可以接受以下八个值。</p>\n<ul>\n<li>year</li>\n<li>quarter</li>\n<li>month</li>\n<li>week</li>\n<li>day</li>\n<li>hour</li>\n<li>minute</li>\n<li>second</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> rtf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>RelativeTimeFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"day\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"yesterday\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.15</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"day\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"in 2.15 days</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Intl-RelativeTimeFormat-prototype-formatToParts\"><a href=\"#Intl-RelativeTimeFormat-prototype-formatToParts\" class=\"headerlink\" title=\"Intl.RelativeTimeFormat.prototype.formatToParts()\"></a>Intl.RelativeTimeFormat.prototype.formatToParts()</h2><p>相对时间实例对象的<code>formatToParts()</code>方法的参数跟<code>format()</code>方法一样，但是返回的是一个数组，用来精确控制相对时间的每个部分。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rtf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>RelativeTimeFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> numeric<span class=\"token operator\">:</span> <span class=\"token string\">'auto'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// \"yesterday\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">formatToParts</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [&#123; type: \"literal\", value: \"yesterday\" &#125;]</span>\n\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'week'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"in 3 weeks\"</span>\nrtf<span class=\"token punctuation\">.</span><span class=\"token function\">formatToParts</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'week'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [</span>\n<span class=\"token comment\">//   &#123; type: 'literal', value: 'in ' &#125;,</span>\n<span class=\"token comment\">//   &#123; type: 'integer', value: '3', unit: 'week' &#125;,</span>\n<span class=\"token comment\">//   &#123; type: 'literal', value: ' weeks' &#125;</span>\n<span class=\"token comment\">// ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回数组的每个成员都是一个对象，拥有两个属性。</p>\n<ul>\n<li>type：字符串，表示输出值的类型。</li>\n<li>value：字符串，表示输出的内容。</li>\n<li>unit：如果输出内容表示一个数值（即<code>type</code>属性不是<code>literal</code>），那么还会有<code>unit</code>属性，表示数值的单位。</li>\n</ul>\n<h2 id=\"参考链接-5\"><a href=\"#参考链接-5\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://developers.google.com/web/updates/2018/10/intl-relativetimeformat\">The Intl.RelativeTimeFormat API</a>, Mathias Bynens</li>\n<li><a href=\"https://github.com/tc39/proposal-intl-relative-time#api\">Intl.RelativeTimeFormat API Specification</a>, TC39</li>\n</ul>\n<h1 id=\"Offline-应用\"><a href=\"#Offline-应用\" class=\"headerlink\" title=\"Offline 应用\"></a>Offline 应用</h1><p>Web 应用不仅可以在浏览器缓存资源文件（HTML、CSS、JS 脚本、图片等），还可以把应用本身储存到浏览器。</p>\n<p>缓存的资源文件必须在线使用，只有先从服务器加载网页，然后才能使用本地缓存；但是，应用一旦储存，就可以离线使用。另外，用户常规性地清除浏览器缓存，并不会清除储存的应用，除非用户显式地卸载或删除它们。</p>\n<p>为了开启离线储存，必须创建一个 manifest 文件。该文件列出了所有需要储存的文件。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">CACHE MANIFEST\nmyapp.html\nmyapp.js\nmyapp.css\nimages/background.png<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Manifest 文件的第一行必须是<code>CACHE MANIFEST</code>。然后，每一行列出一个需要储存的文件，它们的位置都是相对于 Manifest 文件的位置。空行会被忽略，以<code>#</code>开头的行是注释，也会被忽略。</p>\n<p>这个文件的后缀名一般是<code>.appcache</code>。它的 MIME 类型必须是<code>text/cache-manifest</code>，如果服务器将其设为其他类型，就不会被浏览器缓存。</p>\n<p>编写完这个文件以后，要将<code>&lt;html&gt;</code>元素的<code>manifest</code>属性指向它。浏览器加载这个网页的时候，就会读取这个 Manifest 文件，离线储存这个网页和相关的资源。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">HTML</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">manifest</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myapp.appcache<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果一个 Web 应用有多个网页需要离线储存，那么每个网页都应该将<code>manifest</code>属性指向这个文件。一旦被储存，以后加载该网页的时候，就会从缓存里面加载。这时，只有 Manifest 文件里面列出的文件会被加载，其他文件不会。如果这时浏览器在线，浏览器就会去检查 Manifest 文件是否有新版本，如果有新版本，就会重新储存和更新该文件列出的资源。最方便的办法是在 Manifest 文件里面用注释列出版本号。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">CACHE MANIFEST\n# MyApp version 1\nMyApp.html\nMyApp.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果需要删除离线储存，只要删除 Manifest 文件，让其返回 404 状态码即可。</p>\n<p>离线储存更新完成，会触发浏览器的<code>updateready</code>事件，可以对这个事件指定监听函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>applicationCache<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onupdateready</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> reload <span class=\"token operator\">=</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'新版本下载完成。是否需要重新加载？'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reload<span class=\"token punctuation\">)</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>脚本可以注册<code>online</code>和<code>offline</code>事件的监听函数，通过<code>navigator.onLine</code>属性，判断浏览器是否在线从而进行数据同步。</p>\n<p>每次浏览器加载一个具有<code>manifest</code>属性的网页，浏览器就会触发一个<code>checking</code>事件，然后去加载 Manifest 文件。</p>\n<ul>\n<li>如果应用已经储存，并且 Manifest 文件没有变化，那么触发<code>noupdate</code>事件。</li>\n<li>如果应用已经储存，并且 Manifest 文件有变化，那么触发<code>downloading</code>事件，浏览器重新下载所有离线资源。下载过程中，触发<code>progress</code>事件，下载结束触发<code>updateready</code>事件。</li>\n<li>如果应用没有储存，下载结束将触发<code>cached</code>事件。</li>\n<li>如果离线，无法检查 Manifest 文件，浏览器会触发一个<code>error</code>事件。</li>\n<li>如果浏览器在线，而且应用已经储存，但是 Manifest 文件返回 404，浏览器触发<code>obsolete</code>事件，将储存的应用移除。</li>\n</ul>\n<p>所有这些事件都是可以取消的。监听函数可以返回<code>false</code>，取消这些事件的默认动作。</p>\n<p><code>applicationCache. status</code>属性返回离线储存的状态。</p>\n<ul>\n<li>ApplicationCache.UNCACHED (0)<br>This application does not have a manifest attribute: it is not cached.</li>\n<li>ApplicationCache.IDLE (1)<br>The manifest has been checked and this application is cached and up to date.</li>\n<li>ApplicationCache.CHECKING (2)<br>The browser is checking the manifest file.</li>\n<li>ApplicationCache.DOWNLOADING (3)<br>The browser is downloading and caching files listed in the manifest.</li>\n<li>ApplicationCache.UPDATEREADY (4)<br>A new version of the application has been downloaded and cached.</li>\n<li>ApplicationCache.OBSOLETE (5)<br>The manifest no longer exists and the cache will be deleted.</li>\n</ul>\n<h1 id=\"Page-Lifecycle-API\"><a href=\"#Page-Lifecycle-API\" class=\"headerlink\" title=\"Page Lifecycle API\"></a>Page Lifecycle API</h1><p>Android、iOS 和最新的 Windows 系统可以随时自主地停止后台进程，及时释放系统资源。也就是说，网页可能随时被系统丢弃掉。以前的浏览器 API 完全没有考虑到这种情况，导致开发者根本没有办法监听到系统丢弃页面。</p>\n<p>为了解决这个问题，W3C 新制定了一个 Page Lifecycle API，统一了网页从诞生到卸载的行为模式，并且定义了新的事件，允许开发者响应网页状态的各种转换。</p>\n<p>有了这个 API，开发者就可以预测网页下一步的状态，从而进行各种针对性的处理。Chrome 68 支持这个 API，对于老式浏览器可以使用谷歌开发的兼容库 <a href=\"https://github.com/GoogleChromeLabs/page-lifecycle\">PageLifecycle.js</a>。</p>\n<h2 id=\"生命周期阶段\"><a href=\"#生命周期阶段\" class=\"headerlink\" title=\"生命周期阶段\"></a>生命周期阶段</h2><p>网页的生命周期分成六个阶段，每个时刻只可能处于其中一个阶段。</p>\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201811/bg2018110401.png\"></p>\n<p><strong>（1）Active 阶段</strong></p>\n<p>在 Active 阶段，网页处于可见状态，且拥有输入焦点。</p>\n<p><strong>（2）Passive 阶段</strong></p>\n<p>在 Passive 阶段，网页可见，但没有输入焦点，无法接受输入。UI 更新（比如动画）仍然在执行。该阶段只可能发生在桌面同时有多个窗口的情况。</p>\n<p><strong>（3）Hidden 阶段</strong></p>\n<p>在 Hidden 阶段，用户的桌面被其他窗口占据，网页不可见，但尚未冻结。UI 更新不再执行。</p>\n<p><strong>（4）Terminated 阶段</strong></p>\n<p>在 Terminated 阶段，由于用户主动关闭窗口，或者在同一个窗口前往其他页面，导致当前页面开始被浏览器卸载并从内存中清除。注意，这个阶段总是在 Hidden 阶段之后发生，也就是说，用户主动离开当前页面，总是先进入 Hidden 阶段，再进入 Terminated 阶段。</p>\n<p>这个阶段会导致网页卸载，任何新任务都不会在这个阶段启动，并且如果运行时间太长，正在进行的任务可能会被终止。</p>\n<p><strong>（5）Frozen 阶段</strong></p>\n<p>如果网页处于 Hidden 阶段的时间过久，用户又不关闭网页，浏览器就有可能冻结网页，使其进入 Frozen 阶段。不过，也有可能，处于可见状态的页面长时间没有操作，也会进入 Frozen 阶段。</p>\n<p>这个阶段的特征是，网页不会再被分配 CPU 计算资源。定时器、回调函数、网络请求、DOM 操作都不会执行，不过正在运行的任务会执行完。浏览器可能会允许 Frozen 阶段的页面，周期性复苏一小段时间，短暂变回 Hidden 状态，允许一小部分任务执行。</p>\n<p><strong>（6）Discarded 阶段</strong></p>\n<p>如果网页长时间处于 Frozen 阶段，用户又不唤醒页面，那么就会进入 Discarded 阶段，即浏览器自动卸载网页，清除该网页的内存占用。不过，Passive 阶段的网页如果长时间没有互动，也可能直接进入 Discarded 阶段。</p>\n<p>这一般是在用户没有介入的情况下，由系统强制执行。任何类型的新任务或 JavaScript 代码，都不能在此阶段执行，因为这时通常处在资源限制的状况下。</p>\n<p>网页被浏览器自动 Discarded 以后，它的 Tab 窗口还是在的。如果用户重新访问这个 Tab 页，浏览器将会重新向服务器发出请求，再一次重新加载网页，回到 Active 阶段。</p>\n<h2 id=\"常见场景\"><a href=\"#常见场景\" class=\"headerlink\" title=\"常见场景\"></a>常见场景</h2><p>以下是几个常见场景的网页生命周期变化。</p>\n<p>（1）用户打开网页后，又切换到其他 App，但只过了一会又回到网页。</p>\n<p>网页由 Active 变成 Hidden，又变回 Active。</p>\n<p>（2）用户打开网页后，又切换到其他 App，并且长时候使用后者，导致系统自动丢弃网页。</p>\n<p>网页由 Active 变成 Hidden，再变成 Frozen，最后 Discarded。</p>\n<p>（3）用户打开网页后，又切换到其他 App，然后从任务管理器里面将浏览器进程清除。</p>\n<p>网页由 Active 变成 Hidden，然后 Terminated。</p>\n<p>（4）系统丢弃了某个 Tab 里面的页面后，用户重新打开这个 Tab。</p>\n<p>网页由 Discarded 变成 Active。</p>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>生命周期的各个阶段都有自己的事件，以供开发者指定监听函数。这些事件里面，只有两个是新定义的（<code>freeze</code>事件和<code>resume</code>事件），其它都是现有的。</p>\n<p>注意，网页的生命周期事件是在所有帧（frame）触发，不管是底层的帧，还是内嵌的帧。也就是说，内嵌的<code>&lt;iframe&gt;</code>网页跟顶层网页一样，都会同时监听到下面的事件。</p>\n<h3 id=\"focus-事件\"><a href=\"#focus-事件\" class=\"headerlink\" title=\"focus 事件\"></a>focus 事件</h3><p><code>focus</code>事件在页面获得输入焦点时触发，比如网页从 Passive 阶段变为 Active 阶段。</p>\n<h3 id=\"blur-事件\"><a href=\"#blur-事件\" class=\"headerlink\" title=\"blur 事件\"></a>blur 事件</h3><p><code>blur</code>事件在页面失去输入焦点时触发，比如网页从 Active 阶段变为 Passive 阶段。</p>\n<h3 id=\"visibilitychange-事件\"><a href=\"#visibilitychange-事件\" class=\"headerlink\" title=\"visibilitychange 事件\"></a>visibilitychange 事件</h3><p><code>visibilitychange</code>事件在网页可见状态发生变化时触发，一般发生在以下几种场景。</p>\n<blockquote>\n<ul>\n<li>用户隐藏页面（切换 Tab、最小化浏览器），页面由 Active 阶段变成 Hidden 阶段。</li>\n<li>用户重新访问隐藏的页面，页面由 Hidden 阶段变成 Active 阶段。</li>\n<li>用户关闭页面，页面会先进入 Hidden 阶段，然后进入 Terminated 阶段。</li>\n</ul>\n</blockquote>\n<p>可以通过<code>document.onvisibilitychange</code>属性指定这个事件的回调函数。</p>\n<h3 id=\"freeze-事件\"><a href=\"#freeze-事件\" class=\"headerlink\" title=\"freeze 事件\"></a>freeze 事件</h3><p><code>freeze</code>事件在网页进入 Frozen 阶段时触发。</p>\n<p>可以通过<code>document.onfreeze</code>属性指定在进入 Frozen 阶段时调用的回调函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleFreeze</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// Handle transition to FROZEN</span>\n<span class=\"token punctuation\">&#125;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'freeze'</span><span class=\"token punctuation\">,</span> handleFreeze<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n# 或者\ndocument<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onfreeze</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个事件的监听函数，最长只能运行500毫秒。并且只能复用已经打开的网络连接，不能发起新的网络请求。</p>\n<p>注意，从 Frozen 阶段进入 Discarded 阶段，不会触发任何事件，无法指定回调函数，只能在进入 Frozen 阶段时指定回调函数。</p>\n<h3 id=\"resume-事件\"><a href=\"#resume-事件\" class=\"headerlink\" title=\"resume 事件\"></a>resume 事件</h3><p><code>resume</code>事件在网页离开 Frozen 阶段，变为 Active / Passive / Hidden 阶段时触发。</p>\n<p><code>document.onresume</code>属性指的是页面离开 Frozen 阶段、进入可用状态时调用的回调函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleResume</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// handle state transition FROZEN -> ACTIVE</span>\n<span class=\"token punctuation\">&#125;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resume\"</span><span class=\"token punctuation\">,</span> handleResume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n# 或者\ndocument<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onresume</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"pageshow-事件\"><a href=\"#pageshow-事件\" class=\"headerlink\" title=\"pageshow 事件\"></a>pageshow 事件</h3><p><code>pageshow</code>事件在用户加载网页时触发。这时，有可能是全新的页面加载，也可能是从缓存中获取的页面。如果是从缓存中获取，则该事件对象的<code>event.persisted</code>属性为<code>true</code>，否则为<code>false</code>。</p>\n<p>这个事件的名字有点误导，它跟页面的可见性其实毫无关系，只跟浏览器的 History 记录的变化有关。</p>\n<h3 id=\"pagehide-事件\"><a href=\"#pagehide-事件\" class=\"headerlink\" title=\"pagehide 事件\"></a>pagehide 事件</h3><p><code>pagehide</code>事件在用户离开当前网页、进入另一个网页时触发。它的前提是浏览器的 History 记录必须发生变化，跟网页是否可见无关。</p>\n<p>如果浏览器能够将当前页面添加到缓存以供稍后重用，则事件对象的<code>event.persisted</code>属性为<code>true</code>。 如果为<code>true</code>。如果页面添加到了缓存，则页面进入 Frozen 状态，否则进入 Terminatied 状态。</p>\n<h3 id=\"beforeunload-事件\"><a href=\"#beforeunload-事件\" class=\"headerlink\" title=\"beforeunload 事件\"></a>beforeunload 事件</h3><p><code>beforeunload</code>事件在窗口或文档即将卸载时触发。该事件发生时，文档仍然可见，此时卸载仍可取消。经过这个事件，网页进入 Terminated 状态。</p>\n<h3 id=\"unload-事件\"><a href=\"#unload-事件\" class=\"headerlink\" title=\"unload 事件\"></a>unload 事件</h3><p><code>unload</code>事件在页面正在卸载时触发。经过这个事件，网页进入 Terminated 状态。</p>\n<h2 id=\"获取当前阶段\"><a href=\"#获取当前阶段\" class=\"headerlink\" title=\"获取当前阶段\"></a>获取当前阶段</h2><p>如果网页处于 Active、Passive 或 Hidden 阶段，可以通过下面的代码，获得网页当前的状态。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>visibilityState <span class=\"token operator\">===</span> <span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'hidden'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">hasFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'passive'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果网页处于 Frozen 和 Terminated 状态，由于定时器代码不会执行，只能通过事件监听判断状态。进入 Frozen 阶段，可以监听<code>freeze</code>事件；进入 Terminated 阶段，可以监听<code>pagehide</code>事件。</p>\n<h2 id=\"document-wasDiscarded\"><a href=\"#document-wasDiscarded\" class=\"headerlink\" title=\"document.wasDiscarded\"></a>document.wasDiscarded</h2><p>如果某个选项卡处于 Frozen 阶段，就随时有可能被系统丢弃，进入 Discarded 阶段。如果后来用户再次点击该选项卡，浏览器会重新加载该页面。</p>\n<p>这时，开发者可以通过判断<code>document.wasDiscarded</code>属性，了解先前的网页是否被丢弃了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>wasDiscarded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 该网页已经不是原来的状态了，曾经被浏览器丢弃过</span>\n  <span class=\"token comment\">// 恢复以前的状态</span>\n  <span class=\"token function\">getPersistedState</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>discardedClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同时，<code>window</code>对象上会新增<code>window.clientId</code>和<code>window.discardedClientId</code>两个属性，用来恢复丢弃前的状态。</p>\n<h2 id=\"参考链接-6\"><a href=\"#参考链接-6\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://developers.google.com/web/updates/2018/07/page-lifecycle-api\">Page Lifecycle API</a>, Philip Walton</li>\n<li><a href=\"https://github.com/WICG/page-lifecycle\">Lifecycle API for Web Pages</a>, W3C</li>\n<li><a href=\"https://wicg.github.io/page-lifecycle/spec.html\">Page Lifecycle 1 Editor’s Draft</a>, W3C</li>\n</ul>\n<h1 id=\"Page-Visibility-API\"><a href=\"#Page-Visibility-API\" class=\"headerlink\" title=\"Page Visibility API\"></a>Page Visibility API</h1><h2 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>有时候，开发者需要知道，用户正在离开页面。常用的方法是监听下面三个事件。</p>\n<blockquote>\n<ul>\n<li><code>pagehide</code></li>\n<li><code>beforeunload</code></li>\n<li><code>unload</code></li>\n</ul>\n</blockquote>\n<p>但是，这些事件在手机上可能不会触发，页面就直接关闭了。因为手机系统可以将一个进程直接转入后台，然后杀死。</p>\n<blockquote>\n<ul>\n<li>用户点击了一条系统通知，切换到另一个 App。</li>\n<li>用户进入任务切换窗口，切换到另一个 App。</li>\n<li>用户点击了 Home 按钮，切换回主屏幕。</li>\n<li>操作系统自动切换到另一个 App（比如，收到一个电话）。</li>\n</ul>\n</blockquote>\n<p>上面这些情况，都会导致手机将浏览器进程切换到后台，然后为了节省资源，可能就会杀死浏览器进程。</p>\n<p>以前，页面被系统切换，以及系统清除浏览器进程，是无法监听到的。开发者想要指定，任何一种页面卸载情况下都会执行的代码，也是无法做到的。为了解决这个问题，就诞生了 Page Visibility API。不管手机或桌面电脑，所有情况下，这个 API 都会监听到页面的可见性发生变化。</p>\n<p>这个新的 API 的意义在于，通过监听网页的可见性，可以预判网页的卸载，还可以用来节省资源，减缓电能的消耗。比如，一旦用户不看网页，下面这些网页行为都是可以暂停的。</p>\n<blockquote>\n<ul>\n<li>对服务器的轮询</li>\n<li>网页动画</li>\n<li>正在播放的音频或视频</li>\n</ul>\n</blockquote>\n<h2 id=\"document-visibilityState\"><a href=\"#document-visibilityState\" class=\"headerlink\" title=\"document.visibilityState\"></a>document.visibilityState</h2><p>这个 API 主要在<code>document</code>对象上，新增了一个<code>document.visibilityState</code>属性。该属性返回一个字符串，表示页面当前的可见性状态，共有三个可能的值。</p>\n<blockquote>\n<ul>\n<li><code>hidden</code>：页面彻底不可见。</li>\n<li><code>visible</code>：页面至少一部分可见。</li>\n<li><code>prerender</code>：页面即将或正在渲染，处于不可见状态。</li>\n</ul>\n</blockquote>\n<p>其中，<code>hidden</code>状态和<code>visible</code>状态是所有浏览器都必须支持的。<code>prerender</code>状态只在支持“预渲染”的浏览器上才会出现，比如 Chrome 浏览器就有预渲染功能，可以在用户不可见的状态下，预先把页面渲染出来，等到用户要浏览的时候，直接展示渲染好的网页。</p>\n<p>只要页面可见，哪怕只露出一个角，<code>document.visibilityState</code>属性就返回<code>visible</code>。只有以下四种情况，才会返回<code>hidden</code>。</p>\n<blockquote>\n<ul>\n<li>浏览器最小化。</li>\n<li>浏览器没有最小化，但是当前页面切换成了背景页。</li>\n<li>浏览器将要卸载（unload）页面。</li>\n<li>操作系统触发锁屏屏幕。</li>\n</ul>\n</blockquote>\n<p>可以看到，上面四种场景涵盖了页面可能被卸载的所有情况。也就是说，页面卸载之前，<code>document.visibilityState</code>属性一定会变成<code>hidden</code>。事实上，这也是设计这个 API 的主要目的。</p>\n<p>另外，早期版本的 API，这个属性还有第四个值<code>unloaded</code>，表示页面即将卸载，现在已经被废弃了。</p>\n<p>注意，<code>document.visibilityState</code>属性只针对顶层窗口，内嵌的<code>&lt;iframe&gt;</code>页面的<code>document.visibilityState</code>属性由顶层窗口决定。使用 CSS 属性隐藏<code>&lt;iframe&gt;</code>页面（比如<code>display: none;</code>），并不会影响内嵌页面的可见性。</p>\n<h2 id=\"document-hidden\"><a href=\"#document-hidden\" class=\"headerlink\" title=\"document.hidden\"></a>document.hidden</h2><p>由于历史原因，这个 API 还定义了<code>document.hidden</code>属性。该属性只读，返回一个布尔值，表示当前页面是否可见。</p>\n<p>当<code>document.visibilityState</code>属性返回<code>visible</code>时，<code>document.hidden</code>属性返回<code>false</code>；其他情况下，都返回<code>true</code>。</p>\n<p>该属性只是出于历史原因而保留的，只要有可能，都应该使用<code>document.visibilityState</code>属性，而不是使用这个属性。</p>\n<h2 id=\"visibilitychange-事件-1\"><a href=\"#visibilitychange-事件-1\" class=\"headerlink\" title=\"visibilitychange 事件\"></a>visibilitychange 事件</h2><p>只要<code>document.visibilityState</code>属性发生变化，就会触发<code>visibilitychange</code>事件。因此，可以通过监听这个事件（通过<code>document.addEventListener()</code>方法或<code>document.onvisibilitychange</code>属性），跟踪页面可见性的变化。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'visibilitychange'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 用户离开了当前页面</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>visibilityState <span class=\"token operator\">===</span> <span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'页面不可见'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 用户打开或回到页面</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>visibilityState <span class=\"token operator\">===</span> <span class=\"token string\">'visible'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'页面可见'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码是 Page Visibility API 的最基本用法，可以监听可见性变化。</p>\n<p>下面是另一个例子，一旦页面不可见，就暂停视频播放。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> vidElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video-demo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'visibilitychange'</span><span class=\"token punctuation\">,</span> startStopVideo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">startStopVideo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>visibilityState <span class=\"token operator\">===</span> <span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    vidElem<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>visibilityState <span class=\"token operator\">===</span> <span class=\"token string\">'visible'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    vidElem<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"页面卸载\"><a href=\"#页面卸载\" class=\"headerlink\" title=\"页面卸载\"></a>页面卸载</h2><p>下面专门讨论一下，如何正确监听页面卸载。</p>\n<p>页面卸载可以分成三种情况。</p>\n<blockquote>\n<ul>\n<li>页面可见时，用户关闭 Tab 页或浏览器窗口。</li>\n<li>页面可见时，用户在当前窗口前往另一个页面。</li>\n<li>页面不可见时，用户或系统关闭浏览器窗口。</li>\n</ul>\n</blockquote>\n<p>这三种情况，都会触发<code>visibilitychange</code>事件。前两种情况，该事件在用户离开页面时触发；最后一种情况，该事件在页面从可见状态变为不可见状态时触发。</p>\n<p>由此可见，<code>visibilitychange</code>事件比<code>pagehide</code>、<code>beforeunload</code>、<code>unload</code>事件更可靠，所有情况下都会触发（从<code>visible</code>变为<code>hidden</code>）。因此，可以只监听这个事件，运行页面卸载时需要运行的代码，不用监听后面那三个事件。</p>\n<p>甚至可以这样说，<code>unload</code>事件在任何情况下都不必监听，<code>beforeunload</code>事件只有一种适用场景，就是用户修改了表单，没有提交就离开当前页面。另一方面，指定了这两个事件的监听函数，浏览器就不会缓存当前页面。</p>\n<h2 id=\"参考链接-7\"><a href=\"#参考链接-7\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://w3c.github.io/page-visibility/\">Page Visibility Level 2</a>, W3C</li>\n<li><a href=\"http://davidwalsh.name/page-visibility\">Page Visibility API</a>, David Walsh</li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/pagevisibility/intro/\">Using the pageVisbility API</a>, Joe Marini</li>\n<li><a href=\"http://blogs.msdn.com/b/ie/archive/2011/07/08/using-pc-hardware-more-efficiently-in-html5-new-web-performance-apis-part-2.aspx\">Using PC Hardware more efficiently in HTML5: New Web Performance APIs, Part 2</a>, Jatinder Mann</li>\n<li><a href=\"https://www.igvita.com/2015/11/20/dont-lose-user-and-app-state-use-page-visibility/\">Don’t lose user and app state, use Page Visibility</a>, Ilya Grigorik</li>\n</ul>\n<h1 id=\"Point-lock-API\"><a href=\"#Point-lock-API\" class=\"headerlink\" title=\"Point lock API\"></a>Point lock API</h1><p>不用释放按钮，就锁定鼠标。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API\">https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API</a></p>\n<h1 id=\"Server-Sent-Events\"><a href=\"#Server-Sent-Events\" class=\"headerlink\" title=\"Server-Sent Events\"></a>Server-Sent Events</h1><h2 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>服务器向客户端推送数据，有很多解决方案。除了“轮询” 和 WebSocket，HTML 5 还提供了 Server-Sent Events（以下简称 SSE）。</p>\n<p>一般来说，HTTP 协议只能客户端向服务器发起请求，服务器不能主动向客户端推送。但是有一种特殊情况，就是服务器向客户端声明，接下来要发送的是流信息（streaming）。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。</p>\n<p>SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。</p>\n<h2 id=\"与-WebSocket-的比较\"><a href=\"#与-WebSocket-的比较\" class=\"headerlink\" title=\"与 WebSocket 的比较\"></a>与 WebSocket 的比较</h2><p>SSE 与 WebSocket 作用相似，都是建立浏览器与服务器之间的通信渠道，然后服务器向浏览器推送信息。</p>\n<p>总体来说，WebSocket 更强大和灵活。因为它是全双工通道，可以双向通信；SSE 是单向通道，只能服务器向浏览器发送，因为 streaming 本质上就是下载。如果浏览器向服务器发送信息，就变成了另一次 HTTP 请求。</p>\n<p>但是，SSE 也有自己的优点。</p>\n<ul>\n<li>SSE 使用 HTTP 协议，现有的服务器软件都支持。WebSocket 是一个独立协议。</li>\n<li>SSE 属于轻量级，使用简单；WebSocket 协议相对复杂。</li>\n<li>SSE 默认支持断线重连，WebSocket 需要自己实现断线重连。</li>\n<li>SSE 一般只用来传送文本，二进制数据需要编码后传送，WebSocket 默认支持传送二进制数据。</li>\n<li>SSE 支持自定义发送的消息类型。</li>\n</ul>\n<p>因此，两者各有特点，适合不同的场合。</p>\n<h2 id=\"客户端-API\"><a href=\"#客户端-API\" class=\"headerlink\" title=\"客户端 API\"></a>客户端 API</h2><h3 id=\"EventSource-对象\"><a href=\"#EventSource-对象\" class=\"headerlink\" title=\"EventSource 对象\"></a>EventSource 对象</h3><p>SSE 的客户端 API 部署在<code>EventSource</code>对象上。下面的代码可以检测浏览器是否支持 SSE。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'EventSource'</span> <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>使用 SSE 时，浏览器首先生成一个<code>EventSource</code>实例，向服务器发起连接。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的<code>url</code>可以与当前网址同域，也可以跨域。跨域时，可以指定第二个参数，打开<code>withCredentials</code>属性，表示是否一起发送 Cookie。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> withCredentials<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"readyState-属性\"><a href=\"#readyState-属性\" class=\"headerlink\" title=\"readyState 属性\"></a>readyState 属性</h3><p><code>EventSource</code>实例的<code>readyState</code>属性，表明连接的当前状态。该属性只读，可以取以下值。</p>\n<ul>\n<li>0：相当于常量<code>EventSource.CONNECTING</code>，表示连接还未建立，或者断线正在重连。</li>\n<li>1：相当于常量<code>EventSource.OPEN</code>，表示连接已经建立，可以接受数据。</li>\n<li>2：相当于常量<code>EventSource.CLOSED</code>，表示连接已断，且不会重连。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>readyState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"url-属性\"><a href=\"#url-属性\" class=\"headerlink\" title=\"url 属性\"></a>url 属性</h3><p><code>EventSource</code>实例的<code>url</code>属性返回连接的网址，该属性只读。</p>\n<h3 id=\"withCredentials-属性\"><a href=\"#withCredentials-属性\" class=\"headerlink\" title=\"withCredentials 属性\"></a>withCredentials 属性</h3><p><code>EventSource</code>实例的<code>withCredentials</code>属性返回一个布尔值，表示当前实例是否开启 CORS 的<code>withCredentials</code>。该属性只读，默认是<code>false</code>。</p>\n<h3 id=\"onopen-属性\"><a href=\"#onopen-属性\" class=\"headerlink\" title=\"onopen 属性\"></a>onopen 属性</h3><p>连接一旦建立，就会触发<code>open</code>事件，可以在<code>onopen</code>属性定义回调函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">source<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 另一种写法</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"onmessage-属性\"><a href=\"#onmessage-属性\" class=\"headerlink\" title=\"onmessage 属性\"></a>onmessage 属性</h3><p>客户端收到服务器发来的数据，就会触发<code>message</code>事件，可以在<code>onmessage</code>属性定义回调函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">source<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> origin <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> lastEventId <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>lastEventId<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// handle message</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 另一种写法</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> origin <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> lastEventId <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>lastEventId<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// handle message</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，参数对象<code>event</code>有如下属性。</p>\n<ul>\n<li><code>data</code>：服务器端传回的数据（文本格式）。</li>\n<li><code>origin</code>： 服务器 URL 的域名部分，即协议、域名和端口，表示消息的来源。</li>\n<li><code>lastEventId</code>：数据的编号，由服务器端发送。如果没有编号，这个属性为空。</li>\n</ul>\n<h3 id=\"onerror-属性\"><a href=\"#onerror-属性\" class=\"headerlink\" title=\"onerror 属性\"></a>onerror 属性</h3><p>如果发生通信错误（比如连接中断），就会触发<code>error</code>事件，可以在<code>onerror</code>属性定义回调函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">source<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// handle error event</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 另一种写法</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// handle error event</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h3><p>默认情况下，服务器发来的数据，总是触发浏览器<code>EventSource</code>实例的<code>message</code>事件。开发者还可以自定义 SSE 事件，这种情况下，发送回来的数据不会触发<code>message</code>事件。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">source<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> origin <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> lastEventId <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>lastEventId<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// handle message</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，浏览器对 SSE 的<code>foo</code>事件进行监听。如何实现服务器发送<code>foo</code>事件，请看下文。</p>\n<h3 id=\"close-方法\"><a href=\"#close-方法\" class=\"headerlink\" title=\"close() 方法\"></a>close() 方法</h3><p><code>close</code>方法用于关闭 SSE 连接。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">source<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"服务器实现\"><a href=\"#服务器实现\" class=\"headerlink\" title=\"服务器实现\"></a>服务器实现</h2><h3 id=\"数据格式\"><a href=\"#数据格式\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h3><p>服务器向浏览器发送的 SSE 数据，必须是 UTF-8 编码的文本，具有如下的 HTTP 头信息。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">Content-Type: text/event-stream\nCache-Control: no-cache\nConnection: keep-alive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面三行之中，第一行的<code>Content-Type</code>必须指定 MIME 类型为<code>event-steam</code>。</p>\n<p>每一次发送的信息，由若干个<code>message</code>组成，每个<code>message</code>之间用<code>\\n\\n</code>分隔。每个<code>message</code>内部由若干行组成，每一行都是如下格式。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">[field]: value\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的<code>field</code>可以取四个值。</p>\n<ul>\n<li>data</li>\n<li>event</li>\n<li>id</li>\n<li>retry</li>\n</ul>\n<p>此外，还可以有冒号开头的行，表示注释。通常，服务器每隔一段时间就会向浏览器发送一个注释，保持连接不中断。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">: This is a comment<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">: this is a test stream\\n\\n\n\ndata: some text\\n\\n\n\ndata: another message\\n\ndata: with two lines \\n\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"data-字段\"><a href=\"#data-字段\" class=\"headerlink\" title=\"data 字段\"></a>data 字段</h3><p>数据内容用<code>data</code>字段表示。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">data:  message\\n\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果数据很长，可以分成多行，最后一行用<code>\\n\\n</code>结尾，前面行都用<code>\\n</code>结尾。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">data: begin message\\n\ndata: continue message\\n\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面是一个发送 JSON 数据的例子。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">data: &#123;\\n\ndata: \"foo\": \"bar\",\\n\ndata: \"baz\", 555\\n\ndata: &#125;\\n\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"id-字段\"><a href=\"#id-字段\" class=\"headerlink\" title=\"id 字段\"></a>id 字段</h3><p>数据标识符用<code>id</code>字段表示，相当于每一条数据的编号。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">id: msg1\\n\ndata: message\\n\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>浏览器用<code>lastEventId</code>属性读取这个值。一旦连接断线，浏览器会发送一个 HTTP 头，里面包含一个特殊的<code>Last-Event-ID</code>头信息，将这个值发送回来，用来帮助服务器端重建连接。因此，这个头信息可以被视为一种同步机制。</p>\n<h3 id=\"event-字段\"><a href=\"#event-字段\" class=\"headerlink\" title=\"event 字段\"></a>event 字段</h3><p><code>event</code>字段表示自定义的事件类型，默认是<code>message</code>事件。浏览器可以用<code>addEventListener()</code>监听该事件。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">event: foo\\n\ndata: a foo event\\n\\n\n\ndata: an unnamed event\\n\\n\n\nevent: bar\\n\ndata: a bar event\\n\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的代码创造了三条信息。第一条的名字是<code>foo</code>，触发浏览器的<code>foo</code>事件；第二条未取名，表示默认类型，触发浏览器的<code>message</code>事件；第三条是<code>bar</code>，触发浏览器的<code>bar</code>事件。</p>\n<p>下面是另一个例子。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">event: userconnect\ndata: &#123;\"username\": \"bobby\", \"time\": \"02:33:48\"&#125;\n\nevent: usermessage\ndata: &#123;\"username\": \"bobby\", \"time\": \"02:34:11\", \"text\": \"Hi everyone.\"&#125;\n\nevent: userdisconnect\ndata: &#123;\"username\": \"bobby\", \"time\": \"02:34:23\"&#125;\n\nevent: usermessage\ndata: &#123;\"username\": \"sean\", \"time\": \"02:34:36\", \"text\": \"Bye, bobby.\"&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"retry-字段\"><a href=\"#retry-字段\" class=\"headerlink\" title=\"retry 字段\"></a>retry 字段</h3><p>服务器可以用<code>retry</code>字段，指定浏览器重新发起连接的时间间隔。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">retry: 10000\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>两种情况会导致浏览器重新发起连接：一种是时间间隔到期，二是由于网络错误等原因，导致连接出错。</p>\n<h2 id=\"Node-服务器实例\"><a href=\"#Node-服务器实例\" class=\"headerlink\" title=\"Node 服务器实例\"></a>Node 服务器实例</h2><p>SSE 要求服务器与浏览器保持连接。对于不同的服务器软件来说，所消耗的资源是不一样的。Apache 服务器，每个连接就是一个线程，如果要维持大量连接，势必要消耗大量资源。Node 则是所有连接都使用同一个线程，因此消耗的资源会小得多，但是这要求每个连接不能包含很耗时的操作，比如磁盘的 IO 读写。</p>\n<p>下面是 Node 的 SSE 服务器<a href=\"http://cjihrig.com/blog/server-sent-events-in-node-js/\">实例</a>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> fileName <span class=\"token operator\">=</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileName <span class=\"token operator\">===</span> <span class=\"token string\">\"./stream\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"Content-Type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"text/event-stream\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Cache-Control\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"no-cache\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Connection\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"keep-alive\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"retry: 10000\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"event: connecttime\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    req<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8844</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考链接-8\"><a href=\"#参考链接-8\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li>Colin Ihrig, <a href=\"http://jspro.com/apis/implementing-push-technology-using-server-sent-events/\">Implementing Push Technology Using Server-Sent Events</a></li>\n<li>Colin Ihrig，<a href=\"http://cjihrig.com/blog/the-server-side-of-server-sent-events/\">The Server Side of Server-Sent Events</a></li>\n<li>Eric Bidelman, <a href=\"http://www.html5rocks.com/en/tutorials/eventsource/basics/\">Stream Updates with Server-Sent Events</a></li>\n<li>MDN，<a href=\"https://developer.mozilla.org/en-US/docs/Server-sent_events/Using_server-sent_events\">Using server-sent events</a></li>\n<li>Segment.io, <a href=\"https://segment.io/blog/2014-04-03-server-sent-events-the-simplest-realtime-browser-spec/\">Server-Sent Events: The simplest realtime browser spec</a></li>\n</ul>\n<h1 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a>Service Worker</h1><h2 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h2><p>Service Worker 首先是一个运行在后台的 Worker 线程，然后它会长期运行，充当一个服务，很适合那些不需要网页或用户互动的功能。它的最常见用途就是拦截和处理网络请求。</p>\n<p>Service Worker 是一个后台运行的脚本，充当一个代理服务器，拦截用户发出的网络请求，比如加载脚本和图片。Service Worker 可以修改用户的请求，或者直接向用户发出回应，不用联系服务器，这使得用户可以在离线情况下使用网络应用。它还可以在本地缓存资源文件，直接从缓存加载文件，因此可以加快访问速度。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'serviceWorker'</span> <span class=\"token keyword\">in</span> navigator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/service-worker.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码确认浏览器支持 Service Worker 以后，会注册一个 Service Worker。</p>\n<p>为了节省内存，Service worker 在不使用的时候是休眠的。它也不会保存数据，所以重新启动的时候，为了拿到数据，最好把数据放在 IndexedDb 里面。</p>\n<p>Service Worker 是事件驱动的。</p>\n<p>下面是拦截请求的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/product'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> productId <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>productId\n      <span class=\"token keyword\">let</span> productCount <span class=\"token operator\">=</span> <span class=\"token function\">getProductData</span><span class=\"token punctuation\">(</span>productId<span class=\"token punctuation\">)</span>\n      indexedDB<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'store'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">db</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> productStore <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">createObjectStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> keyPath<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        productStore<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> productId<span class=\"token punctuation\">,</span> count<span class=\"token operator\">:</span> <span class=\"token operator\">++</span>productCount <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Service Worker 不能直接操作 DOM。</p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><h3 id=\"登记\"><a href=\"#登记\" class=\"headerlink\" title=\"登记\"></a>登记</h3><p>使用 service worker 的第一步，就是告诉浏览器，需要注册一个 service worker 脚本。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sw.js'</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'注册成功'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'注册失败'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码的<code>sw.js</code>就是需要浏览器注册的 service worker 脚本。注意，这个脚本必须与当前网址同域，service worker 不支持跨与脚本。另外，<code>sw.js</code>必须是从 HTTPS 协议加载的。</p>\n<p>默认情况下，Service worker 只对根目录<code>/</code>生效，如果要改变生效范围，可以运行下面的代码。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'/service-worker.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span> scope<span class=\"token operator\">:</span> <span class=\"token string\">'/products/fashion'</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>一旦登记成功，接下来都是 service worker 脚本的工作。下面的代码都是写在 service worker 脚本里面的。</p>\n<p>登记后，就会触发<code>install</code>事件。service worker 脚本需要监听这个事件。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'安装完成'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>event.waitUntil()</code>方法为事件完成后指定回调函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">CACHE_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'xyz-cache'</span>\n    <span class=\"token keyword\">let</span> urlsToCache <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/styles/main.css'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/scripts/bundle.js'</span>\n    <span class=\"token punctuation\">]</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n        caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CACHE_NAME</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span> <span class=\"token operator\">=></span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>urlsToCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h3><p>安装完成后，service worker 就会等待激活。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> cacheWhitelist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'products-v2'</span><span class=\"token punctuation\">]</span>\n\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n        caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cacheNames</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n                cacheNames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">cacheName</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cacheWhitelist<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Service-Worker-与网页的通信\"><a href=\"#Service-Worker-与网页的通信\" class=\"headerlink\" title=\"Service Worker 与网页的通信\"></a>Service Worker 与网页的通信</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n        self<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">client</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            client<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n                msg<span class=\"token operator\">:</span> <span class=\"token string\">'Hey, from service worker! I\\'m listening to your fetch requests.'</span><span class=\"token punctuation\">,</span>\n                source<span class=\"token operator\">:</span> <span class=\"token string\">'service-worker'</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，Service Worker 监听<code>activate</code>事件，然后向客户端发送一条信息。</p>\n<p>客户端需要部署消息监听代码。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>source <span class=\"token operator\">==</span> <span class=\"token string\">'service-worker'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考链接-9\"><a href=\"#参考链接-9\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://frontendian.co/service-workers\">Service Workers</a>, by Ryan Miller</li>\n</ul>\n<h1 id=\"SVG-图像\"><a href=\"#SVG-图像\" class=\"headerlink\" title=\"SVG 图像\"></a>SVG 图像</h1><h2 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>SVG 是一种基于 XML 语法的图像格式，全称是可缩放矢量图（Scalable Vector Graphics）。其他图像格式都是基于像素处理的，SVG 则是属于对图像的形状描述，所以它本质上是文本文件，体积较小，且不管放大多少倍都不会失真。</p>\n<p>SVG 文件可以直接插入网页，成为 DOM 的一部分，然后用 JavaScript 和 CSS 进行操作。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span>\n  <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mysvg<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 800 600<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">preserveAspectRatio</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xMidYMid meet<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mycircle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>400<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面是 SVG 代码直接插入网页的例子。</p>\n<p>SVG 代码也可以写在一个独立文件中，然后用<code>&lt;img&gt;</code>、<code>&lt;object&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;iframe&gt;</code>等标签插入网页。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circle.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>object</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>object<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circle.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/svg+xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>object</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>embed</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>embed<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/svg+xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>iframe<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>CSS 也可以使用 SVG 文件。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.logo</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>icon.svg<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>SVG 文件还可以转为 BASE64 编码，然后作为 Data URI 写入网页。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data:image/svg+xml;base64,[data]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><h3 id=\"lt-svg-gt-标签\"><a href=\"#lt-svg-gt-标签\" class=\"headerlink\" title=\"&lt;svg&gt;标签\"></a><code>&lt;svg&gt;</code>标签</h3><p>SVG 代码都放在顶层标签<code>&lt;svg&gt;</code>之中。下面是一个例子。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mycircle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;svg&gt;</code>的<code>width</code>属性和<code>height</code>属性，指定了 SVG 图像在 HTML 元素中所占据的宽度和高度。除了相对单位，也可以采用绝对单位（单位：像素）。如果不指定这两个属性，SVG 图像的大小默认为300像素（宽）x 150像素（高）。</p>\n<p>如果只想展示 SVG 图像的一部分，就要指定<code>viewBox</code>属性。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50 50 50 50<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mycircle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;viewBox&gt;</code>属性的值有四个数字，分别是左上角的横坐标和纵坐标、视口的宽度和高度。上面代码中，SVG 图像是100像素宽 x 100像素高，<code>viewBox</code>属性指定视口从<code>(50, 50)</code>这个点开始。所以，实际看到的是右下角的四分之一圆。</p>\n<p>注意，视口必须适配所在的空间。上面代码中，视口的大小是 50 x 50，由于 SVG 图像的大小是 100 x 100，所以视口会放大去适配 SVG 图像的大小，即放大了四倍。</p>\n<p>如果不指定<code>width</code>属性和<code>height</code>属性，只指定<code>viewBox</code>属性，则相当于只给定 SVG 图像的长宽比。这时，SVG 图像的大小默认是所在的 HTML 元素的大小。</p>\n<h3 id=\"lt-circle-gt-标签\"><a href=\"#lt-circle-gt-标签\" class=\"headerlink\" title=\"&lt;circle&gt;标签\"></a><code>&lt;circle&gt;</code>标签</h3><p><code>&lt;circle&gt;</code>标签代表圆形。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>90<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>150<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fancy<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的代码定义了三个圆。<code>&lt;circle&gt;</code>标签的<code>cx</code>、<code>cy</code>、<code>r</code>属性分别为横坐标、纵坐标和半径，单位为像素。坐标都是相对于<code>&lt;svg&gt;</code>画布的左上角原点。</p>\n<p><code>class</code>属性用来指定对应的 CSS 类。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.red</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">fill</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.fancy</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">fill</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">stroke</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">stroke-width</span><span class=\"token punctuation\">:</span> 3pt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>SVG 的 CSS 属性与网页元素有所不同。</p>\n<blockquote>\n<ul>\n<li>fill：填充色</li>\n<li>stroke：描边色</li>\n<li>stroke-width：边框宽度</li>\n</ul>\n</blockquote>\n<h3 id=\"lt-line-gt-标签\"><a href=\"#lt-line-gt-标签\" class=\"headerlink\" title=\"&lt;line&gt;标签\"></a><code>&lt;line&gt;</code>标签</h3><p><code>&lt;line&gt;</code>标签用来绘制直线。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>line</span> <span class=\"token attr-name\">x1</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y1</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x2</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y2</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stroke:rgb(0,0,0);stroke-width:5<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>&lt;line&gt;</code>标签的<code>x1</code>属性和<code>y1</code>属性，表示线段起点的横坐标和纵坐标；<code>x2</code>属性和<code>y2</code>属性，表示线段终点的横坐标和纵坐标；<code>style</code>属性表示线段的样式。</p>\n<h3 id=\"lt-polyline-gt-标签\"><a href=\"#lt-polyline-gt-标签\" class=\"headerlink\" title=\"&lt;polyline&gt;标签\"></a><code>&lt;polyline&gt;</code>标签</h3><p><code>&lt;polyline&gt;</code>标签用于绘制一根折线。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>polyline</span> <span class=\"token attr-name\">points</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3,3 30,28 3,53<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;polyline&gt;</code>的<code>points</code>属性指定了每个端点的坐标，横坐标与纵坐标之间与逗号分隔，点与点之间用空格分隔。</p>\n<h3 id=\"lt-rect-gt-标签\"><a href=\"#lt-rect-gt-标签\" class=\"headerlink\" title=\"&lt;rect&gt;标签\"></a><code>&lt;rect&gt;</code>标签</h3><p><code>&lt;rect&gt;</code>标签用于绘制矩形。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rect</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stroke: #70d5dd; fill: #dd524b<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;rect&gt;</code>的<code>x</code>属性和<code>y</code>属性，指定了矩形左上角端点的横坐标和纵坐标；<code>width</code>属性和<code>height</code>属性指定了矩形的宽度和高度（单位像素）。</p>\n<h3 id=\"lt-ellipse-gt-标签\"><a href=\"#lt-ellipse-gt-标签\" class=\"headerlink\" title=\"&lt;ellipse&gt;标签\"></a><code>&lt;ellipse&gt;</code>标签</h3><p><code>&lt;ellipse&gt;</code>标签用于绘制椭圆。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ellipse</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>60<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>60<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ry</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>silver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;ellipse&gt;</code>的<code>cx</code>属性和<code>cy</code>属性，指定了椭圆中心的横坐标和纵坐标（单位像素）；<code>rx</code>属性和<code>ry</code>属性，指定了椭圆横向轴和纵向轴的半径（单位像素）。</p>\n<h3 id=\"lt-polygon-gt-标签\"><a href=\"#lt-polygon-gt-标签\" class=\"headerlink\" title=\"&lt;polygon&gt;标签\"></a><code>&lt;polygon&gt;</code>标签</h3><p><code>&lt;polygon&gt;</code>标签用于绘制多边形。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>polygon</span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>green<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>orange<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">points</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0,0 100,0 100,100 0,100 0,0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;polygon&gt;</code>的<code>points</code>属性指定了每个端点的坐标，横坐标与纵坐标之间与逗号分隔，点与点之间用空格分隔。</p>\n<h3 id=\"lt-path-gt-标签\"><a href=\"#lt-path-gt-标签\" class=\"headerlink\" title=\"&lt;path&gt;标签\"></a><code>&lt;path&gt;</code>标签</h3><p><code>&lt;path&gt;</code>标签用于制路径。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\n  M 18,3\n  L 46,3\n  L 46,40\n  L 61,40\n  L 32,68\n  L 3,40\n  L 18,40\n  Z\n<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;path&gt;</code>的<code>d</code>属性表示绘制顺序，它的值是一个长字符串，每个字母表示一个绘制动作，后面跟着坐标。</p>\n<blockquote>\n<ul>\n<li>M：移动到（moveto）</li>\n<li>L：画直线到（lineto）</li>\n<li>Z：闭合路径</li>\n</ul>\n</blockquote>\n<h3 id=\"lt-text-gt-标签\"><a href=\"#lt-text-gt-标签\" class=\"headerlink\" title=\"&lt;text&gt;标签\"></a><code>&lt;text&gt;</code>标签</h3><p><code>&lt;text&gt;</code>标签用于绘制文本。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;text&gt;</code>的<code>x</code>属性和<code>y</code>属性，表示文本区块基线（baseline）起点的横坐标和纵坐标。文字的样式可以用<code>class</code>或<code>style</code>属性指定。</p>\n<h3 id=\"lt-use-gt-标签\"><a href=\"#lt-use-gt-标签\" class=\"headerlink\" title=\"&lt;use&gt;标签\"></a><code>&lt;use&gt;</code>标签</h3><p><code>&lt;use&gt;</code>标签用于复制一个形状。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 30 10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myCircle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>use</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#myCircle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>use</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#myCircle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;use&gt;</code>的<code>href</code>属性指定所要复制的节点，<code>x</code>属性和<code>y</code>属性是<code>&lt;use&gt;</code>左上角的坐标。另外，还可以指定<code>width</code>和<code>height</code>坐标。</p>\n<h3 id=\"lt-g-gt-标签\"><a href=\"#lt-g-gt-标签\" class=\"headerlink\" title=\"&lt;g&gt;标签\"></a><code>&lt;g&gt;</code>标签</h3><p><code>&lt;g&gt;</code>标签用于将多个形状组成一个组（group），方便复用。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myCircle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>圆形<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>use</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#myCircle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>use</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#myCircle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"lt-defs-gt-标签\"><a href=\"#lt-defs-gt-标签\" class=\"headerlink\" title=\"&lt;defs&gt;标签\"></a><code>&lt;defs&gt;</code>标签</h3><p><code>&lt;defs&gt;</code>标签用于自定义形状，它内部的代码不会显示，仅供引用。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defs</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myCircle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>圆形<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defs</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>use</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#myCircle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>use</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#myCircle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>use</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#myCircle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"lt-pattern-gt-标签\"><a href=\"#lt-pattern-gt-标签\" class=\"headerlink\" title=\"&lt;pattern&gt;标签\"></a><code>&lt;pattern&gt;</code>标签</h3><p><code>&lt;pattern&gt;</code>标签用于自定义一个形状，该形状可以被引用来平铺一个区域。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defs</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pattern</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dots<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">patternUnits</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userSpaceOnUse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#bee9e8<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>35<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pattern</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defs</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rect</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url(#dots)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>&lt;pattern&gt;</code>标签将一个圆形定义为<code>dots</code>模式。<code>patternUnits=&quot;userSpaceOnUse&quot;</code>表示<code>&lt;pattern&gt;</code>的宽度和长度是实际的像素值。然后，指定这个模式去填充下面的矩形。</p>\n<h3 id=\"lt-image-gt-标签\"><a href=\"#lt-image-gt-标签\" class=\"headerlink\" title=\"&lt;image&gt;标签\"></a><code>&lt;image&gt;</code>标签</h3><p><code>&lt;image&gt;</code>标签用于插入图片文件。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 100 100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\"><span class=\"token namespace\">xlink:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>path/to/image.jpg<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>&lt;image&gt;</code>的<code>xlink:href</code>属性表示图像的来源。</p>\n<h3 id=\"lt-animate-gt-标签\"><a href=\"#lt-animate-gt-标签\" class=\"headerlink\" title=\"&lt;animate&gt;标签\"></a><code>&lt;animate&gt;</code>标签</h3><p><code>&lt;animate&gt;</code>标签用于产生动画效果。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500px<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rect</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#feac5e<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animate</span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">from</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rect</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，矩形会不断移动，产生动画效果。</p>\n<p><code>&lt;animate&gt;</code>的属性含义如下。</p>\n<blockquote>\n<ul>\n<li>attributeName：发生动画效果的属性名。</li>\n<li>from：单次动画的初始值。</li>\n<li>to：单次动画的结束值。</li>\n<li>dur：单次动画的持续时间。</li>\n<li>repeatCount：动画的循环模式。</li>\n</ul>\n</blockquote>\n<p>可以在多个属性上面定义动画。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animate</span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">from</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animate</span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"lt-animateTransform-gt-标签\"><a href=\"#lt-animateTransform-gt-标签\" class=\"headerlink\" title=\"&lt;animateTransform&gt;标签\"></a><code>&lt;animateTransform&gt;</code>标签</h3><p><code>&lt;animate&gt;</code>标签对 CSS 的<code>transform</code>属性不起作用，如果需要变形，就要使用<code>&lt;animateTransform&gt;</code>标签。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500px<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rect</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#4bc0c8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateTransform</span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transform<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rotate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">from</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 200 200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>360 400 400<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rect</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>&lt;animateTransform&gt;</code>的效果为旋转（<code>rotate</code>），这时<code>from</code>和<code>to</code>属性值有三个数字，第一个数字是角度值，第二个值和第三个值是旋转中心的坐标。<code>from=&quot;0 200 200&quot;</code>表示开始时，角度为0，围绕<code>(200, 200)</code>开始旋转；<code>to=&quot;360 400 400&quot;</code>表示结束时，角度为360，围绕<code>(400, 400)</code>旋转。</p>\n<h2 id=\"JavaScript-操作\"><a href=\"#JavaScript-操作\" class=\"headerlink\" title=\"JavaScript 操作\"></a>JavaScript 操作</h2><h3 id=\"DOM-操作\"><a href=\"#DOM-操作\" class=\"headerlink\" title=\"DOM 操作\"></a>DOM 操作</h3><p>如果 SVG 代码直接写在 HTML 网页之中，它就成为网页 DOM 的一部分，可以直接用 DOM 操作。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span>\n  <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mysvg<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 800 600<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">preserveAspectRatio</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xMidYMid meet<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mycircle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>400<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码插入网页之后，就可以用 CSS 定制样式。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">circle</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">stroke-width</span><span class=\"token punctuation\">:</span> 5<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">stroke</span><span class=\"token punctuation\">:</span> #f00<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">fill</span><span class=\"token punctuation\">:</span> #ff0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">circle:hover</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">stroke</span><span class=\"token punctuation\">:</span> #090<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">fill</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，可以用 JavaScript 代码操作 SVG。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> mycircle <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mycircle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmycircle<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'circle clicked - enlarging'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mycircle<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码指定，如果点击图形，就改写<code>circle</code>元素的<code>r</code>属性。</p>\n<h3 id=\"获取-SVG-DOM\"><a href=\"#获取-SVG-DOM\" class=\"headerlink\" title=\"获取 SVG DOM\"></a>获取 SVG DOM</h3><p>使用<code>&lt;object&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code>标签插入 SVG 文件，可以获取 SVG DOM。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> svgObject <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contentDocument<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> svgIframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contentDocument<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> svgEmbed <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'embed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSVGDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，如果使用<code>&lt;img&gt;</code>标签插入 SVG 文件，就无法获取 SVG DOM。</p>\n<h3 id=\"读取-SVG-源码\"><a href=\"#读取-SVG-源码\" class=\"headerlink\" title=\"读取 SVG 源码\"></a>读取 SVG 源码</h3><p>由于 SVG 文件就是一段 XML 文本，因此可以通过读取 XML 代码的方式，读取 SVG 源码。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>svg-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span>\n    <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xlink</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/xlink<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xml:</span>space</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preserve<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>440<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- svg code --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用<code>XMLSerializer</code>实例的<code>serializeToString()</code>方法，获取 SVG 元素的代码。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> svgString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">serializeToString</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'svg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"SVG-图像转为-Canvas-图像\"><a href=\"#SVG-图像转为-Canvas-图像\" class=\"headerlink\" title=\"SVG 图像转为 Canvas 图像\"></a>SVG 图像转为 Canvas 图像</h3><p>首先，需要新建一个<code>Image</code>对象，将 SVG 图像指定到该<code>Image</code>对象的<code>src</code>属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> svg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>svgString<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>type<span class=\"token operator\">:</span> <span class=\"token string\">\"image/svg+xml;charset=utf-8\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token constant\">DOMURL</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span> <span class=\"token operator\">||</span> self<span class=\"token punctuation\">.</span>webkitURL <span class=\"token operator\">||</span> self<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token constant\">DOMURL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>svg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nimg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，当图像加载完成后，再将它绘制到<code>&lt;canvas&gt;</code>元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"实例：折线图\"><a href=\"#实例：折线图\" class=\"headerlink\" title=\"实例：折线图\"></a>实例：折线图</h2><p>下面将一张数据表格画成折线图。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">Date |Amount\n-----|------\n2014-01-01 | $10\n2014-02-01 | $20\n2014-03-01 | $40\n2014-04-01 | $80<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的图形，可以画成一个坐标系，<code>Date</code>作为横轴，<code>Amount</code>作为纵轴，四行数据画成一个数据点。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>350<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>160<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>layer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">transform</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>translate(60,10)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span>   <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>105<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>90<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>90<span class=\"token punctuation\">\"</span></span>  <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>60<span class=\"token punctuation\">\"</span></span>  <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>270<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span>   <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>y axis<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>line</span> <span class=\"token attr-name\">x1</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y1</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x2</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y2</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>105<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>$10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span>   <span class=\"token attr-name\">dy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>$80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x axis<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">transform</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>translate(0, 120)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>line</span> <span class=\"token attr-name\">x1</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y1</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x2</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>270<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y2</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-30<span class=\"token punctuation\">\"</span></span>   <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>January 2014<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>240<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>April<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考链接-10\"><a href=\"#参考链接-10\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li>Jon McPartland, <a href=\"http://bigbitecreative.com/introduction-svg-animation/\">An introduction to SVG animation</a></li>\n<li>Alexander Goedde, <a href=\"http://tavendo.com/blog/post/super-vector-graphics/\">SVG - Super Vector Graphics</a></li>\n<li>Joseph Wegner, <a href=\"http://flippinawesome.org/2014/02/03/learning-svg/\">Learning SVG</a></li>\n<li>biovisualize, <a href=\"http://bl.ocks.org/biovisualize/8187844\">Direct svg to canvas to png conversion</a></li>\n<li>Tyler Sticka, <a href=\"https://cloudfour.com/thinks/cropping-image-thumbnails-with-svg/\">Cropping Image Thumbnails with SVG</a></li>\n<li>Adi Purdila, <a href=\"https://webdesign.tutsplus.com/tutorials/how-to-create-a-loader-icon-with-svg-animations--cms-31542\">How to Create a Loader Icon With SVG Animations</a></li>\n</ul>\n<h1 id=\"Web-Share-API\"><a href=\"#Web-Share-API\" class=\"headerlink\" title=\"Web Share API\"></a>Web Share API</h1><h2 id=\"概述-2\"><a href=\"#概述-2\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>网页内容如果要分享到其他应用，通常要自己实现分享接口，逐一给出目标应用的连接方式。这样很麻烦，也对网页性能有一定影响。Web Share API 就是为了解决这个问题而提出的，允许网页调用操作系统的分享接口，实质是 Web App 与本机的应用程序交换信息的一种方式。</p>\n<p>这个 API 不仅可以改善网页性能，而且不限制分享目标的数量和类型。社交媒体应用、电子邮件、即时消息、以及本地系统安装的、且接受分享的应用，都会出现在系统的分享弹窗，这对手机网页尤其有用。另外，使用这个接口只需要一个分享按钮，而传统的网页分享有多个分享目标，就有多少个分享按钮。</p>\n<p>目前，桌面的 Safari 浏览器，手机的安卓 Chrome 浏览器和 iOS Safari 浏览器，支持这个 API。</p>\n<p>这个 API 要求网站必须启用 HTTPS 协议，但是本地 Localhost 开发可以使用 HTTP 协议。另外，这个 API 不能直接调用，只能用来响应用户的操作（比如<code>click</code>事件）。</p>\n<h2 id=\"接口细节\"><a href=\"#接口细节\" class=\"headerlink\" title=\"接口细节\"></a>接口细节</h2><p>该接口部署在<code>navigator.share</code>，可以用下面的代码检查本机是否支持该接口。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>share<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 支持</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 不支持</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>navigator.share</code>是一个函数方法，接受一个配置对象作为参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">navigator<span class=\"token punctuation\">.</span><span class=\"token function\">share</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'WebShare API Demo'</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">'https://codepen.io/ayoisaiah/pen/YbNazJ'</span><span class=\"token punctuation\">,</span>\n  text<span class=\"token operator\">:</span> <span class=\"token string\">'我正在看《Web Share API》'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置对象有三个属性，都是可选的，但至少必须指定一个。</p>\n<ul>\n<li><code>title</code>：分享文档的标题。</li>\n<li><code>url</code>：分享的 URL。</li>\n<li><code>text</code>：分享的内容。</li>\n</ul>\n<p>一般来说，<code>url</code>是当前网页的网址，<code>title</code>是当前网页的标题，可以采用下面的写法获取。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link[rel=canonical]'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link[rel=canonical]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>href <span class=\"token operator\">:</span>\n  document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>navigator.share</code>的返回值是一个 Promise 对象。这个方法调用之后，会立刻弹出系统的分享弹窗，用户操作完毕之后，Promise 对象就会变为<code>resolved</code>状态。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">navigator<span class=\"token punctuation\">.</span><span class=\"token function\">share</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'WebShare API Demo'</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">'https://codepen.io/ayoisaiah/pen/YbNazJ'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Thanks for sharing!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Sharing error'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于返回值是 Promise 对象，所以也可以使用<code>await</code>命令。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">shareButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span><span class=\"token function\">share</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Example Page'</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Data was shared successfully'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Share failed:'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"分享文件\"><a href=\"#分享文件\" class=\"headerlink\" title=\"分享文件\"></a>分享文件</h2><p>这个 API 还可以分享文件，先使用<code>navigator.canShare()</code>方法，判断一下目标文件是否可以分享。因为不是所有文件都允许分享的，目前图像，视频，音频和文本文件可以分享2。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>canShare <span class=\"token operator\">&amp;&amp;</span> navigator<span class=\"token punctuation\">.</span><span class=\"token function\">canShare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> files<span class=\"token operator\">:</span> filesArray <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>navigator.canShare()</code>方法的参数对象，就是<code>navigator.share()</code>方法的参数对象。这里的关键是<code>files</code>属性，它的值是一个<code>FileList</code>实例对象。</p>\n<p><code>navigator.canShare()</code>方法返回一个布尔值，如果为<code>true</code>，就可以使用<code>navigator.share()</code>方法分享文件了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>canShare <span class=\"token operator\">&amp;&amp;</span> navigator<span class=\"token punctuation\">.</span><span class=\"token function\">canShare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> files<span class=\"token operator\">:</span> filesArray <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  navigator<span class=\"token punctuation\">.</span><span class=\"token function\">share</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    files<span class=\"token operator\">:</span> filesArray<span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'Vacation Pictures'</span><span class=\"token punctuation\">,</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">'Photos from September 27 to October 14.'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Share was successful.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Sharing failed'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"参考链接-11\"><a href=\"#参考链接-11\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://css-tricks.com/how-to-use-the-web-share-api/\">How to Use the Web Share API</a>, Ayooluwa Isaiah</li>\n<li><a href=\"https://wicg.github.io/web-share/\">Web Share API - Level 1</a>, W3C</li>\n<li><a href=\"https://developers.google.com/web/updates/2016/09/navigator-share\">Introducing the Web Share API</a>, Paul Kinlan, Sam Thorogood</li>\n<li><a href=\"https://web.dev/web-share/\">Share like a native app with the Web Share API</a>, Joe Medley</li>\n</ul>\n<h1 id=\"Web-Audio-API\"><a href=\"#Web-Audio-API\" class=\"headerlink\" title=\"Web Audio API\"></a>Web Audio API</h1><p>Web Audio API 用于操作声音。这个 API 可以让网页发出声音。</p>\n<h2 id=\"基本用法-2\"><a href=\"#基本用法-2\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>浏览器原生提供<code>AudioContext</code>对象，该对象用于生成一个声音的上下文，与扬声器相连。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> audioContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后，获取音源文件，将其在内存中解码，就可以播放声音了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sound.mp4'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arrayBuffer</span> <span class=\"token operator\">=></span> context<span class=\"token punctuation\">.</span><span class=\"token function\">decodeAudioData</span><span class=\"token punctuation\">(</span>arrayBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">audioBuffer</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 播放声音</span>\n    <span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    source<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> audioBuffer<span class=\"token punctuation\">;</span>\n    source<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    source<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"context-createBuffer\"><a href=\"#context-createBuffer\" class=\"headerlink\" title=\"context.createBuffer()\"></a>context.createBuffer()</h2><p><code>context.createBuffer()</code>方法生成一个内存的操作视图，用于存放数据。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> audioContext<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">,</span> signalLength<span class=\"token punctuation\">,</span> sampleRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>createBuffer</code>方法接受三个参数。</p>\n<ul>\n<li>channels：整数，表示声道。创建单声道的声音，该值为 1。</li>\n<li>signalLength：整数，表示声音数组的长度。</li>\n<li>sampleRate：浮点数，表示取样率，即一秒取样多少次。</li>\n</ul>\n<p><code>signalLength</code>和<code>sampleRate</code>这两个参数决定了声音的长度。比如，如果取样率是<code>1/3000</code>（每秒取样3000次），声音数组长度是6000，那么播放的声音是2秒长度。</p>\n<p>接着，使用<code>buffer.getChannelData</code>方法取出一个声道。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getChannelData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，<code>buffer.getChannelData</code>的参数<code>0</code>表示取出第一个声道。</p>\n<p>下一步，将声音数组放入这个声道。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getChannelData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// singal 是一个声音数组</span>\n<span class=\"token comment\">// singalLengal 是该数组的长度</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> signalLength<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> signal<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最后，使用<code>context.createBufferSource</code>方法生成一个声音节点。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 生成一个声音节点</span>\n<span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> audioContext<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将声音数组的内存对象，放入这个节点</span>\nnode<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将声音上下文与节点连接</span>\nnode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 开始播放声音</span>\nnode<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>currentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>默认情况下，播放一次后就将停止播放。如果需要循环播放，可以将节点对象的<code>looping</code>属性设为<code>true</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">node<span class=\"token punctuation\">.</span>looping <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>Web Audio API 原生提供了一些过滤器（filter），用来处理声音。</p>\n<p>首先，使用<code>context.createBiquadFilter</code>方法建立过滤器实例。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> filter <span class=\"token operator\">=</span> audioContext<span class=\"token punctuation\">.</span><span class=\"token function\">createBiquadFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后，通过<code>filter.type</code>属性指定过滤器的类型。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">filter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'lowpass'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>目前，过滤器有以下这些类型。</p>\n<ul>\n<li>lowpass</li>\n<li>highpass</li>\n<li>bandpass</li>\n<li>lowshelf</li>\n<li>highshelf</li>\n<li>peaking</li>\n<li>notch</li>\n<li>allpass</li>\n</ul>\n<p>然后指定过滤器的频率（frequency）属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">filter<span class=\"token punctuation\">.</span>frequency<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> frequency<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最后，过滤器实例连接节点实例，就可以生效了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">sourceNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"Web-Components\"><a href=\"#Web-Components\" class=\"headerlink\" title=\"Web Components\"></a>Web Components</h1><h2 id=\"概述-3\"><a href=\"#概述-3\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>各种网站往往需要一些相同的模块，比如日历、调色板等等，这种模块就被称为“组件”（component）。Web Components 就是浏览器原生的组件规范。</p>\n<p>采用组件开发，有很多优点。</p>\n<p>（1）有利于代码复用。组件是模块化编程思想的体现，可以跨平台、跨框架使用，构建、部署和与其他 UI 元素互动都有统一做法。</p>\n<p>（2）使用非常容易。加载或卸载组件，只要添加或删除一行代码就可以了。</p>\n<p>（3）开发和定制很方便。组件开发不需要使用框架，只要用原生的语法就可以了。开发好的组件往往留出接口，供使用者设置常见属性，比如上面代码的<code>heading</code>属性，就是用来设置对话框的标题。</p>\n<p>（4）组件提供了 HTML、CSS、JavaScript 封装的方法，实现了与同一页面上其他代码的隔离。</p>\n<p>未来的网站开发，可以像搭积木一样，把组件合在一起，就组成了一个网站。这种前景是非常诱人的。</p>\n<p>Web Components 不是单一的规范，而是一系列的技术组成，以下是它的四个构成。</p>\n<ul>\n<li>Custom Elements</li>\n<li>Template</li>\n<li>Shadow DOM</li>\n<li>HTML Import</li>\n</ul>\n<p>使用时，并不一定上面四种 API 都要用到。其中，Custom Element 和 Shadow DOM 比较重要，Template 和 HTML Import 只起到辅助作用。</p>\n<h2 id=\"Custom-Element\"><a href=\"#Custom-Element\" class=\"headerlink\" title=\"Custom Element\"></a>Custom Element</h2><h3 id=\"简介-4\"><a href=\"#简介-4\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>HTML 标准定义的网页元素，有时并不符合我们的需要，这时浏览器允许用户自定义网页元素，这就叫做 Custom Element。简单说，它就是用户自定义的网页元素，是 Web components 技术的核心。</p>\n<p>举例来说，你可以自定义一个叫做<code>&lt;my-element&gt;</code>的网页元素。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-element</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-element</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意，自定义网页元素的标签名必须含有连字符<code>-</code>，一个或多个连字符都可以。这是因为浏览器内置的的 HTML 元素标签名，都不含有连字符，这样可以做到有效区分。</p>\n<p>下面的代码先定义一个自定义元素的类。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">&#123;</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;style>\n        /* scoped styles */\n      &lt;/style>\n      &lt;slot>&lt;/slot>\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Return list of attributes to watch.</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Run functionality when one of these attributes is changed.</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Run functionality when an instance of this element is inserted into the DOM.</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Run functionality when an instance of this element is removed from the DOM.</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码有几个注意点。</p>\n<ul>\n<li>自定义元素类的基类是<code>HTMLElement</code>。当然也可以根据需要，基于<code>HTMLElement</code>的子类，比如<code>HTMLButtonElement</code>。</li>\n<li>构造函数内部定义了 Shadow DOM。所谓<code>Shadow DOM</code>指的是，这部分的 HTML 代码和样式，不直接暴露给用户。</li>\n<li>类可以定义生命周期方法，比如<code>connectedCallback()</code>。</li>\n</ul>\n<p>然后，<code>window.customElements.define()</code>方法，用来登记自定义元素与这个类之间的映射。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-element'</span><span class=\"token punctuation\">,</span> MyElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>登记以后，页面上的每一个<code>&lt;my-element&gt;</code>元素都是一个<code>MyElement</code>类的实例。只要浏览器解析到<code>&lt;my-element&gt;</code>元素，就会运行<code>MyElement</code>的构造函数。</p>\n<p>注意，如果没有登记就使用 Custom Element，浏览器会认为这是一个不认识的元素，会当做空的 div 元素处理。</p>\n<p><code>window.customElements.define()</code>方法定义了 Custom Element 以后，可以使用<code>window.customeElements.get()</code>方法获取该元素的构造方法。这使得除了直接插入 HTML 网页，Custom Element 也能使用脚本插入网页。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'my-element'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> HTMLElement <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">el</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你想扩展现有的 HTML 元素（比如<code>&lt;button&gt;</code>）也是可以的。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GreetingElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLButtonElement</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>登记的时候，需要提供扩展的元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hey-there'</span><span class=\"token punctuation\">,</span> GreetingElement<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'button'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用的时候，为元素加上<code>is</code>属性就可以了。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hey-there<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>World<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Howdy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"生命周期方法\"><a href=\"#生命周期方法\" class=\"headerlink\" title=\"生命周期方法\"></a>生命周期方法</h3><p>Custom Element 提供一些生命周期方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// here the element has been inserted into the DOM</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>connectedCallback()</code>方法就是<code>MyElement</code>元素的生命周期方法。每次，该元素插入 DOM，就会自动执行该方法。</p>\n<ul>\n<li><code>connectedCallback()</code>：插入 DOM 时调用。这可能不止一次发生，比如元素被移除后又重新添加。类的设置应该尽量放到这个方法里面执行，因为这时各种属性和子元素都可用。</li>\n<li><code>disconnectedCallback()</code>：移出 DOM 时执行。</li>\n<li><code>attributeChangedCallback(attrName, oldVal, newVal)</code>：添加、删除、更新或替换属性时调用。元素创建或升级时，也会调用。注意：只有加入<code>observedAttributes</code>的属性才会执行这个方法。</li>\n<li><code>adoptedCallback()</code>：自定义元素移动到新的 document 时调用，比如执行<code>document.adoptNode(element)</code>时。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GreetingElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> <span class=\"token string\">'Stranger'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">attrName<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attrName <span class=\"token operator\">===</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> <span class=\"token string\">'Stranger'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nGreetingElement<span class=\"token punctuation\">.</span>observedAttributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hey-there'</span><span class=\"token punctuation\">,</span> GreetingElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>GreetingElement.observedAttributes</code>属性用来指定白名单里面的属性，上例是<code>name</code>属性。只要这个属性的值发生变化，就会自动调用<code>attributeChangedCallback</code>方法。</p>\n<p>使用上面这个类的方法如下。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hey-there</span><span class=\"token punctuation\">></span></span>Greeting<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>hey-there</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hey-there</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Potch<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Personalized Greeting<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>hey-there</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>attributeChangedCallback</code>方法主要用于外部传入的属性，就像上面例子中<code>name=&quot;Potch&quot;</code>。</p>\n<p>生命周期方法调用的顺序如下：<code>constructor</code> -&gt; <code>attributeChangedCallback</code> -&gt; <code>connectedCallback</code>，即<code>attributeChangedCallback</code>早于<code>connectedCallback</code>执行。这是因为<code>attributeChangedCallback</code>相当于调整配置，应该在插入 DOM 之前完成。</p>\n<p>下面的例子能够更明显地看出这一点，在插入 DOM 前修改 Custome Element 的颜色。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">attr<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">,</span> newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>attr <span class=\"token operator\">===</span> <span class=\"token string\">'disabled'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">'#808080'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">'#ffffff'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"自定义属性和方法\"><a href=\"#自定义属性和方法\" class=\"headerlink\" title=\"自定义属性和方法\"></a>自定义属性和方法</h3><p>Custom Element 允许自定义属性或方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// do something in this method</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>doSomething()</code>就是<code>MyElement</code>的自定义方法，使用方法如下。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>自定义属性可以使用 JavaScript class 的所有语法，因此也可以设置取值器和赋值器。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">disabled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isDisabled</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDisabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">disabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中的取值器和赋值器，可用于<code>&lt;my-input name=&quot;name&quot; disabled&gt;</code>这样的用法。</p>\n<h3 id=\"window-customElements-whenDefined\"><a href=\"#window-customElements-whenDefined\" class=\"headerlink\" title=\"window.customElements.whenDefined()\"></a>window.customElements.whenDefined()</h3><p><code>window.customElements.whenDefined()</code>方法在一个 Custom Element 被<code>customElements.define()</code>方法定义以后执行，用于“升级”一个元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">whenDefined</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-element'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// my-element is now defined</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果某个属性值发生变化时，需要做出反应，可以将它放入<code>observedAttributes</code>数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> shadowRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shadowRoot<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;style>\n        .disabled &#123;\n          opacity: 0.4;\n        &#125;\n      &lt;/style>\n\n      &lt;div id=\"container\">&lt;/div>\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">shadowRoot</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">attr<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">,</span> newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>attr <span class=\"token operator\">===</span> <span class=\"token string\">'disabled'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>disabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>自定义元素的原型有一些属性，用来指定回调函数，在特定事件发生时触发。</p>\n<ul>\n<li><strong>createdCallback</strong>：实例生成时触发</li>\n<li><strong>attachedCallback</strong>：实例插入HTML文档时触发</li>\n<li><strong>detachedCallback</strong>：实例从HTML文档移除时触发</li>\n<li>**attributeChangedCallback(attrName, oldVal, newVal)**：实例的属性发生改变时（添加、移除、更新）触发</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HTMLElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nproto<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createdCallback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'created'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'This is a my-demo element!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nproto<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">attachedCallback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'attached'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> XFoo <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">registerElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x-foo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>prototype<span class=\"token operator\">:</span> proto<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>利用回调函数，可以方便地在自定义元素中插入HTML语句。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">var</span> XFooProto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HTMLElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nXFooProto<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createdCallback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;b>I'm an x-foo-with-markup!&lt;/b>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> XFoo <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">registerElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x-foo-with-markup'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>prototype<span class=\"token operator\">:</span> XFooProto<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码定义了createdCallback回调函数，生成实例时，该函数运行，插入如下的HTML语句。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-foo-with-markup</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>I'm an x-foo-with-markup!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-foo-with-markup</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Custom-Element-的子元素\"><a href=\"#Custom-Element-的子元素\" class=\"headerlink\" title=\"Custom Element 的子元素\"></a>Custom Element 的子元素</h3><p>用户使用 Custom Element 时候，可以在内部放置子元素。Custom Element 提供<code>&lt;slot&gt;</code>用来引用内部内容。</p>\n<p>下面的<code>&lt;image-gallery&gt;</code>是一个 Custom Element。用户在里面放置了子元素。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image-gallery</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image-gallery</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;image-gallery&gt;</code>内部的模板如下。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最终合成的代码如下。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"lt-template-gt-标签\"><a href=\"#lt-template-gt-标签\" class=\"headerlink\" title=\"&lt;template&gt;标签\"></a><code>&lt;template&gt;</code>标签</h2><h3 id=\"基本用法-3\"><a href=\"#基本用法-3\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p><code>&lt;template&gt;</code>标签表示组件的 HTML 代码模板。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>This won't display!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this won't alert!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;template&gt;</code>内部就是正常的 HTML 代码，浏览器不会将这些代码加入 DOM。</p>\n<p>下面的代码会将模板内部的代码插入 DOM。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> template <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意，模板内部的代码只能插入一次，如果第二次执行上面的代码就会报错。</p>\n<p>如果需要多次插入模板，可以复制<code>&lt;template&gt;</code>内部代码，然后再插入。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，<code>cloneNode()</code>方法的参数<code>true</code>表示复制包含所有子节点。</p>\n<p>接受<code>&lt;template&gt;</code>插入的元素，叫做宿主元素（host）。在<code>&lt;template&gt;</code>之中，可以对宿主元素设置样式。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">:host</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #f8f8f8<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">:host(:hover)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #ccc<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"document-importNode\"><a href=\"#document-importNode\" class=\"headerlink\" title=\"document.importNode()\"></a>document.importNode()</h3><p>document.importNode方法用于克隆外部文档的DOM节点。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iframe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> oldNode <span class=\"token operator\">=</span> iframe<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myNode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>oldNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"container\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子是将iframe窗口之中的节点oldNode，克隆进入当前文档。</p>\n<p>注意，克隆节点之后，还必须用appendChild方法将其加入当前文档，否则不会显示。换个角度说，这意味着插入外部文档节点之前，必须用document.importNode方法先将这个节点准备好。</p>\n<p>document.importNode方法接受两个参数，第一个参数是外部文档的DOM节点，第二个参数是一个布尔值，表示是否连同子节点一起克隆，默认为false。大多数情况下，必须显式地将第二个参数设为true。</p>\n<h2 id=\"Shadow-DOM\"><a href=\"#Shadow-DOM\" class=\"headerlink\" title=\"Shadow DOM\"></a>Shadow DOM</h2><p>所谓 Shadow DOM 指的是，浏览器将模板、样式表、属性、JavaScript 码等，封装成一个独立的 DOM 元素。外部的设置无法影响到其内部，而内部的设置也不会影响到外部，与浏览器处理原生网页元素（比如<code>&lt;video&gt;</code>元素）的方式很像。</p>\n<p>Shadow DOM 最大的好处有两个，一是可以向用户隐藏细节，直接提供组件，二是可以封装内部样式表，不会影响到外部。</p>\n<p>Custom Element 内部有一个 Shadow Root。它就是接入外部 DOM 的根元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// attachShadow() creates a shadow root.</span>\n<span class=\"token keyword\">let</span> shadow <span class=\"token operator\">=</span> div<span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> inner <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninner<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hiding in the shadows'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// shadow root supports the normal appendChild method.</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>inner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// empty</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>&lt;div&gt;</code>包含<code>&lt;b&gt;</code>，但是 DOM 方法无法看到它，而且页面的样式也影响不到它。</p>\n<p><code>mode: &#39;open&#39;</code>表示开发者工具里面，可以看到 Custom HTML 内部的 DOM，并与之互动。<code>mode: closed</code>将不允许 Custom Element 的使用者与内部代码互动。</p>\n<p>Shadow root 内部通过指定<code>innerHTML</code>属性或使用<code>&lt;template&gt;</code>元素，指定 HTML 代码。</p>\n<p>Shadow DOM 内部可以通过向根添加<code>&lt;style&gt;</code>（或<code>&lt;link&gt;</code>）来设置样式。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstyle<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'b &#123; font-weight: bolder; color: red; &#125;'</span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> inner <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninner<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm bolder in the shadows\"</span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>inner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码添加的样式，只会影响 Shadow DOM 内的元素。</p>\n<p>Custom Element 的 CSS 样式内部，<code>:root</code>表示这个根元素。比如，Custom Element 默认是行内元素，下面代码可以改成块级元素。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">:host</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">:host([disabled])</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.5<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，外部样式会覆盖掉<code>:host</code>的设置，比如下面的样式会覆盖<code>:host</code>。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">my-element</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>利用 CSS 的自定义属性，可以为 Custom Element 可以被覆盖的默认样式。下面是外部样式，<code>my-element</code>是 Custom Element。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">my-element</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">--background-color</span><span class=\"token punctuation\">:</span> #ff0000<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，内部可以指定默认样式，用于用户没有指定颜色的情况。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">:host</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">--background-color</span><span class=\"token punctuation\">:</span> #ffffff<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">#container</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--background-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面的例子是为 Shadow DOM 加上独立的模板。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nameTag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>张三<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nameTagTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">.outer</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 2px solid brown<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>boilerplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      Hi! My name is\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      Bob\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码是一个<code>div</code>元素和模板。接下来，就是要把模板应用到<code>div</code>元素上。</p>\n<h2 id=\"HTML-Import\"><a href=\"#HTML-Import\" class=\"headerlink\" title=\"HTML Import\"></a>HTML Import</h2><h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p>长久以来，网页可以加载外部的样式表、脚本、图片、多媒体，却无法方便地加载其他网页，iframe和ajax都只能提供部分的解决方案，且有很大的局限。HTML Import就是为了解决加载外部网页这个问题，而提出来的。</p>\n<p>下面代码用于测试当前浏览器是否支持HTML Import。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">supportsImports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'import'</span> <span class=\"token keyword\">in</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">supportsImports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 支持</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 不支持</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>HTML Import用于将外部的HTML文档加载进当前文档。我们可以将组件的HTML、CSS、JavaScript封装在一个文件里，然后使用下面的代码插入需要使用该组件的网页。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>import<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dialog.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码在网页中插入一个对话框组件，该组建封装在<code>dialog.html</code>文件。注意，dialog.html文件中的样式和JavaScript脚本，都对所插入的整个网页有效。</p>\n<p>假定A网页通过HTML Import加载了B网页，即B是一个组件，那么B网页的样式表和脚本，对A网页也有效（准确得说，只有style标签中的样式对A网页有效，link标签加载的样式表对A网页无效）。所以可以把多个样式表和脚本，都放在B网页中，都从那里加载。这对大型的框架，是很方便的加载方法。</p>\n<p>如果B与A不在同一个域，那么A所在的域必须打开CORS。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token comment\">&lt;!-- example.com必须打开CORS --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>import<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://example.com/elements.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>除了用link标签，也可以用JavaScript调用link元素，完成HTML Import。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">var</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlink<span class=\"token punctuation\">.</span>rel <span class=\"token operator\">=</span> <span class=\"token string\">'import'</span><span class=\"token punctuation\">;</span>\nlink<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'file.html'</span>\nlink<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nlink<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>HTML Import加载成功时，会在link元素上触发load事件，加载失败时（比如404错误）会触发error事件，可以对这两个事件指定回调函数。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleLoad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Loaded import: '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error loading import: '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>import<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file.html<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleLoad(event)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onerror</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleError(event)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，handleLoad和handleError函数的定义，必须在link元素的前面。因为浏览器元素遇到link元素时，立刻解析并加载外部网页（同步操作），如果这时没有对这两个函数定义，就会报错。</p>\n<p>HTML Import是同步加载，会阻塞当前网页的渲染，这主要是为了样式表的考虑，因为外部网页的样式表对当前网页也有效。如果想避免这一点，可以为link元素加上async属性。当然，这也意味着，如果外部网页定义了组件，就不能立即使用了，必须等HTML Import完成，才能使用。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>import<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/path/to/import_that_takes_5secs.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>但是，HTML Import不会阻塞当前网页的解析和脚本执行（即阻塞渲染）。这意味着在加载的同时，主页面的脚本会继续执行。</p>\n<p>最后，HTML Import支持多重加载，即被加载的网页同时又加载其他网页。如果这些网页都重复加载同一个外部脚本，浏览器只会抓取并执行一次该脚本。比如，A网页加载了B网页，它们各自都需要加载jQuery，浏览器只会加载一次jQuery。</p>\n<h3 id=\"脚本的执行\"><a href=\"#脚本的执行\" class=\"headerlink\" title=\"脚本的执行\"></a>脚本的执行</h3><p>外部网页的内容，并不会自动显示在当前网页中，它只是储存在浏览器中，等到被调用的时候才加载进入当前网页。为了加载网页网页，必须用DOM操作获取加载的内容。具体来说，就是使用link元素的import属性，来获取加载的内容。这一点与iframe完全不同。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">var</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link[rel=\"import\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>import<span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>发生以下情况时，link.import属性为null。</p>\n<ul>\n<li>浏览器不支持HTML Import</li>\n<li>link元素没有声明<code>rel=&quot;import&quot;</code></li>\n<li>link元素没有被加入DOM</li>\n<li>link元素已经从DOM中移除</li>\n<li>对方域名没有打开CORS</li>\n</ul>\n<p>下面代码用于从加载的外部网页选取id为template的元素，然后将其克隆后加入当前网页的DOM。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> linkElement<span class=\"token punctuation\">.</span>import<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当前网页可以获取外部网页，反过来也一样，外部网页中的脚本，不仅可以获取本身的DOM，还可以获取link元素所在的当前网页的DOM。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// 以下代码位于被加载（import）的外部网页</span>\n\n<span class=\"token comment\">// importDoc指向被加载的DOM</span>\n<span class=\"token keyword\">var</span> importDoc <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>currentScript<span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// mainDoc指向主文档的DOM</span>\n<span class=\"token keyword\">var</span> mainDoc <span class=\"token operator\">=</span> document<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 将子页面的样式表添加主文档</span>\n<span class=\"token keyword\">var</span> styles <span class=\"token operator\">=</span> importDoc<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link[rel=\"stylesheet\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmainDoc<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码将所加载的外部网页的样式表，添加进当前网页。</p>\n<p>被加载的外部网页的脚本是直接在当前网页的上下文执行，因为它的<code>window.document</code>指的是当前网页的document，而且它定义的函数可以被当前网页的脚本直接引用。</p>\n<h3 id=\"Web-Component的封装\"><a href=\"#Web-Component的封装\" class=\"headerlink\" title=\"Web Component的封装\"></a>Web Component的封装</h3><p>对于Web Component来说，HTML Import的一个重要应用是在所加载的网页中，自动登记Custom Element。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token comment\">// 定义并登记&lt;say-hi></span>\n  <span class=\"token keyword\">var</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HTMLElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  proto<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createdCallback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'Hello, &lt;b>'</span> <span class=\"token operator\">+</span>\n                     <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/b>'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">registerElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'say-hi'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>prototype<span class=\"token operator\">:</span> proto<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">::content > *</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>I'm a shadow-element using Shadow DOM!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>content</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>content</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> importDoc <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>currentScript<span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">;</span> <span class=\"token comment\">//指向被加载的网页</span>\n\n    <span class=\"token comment\">// 定义并登记&lt;shadow-element></span>\n    <span class=\"token keyword\">var</span> proto2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HTMLElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    proto2<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createdCallback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">var</span> template <span class=\"token operator\">=</span> importDoc<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> clone <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createShadowRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      root<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>clone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">registerElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shadow-element'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>prototype<span class=\"token operator\">:</span> proto2<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码定义并登记了两个元素：&lt;say-hi&gt;和&lt;shadow-element&gt;。在主页面使用这两个元素，非常简单。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>import<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>elements.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>say-hi</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Eric<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>say-hi</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>shadow-element</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>( I'm in the light dom )<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>shadow-element</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不难想到，这意味着HTML Import使得Web Component变得可分享了，其他人只要拷贝<code>elements.html</code>，就可以在自己的页面中使用了。</p>\n<h2 id=\"Polymer-js\"><a href=\"#Polymer-js\" class=\"headerlink\" title=\"Polymer.js\"></a>Polymer.js</h2><p>Web Components是非常新的技术，为了让老式浏览器也能使用，Google推出了一个函数库<a href=\"http://www.polymer-project.org/\">Polymer.js</a>。这个库不仅可以帮助开发者，定义自己的网页元素，还提供许多预先制作好的组件，可以直接使用。</p>\n<h3 id=\"直接使用的组件\"><a href=\"#直接使用的组件\" class=\"headerlink\" title=\"直接使用的组件\"></a>直接使用的组件</h3><p>Polymer.js提供的组件，可以直接插入网页，比如下面的google-map。。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>components/platform/platform.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>import<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>google-map.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>google-map</span> <span class=\"token attr-name\">lat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>37.790<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">long</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-122.390<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>google-map</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>再比如，在网页中插入一个时钟，可以直接使用下面的标签。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>polymer-ui-clock</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>polymer-ui-clock</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>自定义标签与其他标签的用法完全相同，也可以使用CSS指定它的样式。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">\n<span class=\"token selector\">polymer-ui-clock</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 320px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 320px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"../assets/glass.png\"</span><span class=\"token punctuation\">)</span></span> no-repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 4px solid <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>32<span class=\"token punctuation\">,</span> 32<span class=\"token punctuation\">,</span> 32<span class=\"token punctuation\">,</span> 0.3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>如果使用bower安装，至少需要安装platform和core components这两个核心部分。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\nbower <span class=\"token function\">install</span> --save Polymer/platform\nbower <span class=\"token function\">install</span> --save Polymer/polymer\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>你还可以安装所有预先定义的界面组件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\nbower <span class=\"token function\">install</span> Polymer/core-elements\nbower <span class=\"token function\">install</span> Polymer/polymer-ui-elements\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>还可以只安装单个组件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\nbower <span class=\"token function\">install</span> Polymer/polymer-ui-accordion\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这时，组件根目录下的bower.json，会指明该组件的依赖的模块，这些模块会被自动安装。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"polymer-ui-accordion\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"polymer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Polymer/polymer#0.2.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"polymer-selector\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Polymer/polymer-selector#0.2.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"polymer-ui-collapsible\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Polymer/polymer-ui-collapsible#0.2.0\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"自定义组件\"><a href=\"#自定义组件\" class=\"headerlink\" title=\"自定义组件\"></a>自定义组件</h3><p>下面是一个最简单的自定义组件的例子。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>import<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../bower_components/polymer/polymer.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>polymer-element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lorem-element<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>polymer-element</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码定义了lorem-element组件。它分成三个部分。</p>\n<p><strong>（1）import命令</strong></p>\n<p>import命令表示载入核心模块</p>\n<p><strong>（2）polymer-element标签</strong></p>\n<p>polymer-element标签定义了组件的名称（注意，组件名称中必须包含连字符）。它还可以使用extends属性，表示组件基于某种网页元素。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>polymer-element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>w3c-disclosure<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">extends</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>（3）template标签</strong></p>\n<p>template标签定义了网页元素的模板。</p>\n<h3 id=\"组件的使用方法\"><a href=\"#组件的使用方法\" class=\"headerlink\" title=\"组件的使用方法\"></a>组件的使用方法</h3><p>在调用组件的网页中，首先加载polymer.js库和组件文件。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>components/platform/platform.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>import<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>w3c-disclosure.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，分成两种情况。如果组件不基于任何现有的HTML网页元素（即定义的时候没有使用extends属性），则可以直接使用组件。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>lorem-element</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>lorem-element</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这时网页上就会显示一行字“Lorem ipsum”。</p>\n<p>如果组件是基于（extends）现有的网页元素，则必须在该种元素上使用is属性指定组件。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n&lt;button is&#x3D;&quot;w3c-disclosure&quot;&gt;Expand section 1&lt;&#x2F;button&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考链接-12\"><a href=\"#参考链接-12\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://hacks.mozilla.org/2018/11/the-power-of-web-components/\">The Power of Web Components</a>, Potch</li>\n<li>Todd Motto, <a href=\"http://toddmotto.com/web-components-concepts-shadow-dom-imports-templates-custom-elements/\">Web Components and concepts, ShadowDOM, imports, templates, custom elements</a></li>\n<li>Dominic Cooney, <a href=\"http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/\">Shadow DOM 101</a></li>\n<li>Eric Bidelman, <a href=\"http://www.html5rocks.com/en/tutorials/webcomponents/template/\">HTML’s New Template Tag</a></li>\n<li>Rey Bango, <a href=\"http://code.tutsplus.com/tutorials/using-polymer-to-create-web-components--cms-20475\">Using Polymer to Create Web Components</a></li>\n<li>Cédric Trévisan, Building an Accessible Disclosure Button – using Web Components](<a href=\"http://blog.paciellogroup.com/2014/06/accessible-disclosure-button-using-web-components/\">http://blog.paciellogroup.com/2014/06/accessible-disclosure-button-using-web-components/</a>)</li>\n<li>Eric Bidelman, <a href=\"http://www.html5rocks.com/en/tutorials/webcomponents/customelements/\">Custom Elements: defining new elements in HTML</a></li>\n<li>Eric Bidelman, <a href=\"http://www.html5rocks.com/en/tutorials/webcomponents/imports/\">HTML Imports</a></li>\n<li>TJ VanToll, <a href=\"http://developer.telerik.com/featured/web-components-ready-production/\">Why Web Components Are Ready For Production</a></li>\n<li>Chris Bateman, <a href=\"http://cbateman.com/blog/a-no-nonsense-guide-to-web-components-part-1-the-specs/\">A No-Nonsense Guide to Web Components, Part 1: The Specs</a></li>\n<li><a href=\"https://blog.usejournal.com/web-components-will-replace-your-frontend-framework-3b17a580831c\">Web Components will replace your frontend framework</a>, Danny Moerkerke</li>\n<li><a href=\"https://developers.google.com/web/fundamentals/web-components/customelements#extend\">Custom Elements v1: Reusable Web Components</a>, Eric Bidelman</li>\n</ul>\n<h1 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h1><p>WebSocket 是一种网络通信协议，很多高级功能都需要它。</p>\n<p>初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？</p>\n<p>答案很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起。举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。HTTP 协议的这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用“轮询”：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。</p>\n<p>轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。</p>\n<h2 id=\"简介-5\"><a href=\"#简介-5\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。</p>\n<p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。WebSocket 允许服务器端与客户端进行全双工（full-duplex）的通信。举例来说，HTTP 协议有点像发电子邮件，发出后必须等待对方回信；WebSocket 则是像打电话，服务器端和客户端可以同时向对方发送数据，它们之间存着一条持续打开的数据通道。</p>\n<p>其他特点包括：</p>\n<p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p>\n<p>（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p>\n<p>（3）数据格式比较轻量，性能开销小，通信高效。</p>\n<p>（4）可以发送文本，也可以发送二进制数据。</p>\n<p>（5）没有同源限制，客户端可以与任意服务器通信，完全可以取代 Ajax。</p>\n<p>（6）协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>，对应 HTTPS 协议），服务器网址就是 URL。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">ws://example.com:80/some/path<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"WebSocket-握手\"><a href=\"#WebSocket-握手\" class=\"headerlink\" title=\"WebSocket 握手\"></a>WebSocket 握手</h2><p>浏览器发出的 WebSocket 握手请求类似于下面的样子：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">GET / HTTP/1.1\n<span class=\"token header-name keyword\">Connection:</span> Upgrade\n<span class=\"token header-name keyword\">Upgrade:</span> websocket\n<span class=\"token header-name keyword\">Host:</span> example.com\n<span class=\"token header-name keyword\">Origin:</span> null\n<span class=\"token header-name keyword\">Sec-WebSocket-Key:</span> sN9cRrP/n9NdMgdcy2VJFQ==\n<span class=\"token header-name keyword\">Sec-WebSocket-Version:</span> 13<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的头信息之中，有一个 HTTP 头是<code>Upgrade</code>。HTTP1.1 协议规定，<code>Upgrade</code>字段表示将通信协议从<code>HTTP/1.1</code>转向该字段指定的协议。<code>Connection</code>字段表示浏览器通知服务器，如果可以的话，就升级到 WebSocket 协议。<code>Origin</code>字段用于提供请求发出的域名，供服务器验证是否许可的范围内（服务器也可以不验证）。<code>Sec-WebSocket-Key</code>则是用于握手协议的密钥，是 Base64 编码的16字节随机字符串。</p>\n<p>服务器的 WebSocket 回应如下。</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token response-status\">HTTP/1.1 <span class=\"token property\">101 Switching Protocols</span></span>\n<span class=\"token header-name keyword\">Connection:</span> Upgrade\n<span class=\"token header-name keyword\">Upgrade:</span> websocket\n<span class=\"token header-name keyword\">Sec-WebSocket-Accept:</span> fFBooB7FAkLlXgRSz0BT3v4hq5s=\n<span class=\"token header-name keyword\">Sec-WebSocket-Origin:</span> null\n<span class=\"token header-name keyword\">Sec-WebSocket-Location:</span> ws://example.com/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，服务器同样用<code>Connection</code>字段通知浏览器，需要改变协议。<code>Sec-WebSocket-Accept</code>字段是服务器在浏览器提供的<code>Sec-WebSocket-Key</code>字符串后面，添加 <a href=\"http://tools.ietf.org/html/rfc6455\">RFC6456</a> 标准规定的“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”字符串，然后再取 SHA-1 的哈希值。浏览器将对这个值进行验证，以证明确实是目标服务器回应了 WebSocket 请求。<code>Sec-WebSocket-Location</code>字段表示进行通信的 WebSocket 网址。</p>\n<p>完成握手以后，WebSocket 协议就在 TCP 协议之上，开始传送数据。</p>\n<h2 id=\"客户端的简单示例\"><a href=\"#客户端的简单示例\" class=\"headerlink\" title=\"客户端的简单示例\"></a>客户端的简单示例</h2><p>WebSocket 的用法相当简单。</p>\n<p>下面是一个网页脚本的例子，基本上一眼就能明白。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wss://echo.websocket.org'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Connection open ...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello WebSockets!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Received Message: '</span> <span class=\"token operator\">+</span> evt<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ws<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclose</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Connection closed.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"客户端-API-1\"><a href=\"#客户端-API-1\" class=\"headerlink\" title=\"客户端 API\"></a>客户端 API</h2><p>浏览器对 WebSocket 协议的处理，无非就是三件事。</p>\n<ul>\n<li>建立连接和断开连接</li>\n<li>发送数据和接收数据</li>\n<li>处理错误</li>\n</ul>\n<h3 id=\"构造函数-WebSocket\"><a href=\"#构造函数-WebSocket\" class=\"headerlink\" title=\"构造函数 WebSocket\"></a>构造函数 WebSocket</h3><p><code>WebSocket</code>对象作为一个构造函数，用于新建<code>WebSocket</code>实例。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:8080'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行上面语句之后，客户端就会与服务器进行连接。</p>\n<h3 id=\"webSocket-readyState\"><a href=\"#webSocket-readyState\" class=\"headerlink\" title=\"webSocket.readyState\"></a>webSocket.readyState</h3><p><code>readyState</code>属性返回实例对象的当前状态，共有四种。</p>\n<ul>\n<li>CONNECTING：值为0，表示正在连接。</li>\n<li>OPEN：值为1，表示连接成功，可以通信了。</li>\n<li>CLOSING：值为2，表示连接正在关闭。</li>\n<li>CLOSED：值为3，表示连接已经关闭，或者打开连接失败。</li>\n</ul>\n<p>下面是一个示例。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ws<span class=\"token punctuation\">.</span>readyState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">case</span> WebSocket<span class=\"token punctuation\">.</span><span class=\"token constant\">CONNECTING</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// do something</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> WebSocket<span class=\"token punctuation\">.</span><span class=\"token constant\">OPEN</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// do something</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> WebSocket<span class=\"token punctuation\">.</span><span class=\"token constant\">CLOSING</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// do something</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> WebSocket<span class=\"token punctuation\">.</span><span class=\"token constant\">CLOSED</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// do something</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// this never happens</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"webSocket-onopen\"><a href=\"#webSocket-onopen\" class=\"headerlink\" title=\"webSocket.onopen\"></a>webSocket.onopen</h3><p>实例对象的<code>onopen</code>属性，用于指定连接成功后的回调函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello Server!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果要指定多个回调函数，可以使用<code>addEventListener</code>方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ws<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello Server!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"webSocket-onclose\"><a href=\"#webSocket-onclose\" class=\"headerlink\" title=\"webSocket.onclose\"></a>webSocket.onclose</h3><p>实例对象的<code>onclose</code>属性，用于指定连接关闭后的回调函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclose</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> code <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> reason <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> wasClean <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>wasClean<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// handle close event</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nws<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> code <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> reason <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> wasClean <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>wasClean<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// handle close event</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"webSocket-onmessage\"><a href=\"#webSocket-onmessage\" class=\"headerlink\" title=\"webSocket.onmessage\"></a>webSocket.onmessage</h3><p>实例对象的<code>onmessage</code>属性，用于指定收到服务器数据后的回调函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 处理数据</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nws<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 处理数据</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，服务器数据可能是文本，也可能是二进制数据（<code>blob</code>对象或<code>Arraybuffer</code>对象）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>typeOf event<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received data string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received arraybuffer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>除了动态判断收到的数据类型，也可以使用<code>binaryType</code>属性，显式指定收到的二进制数据类型。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 收到的是 blob 数据</span>\nws<span class=\"token punctuation\">.</span>binaryType <span class=\"token operator\">=</span> <span class=\"token string\">\"blob\"</span><span class=\"token punctuation\">;</span>\nws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 收到的是 ArrayBuffer 数据</span>\nws<span class=\"token punctuation\">.</span>binaryType <span class=\"token operator\">=</span> <span class=\"token string\">\"arraybuffer\"</span><span class=\"token punctuation\">;</span>\nws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"webSocket-send\"><a href=\"#webSocket-send\" class=\"headerlink\" title=\"webSocket.send()\"></a>webSocket.send()</h3><p>实例对象的<code>send()</code>方法用于向服务器发送数据。</p>\n<p>发送文本的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'your message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>发送 Blob 对象的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> file <span class=\"token operator\">=</span> document\n  <span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[type=\"file\"]'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>发送 ArrayBuffer 对象的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Sending canvas ImageData as ArrayBuffer</span>\n<span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> canvas_context<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">320</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> binary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> img<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  binary<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"webSocket-bufferedAmount\"><a href=\"#webSocket-bufferedAmount\" class=\"headerlink\" title=\"webSocket.bufferedAmount\"></a>webSocket.bufferedAmount</h3><p>实例对象的<code>bufferedAmount</code>属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>bufferedAmount <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 发送完毕</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 发送还没结束</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"webSocket-onerror\"><a href=\"#webSocket-onerror\" class=\"headerlink\" title=\"webSocket.onerror\"></a>webSocket.onerror</h3><p>实例对象的<code>onerror</code>属性，用于指定报错时的回调函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">socket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// handle error event</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// handle error event</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"WebSocket-服务器\"><a href=\"#WebSocket-服务器\" class=\"headerlink\" title=\"WebSocket 服务器\"></a>WebSocket 服务器</h2><p>WebSocket 协议需要服务器支持。各种服务器的实现，可以查看维基百科的<a href=\"https://en.wikipedia.org/wiki/Comparison_of_WebSocket_implementations\">列表</a>。</p>\n<p>常用的 Node 实现有以下三种。</p>\n<ul>\n<li><a href=\"https://github.com/uWebSockets/uWebSockets\">µWebSockets</a></li>\n<li><a href=\"http://socket.io/\">Socket.IO</a></li>\n<li><a href=\"https://github.com/theturtle32/WebSocket-Node\">WebSocket-Node</a></li>\n</ul>\n<p>具体的用法请查看它们的文档，本教程不详细介绍了。</p>\n<h2 id=\"参考链接-13\"><a href=\"#参考链接-13\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li>Ryan Stewart, <a href=\"http://www.adobe.com/devnet/html5/articles/real-time-data-exchange-in-html5-with-websockets.html\">Real-time data exchange in HTML5 with WebSockets</a></li>\n<li>Malte Ubl &amp; Eiji Kitamura，<a href=\"https://www.html5rocks.com/en/tutorials/websockets/basics/\">Introducing WebSockets: Bringing Sockets to the Web</a></li>\n<li>Jack Lawson, <a href=\"http://buildnewgames.com/websockets/\">WebSockets: A Guide</a></li>\n<li>Michael W., <a href=\"http://codular.com/node-web-sockets\">Starting with Node and Web Sockets</a></li>\n<li>Jesse Cravens, <a href=\"http://tech.pro/tutorial/1167/introduction-to-websockets\">Introduction to WebSockets</a></li>\n<li>Matt West, <a href=\"http://blog.teamtreehouse.com/an-introduction-to-websockets\">An Introduction to WebSockets</a></li>\n<li>Maciej Sopyło, <a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/node-js-better-performance-with-socket-io-and-dot/\">Node.js: Better Performance With Socket.IO and doT</a></li>\n<li>Jos Dirksen, <a href=\"http://www.smartjava.org/content/capture-canvas-and-webgl-output-video-using-websockets\">Capture Canvas and WebGL output as video using websockets</a></li>\n<li>Fionn Kellehe, <a href=\"https://nodesource.com/blog/understanding-socketio\">Understanding Socket.IO</a></li>\n<li><a href=\"http://cjihrig.com/blog/how-to-use-websockets/\">How to Use WebSockets</a></li>\n<li><a href=\"https://www.tutorialspoint.com/websockets/websockets_send_receive_messages.htm\">WebSockets - Send &amp; Receive Messages</a></li>\n</ul>\n","categories":["Web","JavaScript"],"tags":["Web","JavaScript"]},{"title":"C 语言——教程 && 自查文档","url":"/2021/10/11/C%20%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/","content":"<h1 id=\"C-语言简介\"><a href=\"#C-语言简介\" class=\"headerlink\" title=\"C 语言简介\"></a>C 语言简介</h1><h2 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h2><p>C 语言最初是作为 Unix 系统的开发工具而发明的。</p>\n<p>1969年，美国贝尔实验室的肯·汤普森（Ken Thompson）与丹尼斯·里奇（Dennis Ritchie）一起开发了 Unix 操作系统。Unix 是用汇编语言写的，无法移植到其他计算机，他们决定使用高级语言重写。但是，当时的高级语言无法满足他们的要求，汤普森就在 BCPL 语言的基础上发明了 B 语言。</p>\n<p>1972年，丹尼斯·里奇和布莱恩·柯林汉（Brian Kernighan）又在 B 语言的基础上重新设计了一种新语言，这种新语言取代了 B 语言，所以称为 C 语言。</p>\n<a id=\"more\"></a>\n\n<p>1973年，整个 Unix 系统都使用 C 语言重写。此后，这种语言开始快速流传，广泛用于各种操作系统和系统软件的开发。</p>\n<p>1988年，美国国家标准协会（ANSI）正式将 C 语言标准化，标志着 C 语言开始稳定和规范化。</p>\n<p>几十年后的今天，C 语言依然是最广泛使用、最流行的系统编程语言之一，Unix 和 Linux 系统现在还是使用 C 语言开发。</p>\n<h2 id=\"C-语言的特点\"><a href=\"#C-语言的特点\" class=\"headerlink\" title=\"C 语言的特点\"></a>C 语言的特点</h2><p>C 语言能够长盛不衰、广泛应用，主要原因是它有一些鲜明的特点。</p>\n<p>（1）低级语言</p>\n<p>C 语言能够直接操作硬件、管理内存、跟操作系统对话，这使得它是一种非常接近底层的语言，也就是低级语言，非常适合写需要跟硬件交互、有极高性能要求的程序。</p>\n<p>（2）可移植性</p>\n<p>C 语言的原始设计目的，是将 Unix 系统移植到其他计算机架构。这使得它从一开始就非常注重可移植性，C 程序可以相对简单地移植到各种硬件架构和操作系统。</p>\n<p>除了计算机，C 语言现在还是嵌入式系统的首选编程语言，汽车、照相机、家用电器等设备的底层系统都是用 C 语言编程，这也是因为它良好的可移植性。</p>\n<p>（3）简单性</p>\n<p>C 语言的语法相对简单，语法规则不算太多，也几乎没有语法糖。一般来说，如果两个语法可以完成几乎相同的事情，C 语言就只会提供一种，这样大大减少了语言的复杂性。</p>\n<p>而且，C 语言的语法都是基础语法，不提供高级的数据结构，比如 C 语言没有“类”（class），复杂的数据结构都需要自己构造。</p>\n<p>（4）灵活性</p>\n<p>C 语言对程序员的限制很少。它假设程序员知道自己在干嘛，不会限制你做各种危险的操作，你干什么都可以，后果也由自己负责。</p>\n<p>C 语言的哲学是“信任程序员，不要妨碍他们做事”。比如，它让程序员自己管理内存，不提供内存自动清理功能。另外，也不提供类型检查、数组的负索引检查、指针位置的检查等保护措施。</p>\n<p>表面上看，这似乎很危险，但是对于高级程序员来说，却有了更大的编程自由。不过，这也使得 C 语言的 debug 不太容易。</p>\n<p>（5）总结</p>\n<p>上面这些特点，使得 C 语言可以写出性能非常强、完全发挥硬件潜力的程序，而且 C 语言的编译器实现难度相对较低。但是另一方面，C 语言代码容易出错，一般程序员不容易写好。</p>\n<p>此外，当代很多流行语言都是以 C 语言为基础，比如 C++、Java、C#、JavaScript 等等。学好 C 语言有助于对这些语言加深理解。</p>\n<h2 id=\"C-语言的版本\"><a href=\"#C-语言的版本\" class=\"headerlink\" title=\"C 语言的版本\"></a>C 语言的版本</h2><p>历史上，C 语言有过多个版本。</p>\n<p>（1）K＆R C</p>\n<p><code>K&amp;R C</code>指的是 C 语言的原始版本。1978年，C 语言的发明者丹尼斯·里奇（Dennis Ritchie）和布莱恩·柯林（Brian Kernighan）合写了一本著名的教材《C 编程语言》（The C programming language）。由于 C 语言还没有成文的语法标准，这本书就成了公认标准，以两位作者的姓氏首字母作为版本简称“K&amp;R C”。</p>\n<p>（2）ANSI C（又称 C89 或 C90）</p>\n<p>C 语言的原始版本非常简单，对很多情况的描述非常模糊，加上 C 语法依然在快速发展，要求将 C 语言标准化的呼声越来越高。</p>\n<p>1989年，美国国家标准协会（ANSI）制定了一套 C 语言标准。1990年，国际标准化组织（ISO）通过了这个标准。它被称为“ANSI C”，也可以按照发布年份，称为“C89 或 C90”。</p>\n<p>（3）C95</p>\n<p>1995年，美国国家标准协会对1989年的那个标准，进行了补充，加入多字节字符和宽字符的支持。这个版本称为 C95。</p>\n<p>（4）C99</p>\n<p>C 语言标准的第一次大型修订，发生在1999年，增加了许多语言特性，比如双斜杠（<code>//</code>）的注释语法。这个版本称为 C99，是目前最流行的 C 版本。</p>\n<p>（5）C11</p>\n<p>2011年，标准化组织再一次对 C 语言进行修订，增加了 Unicode 和多线程的支持。这个版本称为 C11。</p>\n<p>（6）C17</p>\n<p>C11 标准在2017年进行了修补，但发布是在2018年。新版本只是解决了 C11 的一些缺陷，没有引入任何新功能。这个版本称为 C17。</p>\n<p>（7）C2x</p>\n<p>标准化组织正在讨论 C 语言的下一个版本，据说可能会在2023年通过，到时就会称为 C23。</p>\n<h2 id=\"C-语言的编译\"><a href=\"#C-语言的编译\" class=\"headerlink\" title=\"C 语言的编译\"></a>C 语言的编译</h2><p>C 语言是一种编译型语言，源码都是文本文件，本身无法执行。必须通过编译器，生成二进制的可执行文件，才能执行。编译器将代码从文本翻译成二进制指令的过程，就称为编译阶段，又称为“编译时”（compile time），跟运行阶段（又称为“运行时”）相区分。</p>\n<p>目前，最常见的 C 语言编译器是自由软件基金会推出的 GCC 编译器，它可以免费使用。本书也使用这个编译器。Linux 和 Mac 系统可以直接安装 GCC，Windows 系统可以安装 MinGW。但是，也可以不用这么麻烦，网上有在线编译器，能够直接在网页上模拟运行 C 代码，查看结果，下面就是两个这样的工具。</p>\n<ul>\n<li>CodingGround: <a href=\"https://tutorialspoint.com/compile_c_online.php\">https://tutorialspoint.com/compile_c_online.php</a></li>\n<li>OnlineGDB: <a href=\"https://onlinegdb.com/online_c_compiler\">https://onlinegdb.com/online_c_compiler</a></li>\n</ul>\n<p>本书的例子都使用 GCC 在命令行进行编译。</p>\n<h2 id=\"Hello-World-示例\"><a href=\"#Hello-World-示例\" class=\"headerlink\" title=\"Hello World 示例\"></a>Hello World 示例</h2><p>C 语言的源代码文件，通常以后缀名<code>.c</code>结尾。下面是一个简单的 C 程序<code>hello.c</code>。它就是一个普通的文本文件，任何文本编译器都能用来写。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面这个程序的唯一作用，就是在屏幕上面显示“Hello World”。</p>\n<p>这里不讲解这些代码是什么意思，只是作为一个例子，让大家看看 C 代码应该怎么编译和运行。假设你已经安装好了 GCC 编译器，可以打开命令行，执行下面的命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ gcc hello.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令使用<code>gcc</code>编译器，将源文件<code>hello.c</code>编译成二进制代码。注意，<code>$</code>是命令行提示符，你真正需要输入的是<code>$</code>后面的部分。</p>\n<p>运行这个命令以后，默认会在当前目录下生成一个编译产物文件<code>a.out</code>（assembler output 的缩写）。执行该文件，就会在屏幕上输出<code>Hello World</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./a.out\nHello World<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>GCC 的<code>-o</code>参数可以指定编译产物的文件名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ gcc -o hello hello.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令的<code>-o hello</code>指定，编译产物的文件名为<code>hello</code>（取代<code>a.out</code>）。编译后就会生成一个名叫<code>hello</code>的可执行文件，相当于为<code>a.out</code>指定了名称。执行该文件，也会得到同样的结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./hello\nHello World<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>GCC 的<code>-std=</code>参数还可以指定按照哪个 C 语言的标准进行编译。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ gcc -std<span class=\"token operator\">=</span>c99 hello.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令指定按照 C99 标准进行编译。</p>\n<h1 id=\"C-语言基本语法\"><a href=\"#C-语言基本语法\" class=\"headerlink\" title=\"C 语言基本语法\"></a>C 语言基本语法</h1><h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h2><p>C 语言的代码由一行行语句（statement）组成。语句就是程序执行的一个操作命令。C 语言规定，语句必须使用分号结尾，除非有明确规定可以不写分号。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面就是一个变量声明语句，声明整数变量<code>x</code>，并且将值设为<code>1</code>。</p>\n<!-- more -->\n\n<p>多个语句可以写在一行。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例是两个语句写在一行。所以，语句之间的换行符并不是必需的，只是为了方便阅读代码。</p>\n<p>一个语句也可以写成多行，这时就要依靠分号判断语句在哪一行结束。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\nx\n<span class=\"token operator\">=</span>\n<span class=\"token number\">1</span>\n<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，第二个语句<code>x = 1;</code>被拆成了四行。编译器会自动忽略代码里面的换行。</p>\n<p>单个分号也是有效语句，称为“空语句”，虽然毫无作用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>C 语言的各种计算，主要通过表达式完成。表达式（expression）是一个计算式，用来获取值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码就是一个表达式，用来获取<code>1 + 2</code>这个算术计算的结果。</p>\n<p>表达式加上分号，也可以成为语句，但是没有实际的作用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例是两个表达式，加上分号以后成为语句。</p>\n<p>表达式与语句的区别主要是两点：</p>\n<ul>\n<li>语句可以包含表达式，但是表达式本身不构成语句。</li>\n<li>表达式都有返回值，语句不一定有。因为语句用来执行某个命令，很多时候不需要返回值，比如变量声明语句（<code>int x = 1</code>）就没有返回值。</li>\n</ul>\n<h2 id=\"语句块\"><a href=\"#语句块\" class=\"headerlink\" title=\"语句块\"></a>语句块</h2><p>C 语言允许多个语句使用一对大括号<code>&#123;&#125;</code>，组成一个块，也称为复合语句（compounded statement）。在语法上，语句块可以视为多个语句组成的一个复合语句。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，大括号形成了一个语句块。</p>\n<p>大括号的结尾不需要添加分号。</p>\n<h2 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h2><p>C 语言里面的空格，主要用来帮助编译器区分语法单位。如果语法单位不用空格就能区分，空格就不是必须的，只是为了增加代码的可读性。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，赋值号（<code>=</code>）前后有没有空格都可以，因为编译器这里不借助空格，就能区分语法单位。</p>\n<p>语法单位之间的多个空格，等同于单个空格。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>    x <span class=\"token operator\">=</span>     <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，各个语法单位之间的多个空格，跟单个空格的效果是一样的。</p>\n<p>空格还用来表示缩进。多层级的代码有没有缩进，其实对于编译器来说并没有差别，没有缩进的代码也是完全可以运行的。强调代码缩进，只是为了增强代码可读性，便于区分代码块。</p>\n<p>大多数 C 语言的风格要求是，下一级代码比上一级缩进4个空格。为了书写的紧凑，本书采用缩写两个空格。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 缩进四个空格</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positive\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 缩进两个空格</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positive\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>只包含空格的行被称为空白行，编译器会完全忽略该行。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>注释是对代码的说明，编译器会忽略注释，也就是说，注释对实际代码没有影响。</p>\n<p>C 语言的注释有两种表示方法。第一种方法是将注释放在<code>/*...*/</code>之间，内部可以分行。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* 注释 */</span>\n\n<span class=\"token comment\">/*\n  这是一行注释\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这种注释可以插在行内。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token comment\">/* file name */</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>/* file name */</code>用来对函数参数进行说明，跟在它后面的代码依然会有效执行。</p>\n<p>这种注释一定不能忘记写结束符号<code>*/</code>，否则很容易导致错误。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 注释一\nprintf(\"b \");\nprintf(\"c \"); /* 注释二 */</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例的原意是，第一行和第三行代码的尾部，有两个注释。但是，第一行注释忘记写结束符号，导致注释一延续到第三行结束。</p>\n<p>第二种写法是将注释放在双斜杠<code>//</code>后面，从双斜杠到行尾都属于注释。这种注释只能是单行，可以放在行首，也可以放在一行语句的结尾。这是 C99 标准新增的语法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 这是一行注释</span>\n\n<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这也是注释</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>不管是哪一种注释，都不能放在双引号里面。双引号里面的注释符号，会成为字符串的一部分，解释为普通符号，失去注释作用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"// hello /* world */ \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，双引号里面的注释符号，都会被视为普通字符，没有注释作用。</p>\n<p>编译时，注释会被替换成一个空格，所以<code>min/* space */Value</code>会变成<code>min Value</code>，而不是<code>minValue</code>。</p>\n<h2 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf()\"></a>printf()</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>本书的示例会大量用到<code>printf()</code>函数，这里先介绍一下这个函数。</p>\n<p><code>printf()</code>的作用是将参数文本输出到屏幕。它名字里面的<code>f</code>代表<code>format</code>（格式化），表示可以定制输出文本的格式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令会在屏幕上输出一行文字“Hello World”。</p>\n<p><code>printf()</code>不会在行尾自动添加换行符，运行结束后，光标就停留在输出结束的地方，不会自动换行。为了让光标移到下一行的开头，可以在输出文本的结尾，添加一个换行符<code>\\n</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果文本内部有换行，也是通过插入换行符来实现。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\\nWorld\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例先输出一个<code>Hello</code>，然后换行，在下一行开头输出<code>World</code>，然后又是一个换行。</p>\n<p>上面示例也可以写成两个<code>printf()</code>，效果完全一样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>printf()</code>是在标准库的头文件<code>stdio.h</code>定义的。使用这个函数之前，必须在源码文件头部引入这个头文件。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，只有在源码头部加上<code>#include &lt;stdio.h&gt;</code>，才能使用<code>printf()</code>这个函数。<code>#include</code>指令的详细解释，请看《预处理器》一章。</p>\n<h3 id=\"占位符\"><a href=\"#占位符\" class=\"headerlink\" title=\"占位符\"></a>占位符</h3><p><code>printf()</code>可以在输出文本中指定占位符。所谓“占位符”，就是这个位置可以用其他值代入。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 输出 There are 3 apples</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There are %i apples\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>There are %i apples\\n</code>是输出文本，里面的<code>%i</code>就是占位符，表示这个位置要用其他值来替换。占位符的第一个字符一律为百分号<code>%</code>，第二个字符表示占位符的类型，<code>%i</code>表示这里代入的值必须是一个整数。</p>\n<p><code>printf()</code>的第二个参数就是替换占位符的值，上面的例子是整数<code>3</code>替换<code>%i</code>。执行后的输出结果就是<code>There are 3 apples</code>。</p>\n<p>常用的占位符除了<code>%i</code>，还有<code>%s</code>表示代入的是字符串。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s will come tonight\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>%s</code>表示代入的是一个字符串，所以<code>printf()</code>的第二个参数就必须是字符串，这个例子是<code>Jane</code>。执行后的输出就是<code>Jane will come tonight</code>。</p>\n<p>输出文本里面可以使用多个占位符。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s says it is %i o'clock\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ben\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，输出文本<code>%s says it is %i o&#39;clock</code>有两个占位符，第一个是字符串占位符<code>%s</code>，第二个是整数占位符<code>%i</code>，分别对应<code>printf()</code>的第二个参数（<code>Ben</code>）和第三个参数（<code>21</code>）。执行后的输出就是<code>Ben says it is 21 o&#39;clock</code>。</p>\n<p><code>printf()</code>参数与占位符是一一对应关系，如果有<code>n</code>个占位符，<code>printf()</code>的参数就应该有<code>n + 1</code>个。如果参数个数少于对应的占位符，<code>printf()</code>可能会输出内存中的任意值。</p>\n<p><code>printf()</code>的占位符有许多种类，与 C 语言的数据类型相对应。下面按照字母顺序，列出常用的占位符，方便查找，具体含义在后面章节介绍。</p>\n<ul>\n<li><code>%a</code>：浮点数。</li>\n<li><code>%A</code>：浮点数。</li>\n<li><code>%c</code>：字符。</li>\n<li><code>%d</code>：十进制整数。</li>\n<li><code>%e</code>：使用科学计数法的浮点数，指数部分的<code>e</code>为小写。</li>\n<li><code>%E</code>：使用科学计数法的浮点数，指数部分的<code>E</code>为大写。</li>\n<li><code>%i</code>：整数，基本等同于<code>%d</code>。</li>\n<li><code>%f</code>：小数（包含<code>float</code>类型和<code>double</code>类型）。</li>\n<li><code>%g</code>：6个有效数字的浮点数。整数部分一旦超过6位，就会自动转为科学计数法，指数部分的<code>e</code>为小写。</li>\n<li><code>%G</code>：等同于<code>%g</code>，唯一的区别是指数部分的<code>E</code>为大写。</li>\n<li><code>%hd</code>：十进制 short int 类型。</li>\n<li><code>%ho</code>：八进制 short int 类型。</li>\n<li><code>%hx</code>：十六进制 short int 类型。</li>\n<li><code>%hu</code>：unsigned short int 类型。</li>\n<li><code>%ld</code>：十进制 long int 类型。</li>\n<li><code>%lo</code>：八进制 long int 类型。</li>\n<li><code>%lx</code>：十六进制 long int 类型。</li>\n<li><code>%lu</code>：unsigned long int 类型。</li>\n<li><code>%lld</code>：十进制 long long int 类型。</li>\n<li><code>%llo</code>：八进制 long long int 类型。</li>\n<li><code>%llx</code>：十六进制 long long int 类型。</li>\n<li><code>%llu</code>：unsigned long long int 类型。</li>\n<li><code>%Le</code>：科学计数法表示的 long double 类型浮点数。</li>\n<li><code>%Lf</code>：long double 类型浮点数。</li>\n<li><code>%n</code>：已输出的字符串数量。该占位符本身不输出，只将值存储在指定变量之中。</li>\n<li><code>%o</code>：八进制整数。</li>\n<li><code>%p</code>：指针。</li>\n<li><code>%s</code>：字符串。</li>\n<li><code>%u</code>：无符号整数（unsigned int）。</li>\n<li><code>%x</code>：十六进制整数。</li>\n<li><code>%zd</code>：<code>size_t</code>类型。</li>\n<li><code>%%</code>：输出一个百分号。</li>\n</ul>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p><code>printf()</code>可以定制占位符的输出格式。</p>\n<p>（1）限定宽度</p>\n<p><code>printf()</code>允许限定占位符的最小宽度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%5d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出为 \"  123\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>%5d</code>表示这个占位符的宽度至少为5位。如果不满5位，对应的值的前面会添加空格。</p>\n<p>输出的值默认是右对齐，即输出内容前面会有空格；如果希望改成左对齐，在输出内容后面添加空格，可以在占位符的<code>%</code>的后面插入一个<code>-</code>号。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-5d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出为 \"123  \"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，输出内容<code>123</code>的后面添加了空格。</p>\n<p>对于小数，这个限定符会限制所有数字的最小显示宽度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 输出 \"  123.450000\"</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%12f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123.45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>%12f</code>表示输出的浮点数最少要占据12位。由于小数的默认显示精度是小数点后6位，所以<code>123.45</code>输出结果的头部会添加2个空格。</p>\n<p>（2）总是显示正负号</p>\n<p>默认情况下，<code>printf()</code>不对正数显示<code>+</code>号，只对负数显示<code>-</code>号。如果想让正数也输出<code>+</code>号，可以在占位符的<code>%</code>后面加一个<code>+</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 +12</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 -12</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>%+d</code>可以确保输出的数值，总是带有正负号。</p>\n<p>（3）限定小数位数</p>\n<p>输出小数时，有时希望限定小数的位数。举例来说，希望小数点后面只保留两位，占位符可以写成<code>%.2f</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 输出 Number is 0.50</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number is %.2f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，如果希望小数点后面输出3位（<code>0.500</code>），占位符就要写成<code>%.3f</code>。</p>\n<p>这种写法可以与限定宽度占位符，结合使用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 输出为 \"  0.50\"</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%6.2f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>%6.2f</code>表示输出字符串最小宽度为6，小数位数为2。所以，输出字符串的头部有两个空格。</p>\n<p>最小宽度和小数位数这两个限定值，都可以用<code>*</code>代替，通过<code>printf()</code>的参数传入。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%*.*f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%6.2f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>%*.*f</code>的两个星号通过<code>printf()</code>的两个参数<code>6</code>和<code>2</code>传入。</p>\n<p>（4）输出部分字符串</p>\n<p><code>%s</code>占位符用来输出字符串，默认是全部输出。如果只想输出开头的部分，可以用<code>%.[m]s</code>指定输出的长度，其中<code>[m]</code>代表一个数字，表示所要输出的长度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 输出 hello</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.5s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，占位符<code>%.5s</code>表示只输出字符串“hello world”的前5个字符，即“hello”。</p>\n<h2 id=\"标准库，头文件\"><a href=\"#标准库，头文件\" class=\"headerlink\" title=\"标准库，头文件\"></a>标准库，头文件</h2><p>程序需要用到的功能，不一定需要自己编写，C 语言可能已经自带了。程序员只要去调用这些自带的功能，就省得自己编写代码了。举例来说，<code>printf()</code>这个函数就是 C 语言自带的，只要去调用它，就能实现在屏幕上输出内容。</p>\n<p>C 语言自带的所有这些功能，统称为“标准库”（standard library），因为它们是写入标准的，到底包括哪些功能，应该怎么使用的，都是规定好的，这样才能保证代码的规范和可移植。</p>\n<p>不同的功能定义在不同的文件里面，这些文件统称为“头文件”（header file）。如果系统自带某一个功能，就一定还会自带描述这个功能的头文件，比如<code>printf()</code>的头文件就是系统自带的<code>stdio.h</code>。头文件的后缀通常是<code>.h</code>。</p>\n<p>如果要使用某个功能，就必须先加载对应的头文件，加载使用的是<code>#include</code>命令。这就是为什么使用<code>printf()</code>之前，必须先加载<code>stdio.h</code>的原因。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意，加载头文件的<code>#include</code>语句不需要分号结尾，详见《预处理器》一章。</p>\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><p>变量（varible）可以理解成一块内存区域的名字。通过变量名，可以引用这块内存区域，获取里面存储的值。由于值可能发生变化，所以称为变量，否则就是常量了。</p>\n<h2 id=\"变量名\"><a href=\"#变量名\" class=\"headerlink\" title=\"变量名\"></a>变量名</h2><p>变量名在 C 语言里面属于标识符（identifier），命名有严格的规范。</p>\n<ul>\n<li>只能由字母（包括大写和小写）、数字和下划线（<code>_</code>）组成。</li>\n<li>不能以数字开头。</li>\n<li>长度不能超过63个字符。</li>\n</ul>\n<p>下面是一些无效变量名的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">$zj\nj<span class=\"token operator\">*</span><span class=\"token operator\">*</span>p\n<span class=\"token number\">2</span>cat\nHot<span class=\"token operator\">-</span>tab\ntax rate\ndon't<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，每一行的变量名都是无效的。</p>\n<p>变量名区分大小写，<code>star</code>、<code>Star</code>、<code>STAR</code>都是不同的变量。</p>\n<p>并非所有的词都能用作变量名，有些词在 C 语言里面有特殊含义（比如<code>int</code>），另一些词是命令（比如<code>continue</code>），它们都称为关键字，不能用作变量名。另外，C 语言还保留了一些词，供未来使用，这些保留字也不能用作变量名。下面就是 C 语言主要的关键字和保留字。</p>\n<blockquote>\n<p>auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, inline, int, long, register, restrict, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while</p>\n</blockquote>\n<p>另外，两个下划线开头的变量名，以及一个下划线 + 大写英文字母开头的变量名，都是系统保留的，自己不应该起这样的变量名。</p>\n<h2 id=\"变量的声明\"><a href=\"#变量的声明\" class=\"headerlink\" title=\"变量的声明\"></a>变量的声明</h2><p>C 语言的变量，必须先声明后使用。如果一个变量没有声明，就直接使用，会报错。</p>\n<p>每个变量都有自己的类型（type）。声明变量时，必须把变量的类型告诉编译器。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码声明了变量<code>height</code>，并且指定类型为<code>int</code>（整数）。</p>\n<p>如果几个变量具有相同类型，可以在同一行声明。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，声明变量的语句必须以分号结尾。</p>\n<p>一旦声明，变量的类型就不能在运行时修改。</p>\n<h2 id=\"变量的赋值\"><a href=\"#变量的赋值\" class=\"headerlink\" title=\"变量的赋值\"></a>变量的赋值</h2><p>C 语言会在变量声明时，就为它分配内存空间，但是不会清除内存里面原来的值。这导致声明变量以后，变量会是一个随机的值。所以，变量一定要赋值以后才能使用。</p>\n<p>赋值操作通过赋值运算符（<code>=</code>）完成。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，第一行声明了一个整数变量<code>num</code>，第二行给这个变量赋值。</p>\n<p>变量的值应该与类型一致，不应该赋予不是同一个类型的值，比如<code>num</code>的类型是整数，就不应该赋值为小数。虽然 C 语言会自动转换类型，但是应该避免赋值运算符两侧的类型不一致。</p>\n<p>变量的声明和赋值，也可以写在一行。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>多个相同类型变量的赋值，可以写在同一行。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意，赋值表达式有返回值，等于等号右边的值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，变量<code>y</code>的值就是赋值表达式（<code>x = 2 * x</code>）的返回值<code>2</code>。</p>\n<p>由于赋值表达式有返回值，所以 C 语言可以写出多重赋值表达式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> y <span class=\"token operator\">=</span> z <span class=\"token operator\">=</span> m <span class=\"token operator\">=</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的代码是合法代码，一次为多个变量赋值。赋值运算符是从右到左执行，所以先为<code>n</code>赋值，然后依次为<code>m</code>、<code>z</code>、<code>y</code>和<code>x</code>赋值。</p>\n<p>C 语言有左值（left value）和右值（right value）的概念。左值是可以放在赋值运算符左边的值，一般是变量；右值是可以放在赋值运算符右边的值，一般是一个具体的值。这是为了强调有些值不能放在赋值运算符的左边，比如<code>x = 1</code>是合法的表达式，但是<code>1 = x</code>就会报错。</p>\n<h2 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h2><p>作用域（scope）指的是变量生效的范围。C 语言的变量作用域主要有两种：文件作用域（file scope）和块作用域（block scope）。</p>\n<p>文件作用域（file scope）指的是，在源码文件顶层声明的变量，从声明的位置到文件结束都有效。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>x</code>是在文件顶层声明的，从声明位置开始的整个当前文件都是它的作用域，可以在这个范围的任何地方读取这个变量，比如函数<code>main()</code>内部就可以读取这个变量。</p>\n<p>块作用域（block scope）指的是由大括号（<code>&#123;&#125;</code>）组成的代码块，它形成一个单独的作用域。凡是在块作用域里面声明的变量，只在当前代码块有效，代码块外部不可见。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 12 99</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 12</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 出错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，变量<code>b</code>是在<code>if</code>代码块里面声明的，所以对于大括号外面的代码，这个变量是不存在的。</p>\n<p>代码块可以嵌套，即代码块内部还有代码块，这时就形成了多层的块作用域。它的规则是：内层代码块可以使用外层声明的变量，但外层不可以使用内层声明的变量。如果内层的变量与外层同名，那么会在当前作用域覆盖外层变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 20</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 10</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，内层和外层都有一个变量<code>i</code>，每个作用域都会优先使用当前作用域声明的<code>i</code>。</p>\n<p>最常见的块作用域就是函数，函数内部声明的变量，对于函数外部是不可见的。<code>for</code>循环也是一个块作用域，循环变量只对循环体内部可见，外部是不可见的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 出错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>for</code>循环省略了大括号，但依然是一个块作用域，在外部读取循环变量<code>i</code>，编译器就会报错。</p>\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><p>C 语言的运算符非常多，一共有 50 多种，可以分成若干类。</p>\n<h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><p>算术运算符专门用于算术运算，主要有下面几种。</p>\n<ul>\n<li><code>+</code>：正值运算符（一元运算符）</li>\n<li><code>-</code>：负值运算符（一元运算符）</li>\n<li><code>+</code>：加法运算符（二元运算符）</li>\n<li><code>-</code>：减法运算符（二元运算符）</li>\n<li><code>*</code>：乘法运算符</li>\n<li><code>/</code>：除法运算符</li>\n<li><code>%</code>：余值运算符</li>\n</ul>\n<p>（1）<code>+</code>，<code>-</code></p>\n<p><code>+</code>和<code>-</code>既可以作为一元运算符，也可以作为二元运算符。所谓“一元运算符”，指的是只需要一个运算数就可以执行。一元运算符<code>-</code>用来改变一个值的正负号。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>-</code>将<code>12</code>这个值变成<code>-12</code>。</p>\n<p>一元运算符<code>+</code>对正负值没有影响，是一个完全可以省略的运算符，但是写了也不会报错。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>y</code>的值还是<code>-12</code>，因为<code>+</code>不会改变正负值。</p>\n<p>二元运算符<code>+</code>和<code>-</code>用来完成加法和减法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">61</span> <span class=\"token operator\">-</span> <span class=\"token number\">23</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>（2）<code>*</code></p>\n<p>运算符<code>*</code>用来完成乘法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> num <span class=\"token operator\">*</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 25</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>（3）<code>/</code></p>\n<p>运算符<code>/</code>用来完成除法。注意，两个整数相除，得到还是一个整数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token number\">6</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 1.000000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，尽管变量<code>x</code>的类型是<code>float</code>（浮点数），但是<code>6 / 4</code>得到的结果是<code>1.0</code>，而不是<code>1.5</code>。原因就在于 C 语言里面的整数除法是整除，只会返回整数部分，丢弃小数部分。</p>\n<p>如果希望得到浮点数的结果，两个运算数必须至少有一个浮点数，这时 C 语言就会进行浮点数除法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token number\">6.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 或者写成 6 / 4.0</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 1.500000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>6.0 / 4</code>表示进行浮点数除法，得到的结果就是<code>1.5</code>。</p>\n<p>下面是另一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nscore <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">/</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面的代码，你可能觉得经过运算，<code>score</code>会等于<code>25</code>，但是实际上<code>score</code>等于<code>0</code>。这是因为<code>score / 20</code>是整除，会得到一个整数值<code>0</code>，所以乘以<code>100</code>后得到的也是<code>0</code>。</p>\n<p>为了得到预想的结果，可以将除数<code>20</code>改成<code>20.0</code>，让整除变成浮点数除法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">score <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">/</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（4）<code>%</code></p>\n<p>运算符<code>%</code>表示求模运算，即返回两个整数相除的余值。这个运算符只能用于整数，不能用于浮点数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">6</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>负数求模的规则是，结果的正负号由第一个运算数的正负号决定。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">11</span> <span class=\"token operator\">%</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token comment\">// 1</span>\n<span class=\"token operator\">-</span><span class=\"token number\">11</span> <span class=\"token operator\">%</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token comment\">// -1</span>\n<span class=\"token operator\">-</span><span class=\"token number\">11</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token comment\">// -1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，第一个运算数的正负号（<code>11</code>或<code>-11</code>）决定了结果的正负号。</p>\n<p>（5）赋值运算的简写形式</p>\n<p>如果变量对自身的值进行算术运算，C 语言提供了简写形式，允许将赋值运算符和算术运算符结合成一个运算符。</p>\n<ul>\n<li><code>+=</code></li>\n<li><code>-=</code></li>\n<li><code>*=</code></li>\n<li><code>/=</code></li>\n<li><code>%=</code></li>\n</ul>\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">i <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 等同于 i = i + 3</span>\ni <span class=\"token operator\">-=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 等同于 i = i - 8</span>\ni <span class=\"token operator\">*=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 等同于 i = i * 9</span>\ni <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 等同于 i = i / 2</span>\ni <span class=\"token operator\">%=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 等同于 i = i % 5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"自增运算符，自减运算符\"><a href=\"#自增运算符，自减运算符\" class=\"headerlink\" title=\"自增运算符，自减运算符\"></a>自增运算符，自减运算符</h2><p>C 语言提供两个运算符，对变量自身进行<code>+ 1</code>和<code>- 1</code>的操作。</p>\n<ul>\n<li><code>++</code>：自增运算符</li>\n<li><code>--</code>：自减运算符</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等同于 i = i + 1</span>\ni<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等同于 i = i - 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这两个运算符放在变量的前面或后面，结果是不一样的。<code>++var</code>和<code>--var</code>是先执行自增或自减操作，再返回操作后<code>var</code>的值；<code>var++</code>和<code>var--</code>则是先返回操作前<code>var</code>的值，再执行自增或自减操作。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span>\n\nj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// i: 43</span>\n<span class=\"token comment\">// j: 52</span>\n\nj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// i: 44</span>\n<span class=\"token comment\">// j: 54</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，自增运算符的位置差异，会导致变量<code>j</code>得到不同的值。这样的写法很容易出现意料之外的结果，为了消除意外，可以改用下面的写法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* 写法一 */</span>\nj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ni<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 写法二 */</span>\ni<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>i</code>的自增运算与返回值是分离的两个步骤，这样就不太会出错，也提高了代码的可读性。</p>\n<h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><p>C 语言用于比较的表达式，称为“关系表达式”（relational expression），里面使用的运算符就称为“关系运算符”（relational operator），主要有下面6个。</p>\n<ul>\n<li><code>&gt;</code> 大于运算符</li>\n<li><code>&lt;</code> 小于运算符</li>\n<li><code>&gt;=</code> 大于等于运算符</li>\n<li><code>&lt;=</code> 小于等于运算符</li>\n<li><code>==</code> 相等运算符</li>\n<li><code>!=</code> 不相等运算符</li>\n</ul>\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">></span> b<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">&lt;=</span> b<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">>=</span> b<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>关系表达式通常返回<code>0</code>或<code>1</code>，表示真伪。C 语言中，<code>0</code>表示伪，所有非零值表示真。比如，<code>20 &gt; 12</code>返回<code>1</code>，<code>12 &gt; 20</code>返回<code>0</code>。</p>\n<p>关系表达式常用于<code>if</code>或<code>while</code>结构。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is 3.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，相等运算符<code>==</code>与赋值运算符<code>=</code>是两个不一样的运算符，不要混淆。有时候，可能会不小心写出下面的代码，它可以运行，但很容易出现意料之外的结果。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，原意是<code>x == 3</code>，但是不小心写成<code>x = 3</code>。这个式子表示对变量<code>x</code>赋值<code>3</code>，它的返回值为<code>3</code>，所以<code>if</code>判断总是为真。</p>\n<p>为了防止出现这种错误，有的程序员喜欢将变量写在等号的右边。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样的话，如果把<code>==</code>误写成<code>=</code>，编译器就会报错。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* 报错 */</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>另一个需要避免的错误是，多个关系运算符不宜连用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">i <span class=\"token operator\">&lt;</span> j <span class=\"token operator\">&lt;</span> k<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，连续使用两个小于运算符。这是合法表达式，不会报错，但是通常达不到想要的结果，即不是保证变量<code>j</code>的值在<code>i</code>和<code>k</code>之间。因为关系运算符是从左到右计算，所以实际执行的是下面的表达式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> k<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面式子中，<code>i &lt; j</code>返回<code>0</code>或<code>1</code>，所以最终是<code>0</code>或<code>1</code>与变量<code>k</code>进行比较。如果想要判断变量<code>j</code>的值是否在<code>i</code>和<code>k</code>之间，应该使用下面的写法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">i <span class=\"token operator\">&lt;</span> j <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> k<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p>逻辑运算符提供逻辑判断功能，用于构建更复杂的表达式，主要有下面三个运算符。</p>\n<ul>\n<li><code>!</code>：否运算符（改变单个表达式的真伪）。</li>\n<li><code>&amp;&amp;</code>：与运算符（两侧的表达式都为真，则为真，否则为伪）。</li>\n<li><code>||</code>：或运算符（两侧至少有一个表达式为真，则为真，否则为伪）。</li>\n</ul>\n<p>下面是与运算符的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Doing something!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，只有<code>x &lt; 10</code>和<code>y &gt; 20</code>同时为真，<code>x &lt; 10 &amp;&amp; y &gt; 20</code>才会为真。</p>\n<p>下面是否运算符的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is not less than 12\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，由于否运算符<code>!</code>具有比<code>&lt;</code>更高的优先级，所以必须使用括号，才能对表达式<code>x &lt; 12</code>进行否运算。当然，合理的写法是<code>if (x &gt;= 12)</code>，这里只是为了举例。</p>\n<p>对于逻辑运算符来说，任何非零值都表示真，零值表示伪。比如，<code>5 || 0</code>会返回<code>1</code>，<code>5 &amp;&amp; 0</code>会返回<code>0</code>。</p>\n<p>逻辑运算符还有一个特点，它总是先对左侧的表达式求值，再对右边的表达式求值，这个顺序是保证的。如果左边的表达式满足逻辑运算符的条件，就不再对右边的表达式求值。这种情况称为“短路”。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">12</span><span class=\"token operator\">/</span>number <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，如果<code>&amp;&amp;</code>左侧的表达式（<code>number != 0</code>）为伪，即<code>number</code>等于<code>0</code>时，右侧的表达式（<code>12/number == 2</code>）是不会执行的。因为这时左侧表达式返回<code>0</code>，整个<code>&amp;&amp;</code>表达式肯定为伪，就直接返回<code>0</code>，不再执行右侧的表达式了。</p>\n<p>由于逻辑运算符的执行顺序是先左后右，所以下面的代码是有问题的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，执行左侧表达式后，变量<code>x</code>的值就已经变了。等到执行右侧表达式的时候，是用新的值在计算，这通常不是原始意图。</p>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>C 语言提供一些位运算符，用来操作二进制位（bit）。</p>\n<p>（1）取反运算符<code>～</code></p>\n<p>取反运算符<code>～</code>是一个一元运算符，用来将每一个二进制位变成相反值，即<code>0</code>变成<code>1</code>，<code>1</code>变成<code>0</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 返回 01101100</span>\n<span class=\"token operator\">~</span> <span class=\"token number\">10010011</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>~</code>对每个二进制位取反，就得到了一个新的值。</p>\n<p>注意，<code>~</code>运算符不会改变变量的值，只是返回一个新的值。</p>\n<p>（2）与运算符<code>&amp;</code></p>\n<p>与运算符<code>&amp;</code>将两个值的每一个二进制位进行比较，返回一个新的值。当两个二进制位都为<code>1</code>，就返回<code>1</code>，否则返回<code>0</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 返回 00010001</span>\n<span class=\"token number\">10010011</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">00111101</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，两个八位二进制数进行逐位比较，返回一个新的值。</p>\n<p>与运算符<code>&amp;</code>可以与赋值运算符<code>=</code>结合，简写成<code>&amp;=</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nval <span class=\"token operator\">=</span> val <span class=\"token operator\">&amp;</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 简写成</span>\nval <span class=\"token operator\">&amp;=</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（3）或运算符<code>|</code></p>\n<p>或运算符<code>|</code>将两个值的每一个二进制位进行比较，返回一个新的值。两个二进制位只要有一个为<code>1</code>（包含两个都为<code>1</code>的情况），就返回<code>1</code>，否则返回<code>0</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 返回 10111111</span>\n<span class=\"token number\">10010011</span> <span class=\"token operator\">|</span> <span class=\"token number\">00111101</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>或运算符<code>|</code>可以与赋值运算符<code>=</code>结合，简写成<code>|=</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nval <span class=\"token operator\">=</span> val <span class=\"token operator\">|</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 简写为</span>\nval <span class=\"token operator\">|=</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（4）异或运算符<code>^</code></p>\n<p>异或运算符<code>^</code>将两个值的每一个二进制位进行比较，返回一个新的值。两个二进制位有且仅有一个为<code>1</code>，就返回<code>1</code>，否则返回<code>0</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 返回 10101110</span>\n<span class=\"token number\">10010011</span> <span class=\"token operator\">^</span> <span class=\"token number\">00111101</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>异或运算符<code>^</code>可以与赋值运算符<code>=</code>结合，简写成<code>^=</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nval <span class=\"token operator\">=</span> val <span class=\"token operator\">^</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 简写为</span>\nval <span class=\"token operator\">^=</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（5）左移运算符<code>&lt;&lt;</code></p>\n<p>左移运算符<code>&lt;&lt;</code>将左侧运算数的每一位，向左移动指定的位数，尾部空出来的位置使用<code>0</code>填充。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 1000101000</span>\n<span class=\"token number\">10001010</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>10001010</code>的每一个二进制位，都向左侧移动了两位。</p>\n<p>左移运算符相当于将运算数乘以2的指定次方，比如左移2位相当于乘以4（2的2次方）。</p>\n<p>左移运算符<code>&lt;&lt;</code>可以与赋值运算符<code>=</code>结合，简写成<code>&lt;&lt;=</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nval <span class=\"token operator\">=</span> val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 简写为</span>\nval <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（6）右移运算符<code>&gt;&gt;</code></p>\n<p>右移运算符<code>&gt;&gt;</code>将左侧运算数的每一位，向右移动指定的位数，尾部无法容纳的值将丢弃，头部空出来的位置使用<code>0</code>填充。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 返回 00100010</span>\n<span class=\"token number\">10001010</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>10001010</code>的每一个二进制位，都向右移动两位。最低的两位<code>10</code>被丢弃，头部多出来的两位补<code>0</code>，所以最后得到<code>00100010</code>。</p>\n<p>注意，右移运算符最好只用于无符号整数，不要用于负数。因为不同系统对于右移后如何处理负数的符号位，有不同的做法，可能会得到不一样的结果。</p>\n<p>右移运算符相当于将运算数除以2的指定次方，比如右移2位就相当于除以4（2的2次方）。</p>\n<p>右移运算符<code>&gt;&gt;</code>可以与赋值运算符<code>=</code>结合，简写成<code>&gt;&gt;=</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nval <span class=\"token operator\">=</span> val <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 简写为</span>\nval <span class=\"token operator\">>>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"逗号运算符\"><a href=\"#逗号运算符\" class=\"headerlink\" title=\"逗号运算符\"></a>逗号运算符</h2><p>逗号运算符用于将多个表达式写在一起，从左到右依次运行每个表达式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，有两个表达式（<code>x = 10</code>和<code>y = 20</code>），逗号使得它们可以放在同一条语句里面。</p>\n<p>逗号运算符返回最后一个表达式的值，作为整个语句的值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，逗号的优先级低于赋值运算符，所以先执行赋值运算，再执行逗号运算，变量<code>x</code>等于<code>1</code>。</p>\n<h2 id=\"运算优先级\"><a href=\"#运算优先级\" class=\"headerlink\" title=\"运算优先级\"></a>运算优先级</h2><p>优先级指的是，如果一个表达式包含多个运算符，哪个运算符应该优先执行。各种运算符的优先级是不一样的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，表达式<code>3 + 4 * 5</code>里面既有加法运算符（<code>+</code>），又有乘法运算符（<code>*</code>）。由于乘法的优先级高于加法，所以会先计算<code>4 * 5</code>，而不是先计算<code>3 + 4</code>。</p>\n<p>如果两个运算符优先级相同，则根据运算符是左结合，还是右结合，决定执行顺序。大部分运算符是左结合（从左到右执行），少数运算符是右结合（从右到左执行），比如赋值运算符（<code>=</code>）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>*</code>和<code>/</code>的优先级相同，它们都是左结合运算符，所以从左到右执行，先计算<code>5 * 6</code>，再计算<code>6 / 2</code>。</p>\n<p>运算符的优先级顺序很复杂。下面是部分运算符的优先级顺序（按照优先级从高到低排列）。</p>\n<ul>\n<li>圆括号（<code>()</code>）</li>\n<li>自增运算符（<code>++</code>），自减运算符（<code>--</code>）</li>\n<li>一元运算符（<code>+</code>和<code>-</code>）</li>\n<li>乘法（<code>*</code>），除法（<code>/</code>）</li>\n<li>加法（<code>+</code>），减法（<code>-</code>）</li>\n<li>关系运算符（<code>&lt;</code>、<code>&gt;</code>等）</li>\n<li>赋值运算符（<code>=</code>）</li>\n</ul>\n<p>由于圆括号的优先级最高，可以使用它改变其他运算符的优先级。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，由于添加了圆括号，加法会先于乘法进行运算。</p>\n<p>完全记住所有运算符的优先级没有必要，解决方法是多用圆括号，防止出现意料之外的情况，也有利于提高代码的可读性。</p>\n<h1 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h1><p>C 语言的程序是顺序执行，即先执行前面的语句，再执行后面的语句。开发者如果想要控制程序执行的流程，就必须使用流程控制的语法结构，主要是条件执行和循环执行。</p>\n<h2 id=\"if-语句\"><a href=\"#if-语句\" class=\"headerlink\" title=\"if 语句\"></a>if 语句</h2><p><code>if</code>语句用于条件判断，满足条件时，就执行指定的语句。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> statement<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面式子中，表达式<code>expression</code>为真（值不为<code>0</code>）时，就执行<code>statement</code>语句。</p>\n<p><code>if</code>后面的判断条件<code>expression</code>外面必须有圆括号，否则会报错。语句体部分<code>statement</code>可以是一个语句，也可以是放在大括号里面的复合语句。下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is 10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，当变量<code>x</code>为<code>10</code>时，就会输出一行文字。对于只有一个语句的语句体，语句部分通常另起一行。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is 10\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果有多条语句，就需要把它们放在大括号里面，组成一个复合语句。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>line_num <span class=\"token operator\">==</span> MAX_LINES<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  line_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  page_num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>if</code>语句可以带有<code>else</code>分支，指定条件不成立时（表达式<code>expression</code>的值为<code>0</code>），所要执行的代码。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> statement\n<span class=\"token keyword\">else</span> statement<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span>\n  max <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n  max <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果<code>else</code>的语句部分多于一行，同样可以把它们放在大括号里面。</p>\n<p><code>else</code>可以与另一个<code>if</code>语句连用，构成多重判断。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span>\n  statement\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span>\n  statement\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span>\n  statement\n<span class=\"token keyword\">else</span>\n  statement<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果有多个<code>if</code>和<code>else</code>，可以记住这样一条规则，<code>else</code>总是跟最接近的<code>if</code>匹配。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">></span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The number is more than 6, less than 12.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It is wrong number.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>else</code>部分匹配最近的<code>if</code>（即<code>number &lt; 12</code>），所以如果<code>number</code>等于6，就不会执行<code>else</code>的部分。</p>\n<p>这样很容易出错，为了提供代码的可读性，建议使用大括号，明确<code>else</code>匹配哪一个<code>if</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">></span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The number is more than 6, less than 12.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It is wrong number.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，使用了大括号，就可以清晰地看出<code>else</code>匹配外层的<code>if</code>。</p>\n<h2 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符 ?:\"></a>三元运算符 ?:</h2><p>C 语言有一个三元表达式<code>?:</code>，可以用作<code>if...else</code>的简写形式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token operator\">&lt;</span>expression1<span class=\"token operator\">></span> <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>expression2<span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>expression3<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个操作符的含义是，表达式<code>expression1</code>如果为<code>true</code>（非0值），就执行<code>expression2</code>，否则执行<code>expression3</code>。</p>\n<p>下面是一个例子，返回两个值之中的较大值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> i <span class=\"token operator\">:</span> j<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的代码等同于下面的<code>if</code>语句。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"switch-语句\"><a href=\"#switch-语句\" class=\"headerlink\" title=\"switch 语句\"></a>switch 语句</h2><p>switch 语句是一种特殊形式的 if…else 结构，用于判断条件有多个结果的情况。它把多重的<code>else if</code>改成更易用、可读性更好的形式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">case</span> value1<span class=\"token operator\">:</span> statement\n  <span class=\"token keyword\">case</span> value2<span class=\"token operator\">:</span> statement\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> statement\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，根据表达式<code>expression</code>不同的值，执行相应的<code>case</code>分支。如果找不到对应的值，就执行<code>default</code>分支。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"False\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"True\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，根据变量<code>grade</code>不同的值，会执行不同的<code>case</code>分支。如果等于<code>0</code>，执行<code>case 0</code>的部分；如果等于<code>1</code>，执行<code>case 1</code>的部分；否则，执行<code>default</code>的部分。<code>default</code>表示处理以上所有<code>case</code>都不匹配的情况。</p>\n<p>每个<code>case</code>语句体的结尾，都应该有一个<code>break</code>语句，作用是跳出整个<code>switch</code>结构，不再往下执行。如果缺少<code>break</code>，就会导致继续执行下一个<code>case</code>或<code>default</code>分支。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"False\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"True\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>case 0</code>的部分没有<code>break</code>语句，导致这个分支执行完以后，不会跳出<code>switch</code>结构，继续执行<code>case 1</code>分支。</p>\n<p>利用这个特点，如果多个<code>case</code>分支对应同样的语句体，可以写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"True\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>case 0</code>分支没有任何语句，导致<code>case 0</code>和<code>case 1</code>都会执行同样的语句体。</p>\n<p><code>case</code>后面的语句体，不用放在大括号里面，这也是为什么需要<code>break</code>的原因。</p>\n<p><code>default</code>分支用来处理前面的 case 都不匹配的情况，最好放在所有 case 的后面，这样就不用写<code>break</code>语句。这个分支是可选的，如果没有该分支，遇到所有的 case 都不匹配的情况，就会直接跳出整个 switch 代码块。</p>\n<h2 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h2><p><code>while</code>语句用于循环结构，满足条件时，不断执行循环体。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span>\n  statement<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码中，如果表达式<code>expression</code>为非零值（表示真），就会执行<code>statement</code>语句，然后再次判断<code>expression</code>是否为零；如果<code>expression</code>为零（表示伪）就跳出循环，不再执行循环体。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n  i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，只要<code>i</code>小于<code>n</code>，<code>i</code>就会不断增加2。</p>\n<p>如果循环体有多个语句，就需要使用大括号将这些语句组合在一起。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  statement<span class=\"token punctuation\">;</span>\n  statement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i is now %d!\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"All done!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，循环体会执行10次，每次将<code>i</code>增加<code>1</code>，直到等于<code>10</code>才退出循环。</p>\n<p>只要条件为真，<code>while</code>会产生无限循环。下面是一种常见的无限循环的写法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的示例虽然是无限循环，但是循环体内部可以用<code>break</code>语句跳出循环。</p>\n<h2 id=\"do…while-结构\"><a href=\"#do…while-结构\" class=\"headerlink\" title=\"do…while 结构\"></a>do…while 结构</h2><p><code>do...while</code>结构是<code>while</code>的变体，它会先执行一次循环体，然后再判断是否满足条件。如果满足的话，就继续执行循环体，否则跳出循环。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">do</span> statement\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码中，不管条件<code>expression</code>是否成立，循环体<code>statement</code>至少会执行一次。每次<code>statement</code>执行完毕，就会判断一次<code>expression</code>，决定是否结束循环。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">do</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>i</code>先减去1，再判断是否大于0。如果大于0，就继续减去1，直到<code>i</code>等于<code>0</code>为止。</p>\n<p>如果循环部分有多条语句，就需要放在大括号里面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i is %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"All done!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，变量<code>i</code>并不满足小于<code>10</code>的条件，但是循环体还是会执行一次。</p>\n<h2 id=\"for-语句\"><a href=\"#for-语句\" class=\"headerlink\" title=\"for 语句\"></a>for 语句</h2><p><code>for</code>语句是最常用的循环结构，通常用于精确控制循环次数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>initialization<span class=\"token punctuation\">;</span> continuation<span class=\"token punctuation\">;</span> action<span class=\"token punctuation\">)</span>\n  statement<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>for</code>语句的条件部分（即圆括号里面的部分）有三个表达式。</p>\n<ul>\n<li><code>initialization</code>：初始化表达式，用于初始化循环变量，只执行一次。</li>\n<li><code>continuation</code>：判断表达式，只要为<code>true</code>，就会不断执行循环体。</li>\n<li><code>action</code>：循环变量处理表达式，每轮循环结束后执行，使得循环变量发生变化。</li>\n</ul>\n<p>循环体部分的<code>statement</code>可以是一条语句，也可以是放在大括号里面的复合语句。下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i is %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，循环变量<code>i</code>在<code>for</code>的第一个表达式里面声明，该变量只用于本次循环。离开循环体之后，就会失效。</p>\n<p>条件部分的三个表达式，每一个都可以有多个语句，语句与语句之间使用逗号分隔。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">999</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，初始化部分有两个语句，分别对变量<code>i</code>和<code>j</code>进行赋值。</p>\n<p><code>for</code>的三个表达式都不是必需的，甚至可以全部省略，这会形成无限循环。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本行会无限循环地打印。\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例由于没有判断条件，就会形成无限循环。</p>\n<h2 id=\"break-语句\"><a href=\"#break-语句\" class=\"headerlink\" title=\"break 语句\"></a>break 语句</h2><p><code>break</code>语句有两种用法。一种是与<code>switch</code>语句配套使用，用来中断某个分支的执行，这种用法前面已经介绍过了。另一种用法是在循环体内部跳出循环，不再进行后面的循环了。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>break</code>语句使得循环跳到下一个<code>i</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，一旦读到换行符（<code>\\n</code>），<code>break</code>命令就跳出整个<code>while</code>循环，不再继续读取了。</p>\n<p>注意，<code>break</code>命令只能跳出循环体和<code>switch</code>结构，不能跳出<code>if</code>结构。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无效</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>break</code>语句是无效的，因为它不能跳出外层的<code>if</code>结构。</p>\n<h2 id=\"continue-语句\"><a href=\"#continue-语句\" class=\"headerlink\" title=\"continue 语句\"></a>continue 语句</h2><p><code>continue</code>语句用于在循环体内部终止本轮循环，进入下一轮循环。只要遇到<code>continue</code>语句，循环体内部后面的语句就不执行了，回到循环体的头部，开始执行下一轮循环。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，有没有<code>continue</code>语句，效果一样，都表示跳到下一个<code>j</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，只要读到的字符是制表符（<code>\\t</code>），就用<code>continue</code>语句跳过该字符，读取下一个字符。</p>\n<h2 id=\"goto-语句\"><a href=\"#goto-语句\" class=\"headerlink\" title=\"goto 语句\"></a>goto 语句</h2><p>goto 语句用于跳到指定的标签名。这会破坏结构化编程，建议不要轻易使用，这里为了语法的完整，介绍一下它的用法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\ntop<span class=\"token operator\">:</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'q'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">goto</span> top<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>top</code>是一个标签名，可以放在正常语句的前面，相当于为这行语句做了一个标记。程序执行到<code>goto</code>语句，就会跳转到它指定的标签名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">infinite_loop<span class=\"token operator\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">goto</span> infinite_loop<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的代码会产生无限循环。</p>\n<p>goto 的一个主要用法是跳出多层循环。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>some_error_condition<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">goto</span> bail<span class=\"token punctuation\">;</span>    \n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n    \nbail<span class=\"token operator\">:</span>\n<span class=\"token comment\">// ... ...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码有很复杂的嵌套循环，不使用 goto 的话，想要完全跳出所有循环，写起来很麻烦。</p>\n<p>goto 的另一个用途是提早结束多重判断。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">do_something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERR<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">goto</span> error<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">do_something2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERR<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">goto</span> error<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">do_something3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERR<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">goto</span> error<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">do_something4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERR<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">goto</span> error<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例有四个判断，只要有一个发现错误，就使用 goto 跳过后面的判断。</p>\n<p>注意，goto 只能在同一个函数之中跳转，并不能跳转到其他函数。</p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>C 语言的每一种数据，都是有类型（type）的，编译器必须知道数据的类型，才能操作数据。所谓“类型”，就是相似的数据所拥有的共同特征，那么一旦知道某个值的数据类型，就能知道该值的特征和操作方式。</p>\n<p>基本数据类型有三种：字符（char）、整数（int）和浮点数（float）。复杂的类型都是基于它们构建的。</p>\n<h2 id=\"字符类型\"><a href=\"#字符类型\" class=\"headerlink\" title=\"字符类型\"></a>字符类型</h2><p>字符类型指的是单个字符，类型声明使用<code>char</code>关键字。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例声明了变量<code>c</code>是字符类型，并将其赋值为字母<code>B</code>。</p>\n<p>C 语言规定，字符常量必须放在单引号里面。</p>\n<p>在计算机内部，字符类型使用一个字节（8位）存储。C 语言将其当作整数处理，所以字符类型就是宽度为一个字节的整数。每个字符对应一个整数（由 ASCII 码确定），比如<code>B</code>对应整数<code>66</code>。</p>\n<p>字符类型在不同计算机的默认范围是不一样的。一些系统默认为<code>-128</code>到<code>127</code>，另一些系统默认为<code>0</code>到<code>255</code>。这两种范围正好都能覆盖<code>0</code>到<code>127</code>的 ASCII 字符范围。</p>\n<p>只要在字符类型的范围之内，整数与字符是可以互换的，都可以赋值给字符类型的变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token number\">66</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>c</code>是字符类型，赋给它的值是整数66。这跟赋值为字符<code>B</code>的效果是一样的。</p>\n<p>两个字符类型的变量可以进行数学运算。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等同于 char a = 66;</span>\n<span class=\"token keyword\">char</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等同于 char b = 67;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 133</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，字符类型变量<code>a</code>和<code>b</code>相加，视同两个整数相加。占位符<code>%d</code>表示输出十进制整数，因此输出结果为133。</p>\n<p>单引号本身也是一个字符，如果要表示这个字符常量，必须使用反斜杠转义。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> t <span class=\"token operator\">=</span> <span class=\"token string\">'\\''</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>t</code>为单引号字符，由于字符常量必须放在单引号里面，所以内部的单引号要使用反斜杠转义。</p>\n<p>这种转义的写法，主要用来表示 ASCII 码定义的一些无法打印的控制字符，它们也属于字符类型的值。</p>\n<ul>\n<li><code>\\a</code>：警报，这会使得终端发出警报声或出现闪烁，或者两者同时发生。</li>\n<li><code>\\b</code>：退格键，光标回退一个字符，但不删除字符。</li>\n<li><code>\\f</code>：换页符，光标移到下一页。在现代系统上，这已经反映不出来了，行为改成类似于<code>\\v</code>。</li>\n<li><code>\\n</code>：换行符。</li>\n<li><code>\\r</code>：回车符，光标移到同一行的开头。</li>\n<li><code>\\t</code>：制表符，光标移到下一个水平制表位，通常是下一个8的倍数。</li>\n<li><code>\\v</code>：垂直分隔符，光标移到下一个垂直制表位，通常是下一行的同一列。</li>\n<li><code>\\0</code>：null 字符，代表没有内容。注意，这个值不等于数字0。</li>\n</ul>\n<p>转义写法还能使用八进制和十六进制表示一个字符。</p>\n<ul>\n<li><code>\\nn</code>：字符的八进制写法，<code>nn</code>为八进制值。</li>\n<li><code>\\xnn</code>：字符的十六进制写法，<code>nn</code>为十六进制值。</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> x <span class=\"token operator\">=</span> <span class=\"token number\">66</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'\\102'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 八进制</span>\n<span class=\"token keyword\">char</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'\\x42'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 十六进制</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例的四种写法都是等价的。</p>\n<h2 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>整数类型用来表示较大的整数，类型声明使用<code>int</code>关键字。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例声明了一个整数变量<code>a</code>。</p>\n<p>不同计算机的<code>int</code>类型的大小是不一样的。比较常见的是使用4个字节（32位）存储一个<code>int</code>类型的值，但是2个字节（16位）或8个字节（64位）也有可能使用。它们可以表示的整数范围如下。</p>\n<ul>\n<li>16位：-32,768 到 32,767。</li>\n<li>32位：-2,147,483,648 到 2,147,483,647。</li>\n<li>64位：-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807。</li>\n</ul>\n<h3 id=\"signed，unsigned\"><a href=\"#signed，unsigned\" class=\"headerlink\" title=\"signed，unsigned\"></a>signed，unsigned</h3><p>C 语言使用<code>signed</code>关键字，表示一个类型带有正负号，包含负值；使用<code>unsigned</code>关键字，表示该类型不带有正负号，只能表示零和正整数。</p>\n<p>对于<code>int</code>类型，默认是带有正负号的，也就是说<code>int</code>等同于<code>signed int</code>。由于这是默认情况，关键字<code>signed</code>一般都省略不写，但是写了也不算错。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>int</code>类型也可以不带正负号，只表示非负整数。这时就必须使用关键字<code>unsigned</code>声明变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>整数变量声明为<code>unsigned</code>的好处是，同样长度的内存能够表示的最大整数值，增大了一倍。比如，16位的<code>signed int</code>最大值为32,767，而<code>unsigned int</code>的最大值增大到了65,535。</p>\n<p><code>unsigned int</code>里面的<code>int</code>可以省略，所以上面的变量声明也可以写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>字符类型<code>char</code>也可以设置<code>signed</code>和<code>unsigned</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">signed</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 范围为 -128 到 127</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 范围为 0 到 255</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意，C 语言规定<code>char</code>类型默认是否带有正负号，由当前系统决定。这就是说，<code>char</code>不等同于<code>signed char</code>，它有可能是<code>signed char</code>，也有可能是<code>unsigned char</code>。这一点与<code>int</code>不同，<code>int</code>就是等同于<code>signed int</code>。</p>\n<h3 id=\"整数的子类型\"><a href=\"#整数的子类型\" class=\"headerlink\" title=\"整数的子类型\"></a>整数的子类型</h3><p>如果<code>int</code>类型使用4个或8个字节表示一个整数，对于小整数，这样做很浪费空间。另一方面，某些场合需要更大的整数，8个字节还不够。为了解决这些问题，C 语言在<code>int</code>类型之外，又提供了三个整数的子类型。这样有利于更精细地限定整数变量的范围，也有利于更好地表达代码的意图。</p>\n<ul>\n<li><code>short int</code>（简写为<code>short</code>）：占用空间不多于<code>int</code>，一般占用2个字节（整数范围为-32768～32767)。</li>\n<li><code>long int</code>（简写为<code>long</code>）：占用空间不少于<code>int</code>，至少为4个字节。</li>\n<li><code>long long int</code>（简写为<code>long long</code>）：占用空间多于<code>long</code>，至少为8个字节。</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">short</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码分别声明了三种整数子类型的变量。</p>\n<p>默认情况下，<code>short</code>、<code>long</code>、<code>long long</code>都是带符号的（signed），即<code>signed</code>关键字省略了。它们也可以声明为不带符号（unsigned），使得能够表示的最大值扩大一倍。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>C 语言允许省略<code>int</code>，所以变量声明语句也可以写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">short</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">long</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> c<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不同的计算机，数据类型的字节长度是不一样的。确实需要32位整数时，应使用<code>long</code>类型而不是<code>int</code>类型，可以确保不少于4个字节；确实需要64位的整数时，应该使用<code>long long</code>类型，可以确保不少于8个字节。另一方面，为了节省空间，只需要16位整数时，应使用<code>short</code>类型；需要8位整数时，应该使用<code>char</code>类型。</p>\n<h3 id=\"整数类型的极限值\"><a href=\"#整数类型的极限值\" class=\"headerlink\" title=\"整数类型的极限值\"></a>整数类型的极限值</h3><p>有时候需要查看，当前系统不同整数类型的最大值和最小值，C 语言的头文件<code>limits.h</code>提供了相应的常量，比如<code>SCHAR_MIN</code>代表 signed char 类型的最小值<code>-128</code>，<code>SCHAR_MAX</code>代表 signed char 类型的最大值<code>127</code>。</p>\n<p>为了代码的可移植性，需要知道某种整数类型的极限值时，应该尽量使用这些常量。</p>\n<ul>\n<li><code>SCHAR_MIN</code>，<code>SCHAR_MAX</code>：signed char 的最小值和最大值。</li>\n<li><code>SHRT_MIN</code>，<code>SHRT_MAX</code>：short 的最小值和最大值。</li>\n<li><code>INT_MIN</code>，<code>INT_MAX</code>：int 的最小值和最大值。</li>\n<li><code>LONG_MIN</code>，<code>LONG_MAX</code>：long 的最小值和最大值。</li>\n<li><code>LLONG_MIN</code>，<code>LLONG_MAX</code>：long long 的最小值和最大值。</li>\n<li><code>UCHAR_MAX</code>：unsigned char 的最大值。</li>\n<li><code>USHRT_MAX</code>：unsigned short 的最大值。</li>\n<li><code>UINT_MAX</code>：unsigned int 的最大值。</li>\n<li><code>ULONG_MAX</code>：unsigned long 的最大值。</li>\n<li><code>ULLONG_MAX</code>：unsigned long long 的最大值。</li>\n</ul>\n<h3 id=\"整数的进制\"><a href=\"#整数的进制\" class=\"headerlink\" title=\"整数的进制\"></a>整数的进制</h3><p>C 语言的整数默认都是十进制数，如果要表示八进制数和十六进制数，必须使用专门的表示法。</p>\n<p>八进制使用<code>0</code>作为前缀，比如<code>017</code>、<code>0377</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">012</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 八进制，相当于十进制的10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>十六进制使用<code>0x</code>或<code>0X</code>作为前缀，比如<code>0xf</code>、<code>0X10</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x1A2B</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 十六进制，相当于十进制的6699</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>有些编译器使用<code>0b</code>前缀，表示二进制数，但不是标准。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span>b101010<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意，不同的进制只是整数的书写方法，不会对整数的实际存储方式产生影响。所有整数都是二进制形式存储，跟书写方式无关。不同进制可以混合使用，比如<code>10 + 015 + 0x20</code>是一个合法的表达式。</p>\n<p><code>printf()</code>的进制相关占位符如下。</p>\n<ul>\n<li><code>%d</code>：十进制整数。</li>\n<li><code>%o</code>：八进制整数。</li>\n<li><code>%x</code>：十六进制整数。</li>\n<li><code>%#o</code>：显示前缀<code>0</code>的八进制整数。</li>\n<li><code>%#x</code>：显示前缀<code>0x</code>的十六进制整数。</li>\n<li><code>%#X</code>：显示前缀<code>0X</code>的十六进制整数。</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dec = %d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"octal = %o\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 144</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hex = %x\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 64</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"octal = %#o\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0144</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hex = %#x\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0x64</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hex = %#X\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0X64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"浮点数类型\"><a href=\"#浮点数类型\" class=\"headerlink\" title=\"浮点数类型\"></a>浮点数类型</h2><p>任何有小数点的数值，都会被编译器解释为浮点数。所谓“浮点数”就是使用 m * b<sup>e</sup> 的形式，存储一个数值，<code>m</code>是小数部分，<code>b</code>是基数（通常是<code>2</code>），<code>e</code>是指数部分。这种形式是精度和数值范围的一种结合，可以表示非常大或者非常小的数。</p>\n<p>浮点数的类型声明使用<code>float</code>关键字，可以用来声明浮点数变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">float</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10.5</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>c</code>的就是浮点数类型。</p>\n<p><code>float</code>类型占用4个字节（32位），其中8位存放指数的值和符号，剩下24位存放小数的值和符号。<code>float</code>类型至少能够提供（十进制的）6位有效数字，指数部分的范围为（十进制的）<code>-37</code>到<code>37</code>，即数值范围为10<sup>-37</sup>到10<sup>37</sup>。</p>\n<p>有时候，32位浮点数提供的精度或者数值范围还不够，C 语言又提供了另外两种更大的浮点数类型。</p>\n<ul>\n<li><code>double</code>：占用8个字节（64位），至少提供13位有效数字。</li>\n<li><code>long double</code>：通常占用16个字节。</li>\n</ul>\n<p>注意，由于存在精度限制，浮点数只是一个近似值，它的计算是不精确的，比如 C 语言里面<code>0.1 + 0.2</code>并不等于<code>0.3</code>，而是有一个很小的误差。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>C 语言允许使用科学计数法表示浮点数，使用字母<code>e</code>来分隔小数部分和指数部分。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">123.456e+3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123.456 x 10^3</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">123.456e3</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>e</code>后面如果是加号<code>+</code>，加号可以省略。注意，科学计数法里面<code>e</code>的前后，不能存在空格。</p>\n<p>另外，科学计数法的小数部分如果是<code>0.x</code>或<code>x.0</code>的形式，那么<code>0</code>可以省略。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">0.3E6</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token number\">.3E6</span>\n\n<span class=\"token number\">3.0E6</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token number\">3.E6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h2><p>C 语言原来并没有为布尔值单独设置一个类型，而是使用整数<code>0</code>表示伪，所有非零值表示真。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is true!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>x</code>等于<code>1</code>，C 语言就认为这个值代表真，从而会执行判断体内部的代码。</p>\n<p>C99 标准添加了类型<code>_Bool</code>，表示布尔值。但是，这个类型其实只是整数类型的别名，还是使用<code>0</code>表示伪，<code>1</code>表示真，下面是一个示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">_Bool</span> isNormal<span class=\"token punctuation\">;</span>\n\nisNormal <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isNormal<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Everything is OK.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>头文件<code>stdbool.h</code>定义了另一个类型别名<code>bool</code>，并且定义了<code>true</code>代表<code>1</code>、<code>false</code>代表<code>0</code>。只要加载这个头文件，就可以使用这几个关键字。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h></span></span>\n\nbool flag <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，加载头文件<code>stdbool.h</code>以后，就可以使用<code>bool</code>定义布尔值类型，以及<code>false</code>和<code>true</code>表示真伪。</p>\n<h2 id=\"字面量的类型\"><a href=\"#字面量的类型\" class=\"headerlink\" title=\"字面量的类型\"></a>字面量的类型</h2><p>字面量（literal）指的是代码里面直接出现的值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，<code>x</code>是变量，<code>123</code>就是字面量。</p>\n<p>编译时，字面量也会写入内存，因此编译器必须为字面量指定数据类型，就像必须为变量指定数据类型一样。</p>\n<p>一般情况下，十进制整数字面量（比如<code>123</code>）会被编译器指定为<code>int</code>类型。如果一个数值比较大，超出了<code>int</code>能够表示的范围，编译器会将其指定为<code>long int</code>。如果数值超过了<code>long int</code>，会被指定为<code>unsigned long</code>。如果还不够大，就指定为<code>long long</code>或<code>unsigned long long</code>。</p>\n<p>小数（比如<code>3.14</code>）会被指定为<code>double</code>类型。</p>\n<h2 id=\"字面量后缀\"><a href=\"#字面量后缀\" class=\"headerlink\" title=\"字面量后缀\"></a>字面量后缀</h2><p>有时候，程序员希望为字面量指定一个不同的类型。比如，编译器将一个整数字面量指定为<code>int</code>类型，但是程序员希望将其指定为<code>long</code>类型，这时可以为该字面量加上后缀<code>l</code>或<code>L</code>，编译器就知道要把这个字面量的类型指定为<code>long</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">123L</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，字面量<code>123</code>有后缀<code>L</code>，编译器就会将其指定为<code>long</code>类型。这里<code>123L</code>写成<code>123l</code>，效果也是一样的，但是建议优先使用<code>L</code>，因为小写的<code>l</code>容易跟数字<code>1</code>混淆。</p>\n<p>八进制和十六进制的值，也可以使用后缀<code>l</code>和<code>L</code>指定为 Long 类型，比如<code>020L</code>和<code>0x20L</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0377L</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0x7fffL</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果希望指定为无符号整数<code>unsigned int</code>，可以使用后缀<code>u</code>或<code>U</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">123U</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>L</code>和<code>U</code>可以结合使用，表示<code>unsigned long</code>类型。<code>L</code>和<code>U</code>的大小写和组合顺序无所谓。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">123LU</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>对于浮点数，编译器默认指定为 double 类型，如果希望指定为其他类型，需要在小数后面添加后缀<code>f</code>（float）或<code>l</code>（long double）。</p>\n<p>科学计数法也可以使用后缀。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">1.2345e+10F</span>\n<span class=\"token number\">1.2345e+10L</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>总结一下，常用的字面量后缀有下面这些。</p>\n<ul>\n<li><code>f</code>和<code>F</code>：<code>float</code>类型。</li>\n<li><code>l</code>和<code>L</code>：对于整数是<code>long int</code>类型，对于小数是<code>long double</code>类型。</li>\n<li><code>ll</code>和<code>LL</code>：Long Long 类型，比如<code>3LL</code>。</li>\n<li><code>u</code>和<code>U</code>：表示<code>unsigned int</code>，比如<code>15U</code>、<code>0377U</code>。</li>\n</ul>\n<p><code>u</code>还可以与其他整数后缀结合，放在前面或后面都可以，比如<code>10UL</code>、<code>10ULL</code>和<code>10LLU</code>都是合法的。</p>\n<p>下面是一些示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>           x <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span>      x <span class=\"token operator\">=</span> <span class=\"token number\">1234L</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1234LL</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>           x <span class=\"token operator\">=</span> <span class=\"token number\">1234U</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span>      x <span class=\"token operator\">=</span> <span class=\"token number\">1234UL</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1234ULL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">float</span> x       <span class=\"token operator\">=</span> <span class=\"token number\">3.14f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> x      <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3.14L</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"溢出\"><a href=\"#溢出\" class=\"headerlink\" title=\"溢出\"></a>溢出</h2><p>每一种数据类型都有数值范围，如果存放的数值超出了这个范围（小于最小值或大于最大值），需要更多的二进制位存储，就会发生溢出。大于最大值，叫做向上溢出（overflow）；小于最小值，叫做向下溢出（underflow）。</p>\n<p>一般来说，编译器不会对溢出报错，会正常执行代码，但是会忽略多出来的二进制位，只保留剩下的位，这样往往会得到意想不到的结果。所以，应该避免溢出。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> x <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>x</code>加<code>1</code>，得到的结果不是<code>256</code>，而是<code>0</code>。因为<code>x</code>是<code>unsign char</code>类型，最大值是<code>255</code>（二进制<code>11111111</code>），加<code>1</code>后就发生了溢出，<code>256</code>（二进制<code>100000000</code>）的最高位<code>1</code>被丢弃，剩下的值就是<code>0</code>。</p>\n<p>再看下面的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> ui <span class=\"token operator\">=</span> UINT_MAX<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 4,294,967,295</span>\nui<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ui = %u\\n\"</span><span class=\"token punctuation\">,</span> ui<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\nui<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ui = %u\\n\"</span><span class=\"token punctuation\">,</span> ui<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4,294,967,295</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，常量<code>UINT_MAX</code>是 unsigned int 类型的最大值。如果加<code>1</code>，对于该类型就会溢出，从而得到<code>0</code>；而<code>0</code>是该类型的最小值，再减<code>1</code>，又会得到<code>UINT_MAX</code>。</p>\n<p>溢出很容易被忽视，编译器又不会报错，所以必须非常小心。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码表面看似乎没有问题，但是循环变量<code>i</code>的类型是 unsigned int，这个类型的最小值是<code>0</code>，不可能得到小于0的结果。当<code>i</code>等于0，再减去<code>1</code>的时候，并不会返回<code>-1</code>，而是返回 unsigned int 的类型最大值，这个值总是大于等于<code>0</code>，导致无限循环。</p>\n<p>为了避免溢出，最好方法就是将运算结果与类型的极限值进行比较。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> ui<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 错误</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> ui <span class=\"token operator\">></span> UINT_MAX<span class=\"token punctuation\">)</span> <span class=\"token function\">too_big</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> ui<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 正确</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ui <span class=\"token operator\">></span> UINT_MAX <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">)</span> <span class=\"token function\">too_big</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> ui<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>sum</code>和<code>ui</code>都是 unsigned int 类型，它们相加的和还是 unsigned int 类型，这就有可能发生溢出。但是，不能通过相加的和是否超出了最大值<code>UINT_MAX</code>，来判断是否发生了溢出，因为<code>sum + ui</code>总是返回溢出后的结果，不可能大于<code>UINT_MAX</code>。正确的比较方法是，判断<code>UINT_MAX - sum</code>与<code>ui</code>之间的大小关系。</p>\n<p>下面是另一种错误的写法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 错误</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"negative\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positive\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例的运算结果，会输出<code>positive</code>。原因是变量<code>i</code>和<code>j</code>都是 unsigned int 类型，<code>i - j</code>的结果也是这个类型，最小值为<code>0</code>，不可能得到小于<code>0</code>的结果。正确的写法是写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ....</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"sizeof-运算符\"><a href=\"#sizeof-运算符\" class=\"headerlink\" title=\"sizeof 运算符\"></a>sizeof 运算符</h2><p><code>sizeof</code>是 C 语言提供的一个运算符，返回某种数据类型或某个值占用的字节数量。它的参数可以是数据类型的关键字，也可以是变量名或某个具体的值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 参数为数据类型</span>\n<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 参数为变量</span>\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 参数为数值</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的第一个示例，返回得到<code>int</code>类型占用的字节数量（通常是<code>4</code>或<code>8</code>）。第二个示例返回整数变量占用字节数量，结果与前一个示例完全一样。第三个示例返回浮点数<code>3.14</code>占用的字节数量，由于浮点数的字面量一律存储为 double 类型，所以会返回<code>8</code>，因为 double 类型占用的8个字节。</p>\n<p><code>sizeof</code>运算符的返回值，C 语言只规定是无符号整数，并没有规定具体的类型，而是留给系统自己去决定，<code>sizeof</code>到底返回什么类型。不同的系统中，返回值的类型有可能是<code>unsigned int</code>，也有可能是<code>unsigned long</code>，甚至是<code>unsigned long long</code>，对应的<code>printf()</code>占位符分别是<code>%u</code>、<code>%lu</code>和<code>%llu</code>。这样不利于程序的可移植性。</p>\n<p>C 语言提供了一个解决方法，创造了一个类型别名<code>size_t</code>，用来统一表示<code>sizeof</code>的返回值类型。该别名定义在<code>stddef.h</code>头文件（引入<code>stdio.h</code>时会自动引入）里面，对应当前系统的<code>sizeof</code>的返回值类型，可能是<code>unsigned int</code>，也可能是<code>unsigned long</code>。</p>\n<p>C 语言还提供了一个常量<code>SIZE_MAX</code>，表示<code>size_t</code>可以表示的最大整数。所以，<code>size_t</code>能够表示的整数范围为<code>[0, SIZE_MAX]</code>。</p>\n<p><code>printf()</code>有专门的占位符<code>%zd</code>或<code>%zu</code>，用来处理<code>size_t</code>类型的值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%zd\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，不管<code>sizeof</code>返回值的类型是什么，<code>%zd</code>占位符（或<code>%zu</code>）都可以正确输出。</p>\n<p>如果当前系统不支持<code>%zd</code>或<code>%zu</code>，可使用<code>%u</code>（unsigned int）或<code>%lu</code>（unsigned long int）代替。</p>\n<h2 id=\"类型的自动转换\"><a href=\"#类型的自动转换\" class=\"headerlink\" title=\"类型的自动转换\"></a>类型的自动转换</h2><p>某些情况下，C 语言会自动转换某个值的类型。</p>\n<h3 id=\"赋值运算\"><a href=\"#赋值运算\" class=\"headerlink\" title=\"赋值运算\"></a>赋值运算</h3><p>赋值运算符会自动将右边的值，转成左边变量的类型。</p>\n<p>（1）浮点数赋值给整数变量</p>\n<p>浮点数赋予整数变量时，C 语言直接丢弃小数部分，而不是四舍五入。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>x</code>是整数类型，赋给它的值是一个浮点数。编译器会自动把<code>3.14</code>先转为<code>int</code>类型，丢弃小数部分，再赋值给<code>x</code>，因此<code>x</code>的值是<code>3</code>。</p>\n<p>这种自动转换会导致部分数据的丢失（<code>3.14</code>丢失了小数部分），所以最好不要跨类型赋值，尽量保证变量与所要赋予的值是同一个类型。</p>\n<p>注意，舍弃小数部分时，不是四舍五入，而是整个舍弃。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12.99</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>x</code>等于<code>12</code>，而不是四舍五入的<code>13</code>。</p>\n<p>（2）整数赋值给浮点数变量</p>\n<p>整数赋值给浮点数变量时，会自动转为浮点数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token number\">12</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>y</code>的值不是<code>24</code>，而是<code>24.0</code>，因为等号右边的整数自动转为了浮点数。</p>\n<p>（3）窄类型赋值给宽类型</p>\n<p>字节宽度较小的整数类型，赋值给字节宽度较大的整数变量时，会发生类型提升，即窄类型自动转为宽类型。</p>\n<p>比如，<code>char</code>或<code>short</code>类型赋值给<code>int</code>类型，会自动提升为<code>int</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>x</code>的类型是<code>char</code>，由于赋值给<code>int</code>类型，所以会自动提升为<code>int</code>。</p>\n<p>（4）宽类型赋值给窄类型</p>\n<p>字节宽度较大的类型，赋值给字节宽度较小的变量时，会发生类型降级，自动转为后者的类型。这时可能会发生截值（truncation），系统会自动截去多余的二进制位，导致难以预料的结果。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">int i <span class=\"token operator\">=</span> <span class=\"token number\">321</span><span class=\"token punctuation\">;</span>\nchar ch <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ch 的值是 65 （321 - 256）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，变量<code>ch</code>是<code>char</code>类型，宽度是8个二进制位。变量<code>i</code>是<code>int</code>类型，将<code>i</code>赋值给<code>ch</code>，后者只能容纳<code>i</code>（二进制形式为<code>101000001</code>，共9位）的后八位，前面多出来的二进制位被丢弃，保留后八位就变成了<code>01000001</code>（十进制的65，相当于字符<code>A</code>）。</p>\n<p>浮点数赋值给整数类型的值，也会发生截值，浮点数的小数部分会被截去。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.14159</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> pi<span class=\"token punctuation\">;</span> <span class=\"token comment\">// i 的值为 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>i</code>等于<code>3</code>，<code>pi</code>的小数部分被截去了。</p>\n<h3 id=\"混合类型的运算\"><a href=\"#混合类型的运算\" class=\"headerlink\" title=\"混合类型的运算\"></a>混合类型的运算</h3><p>不同类型的值进行混合计算时，必须先转成同一个类型，才能进行计算。转换规则如下：</p>\n<p>（1）整数与浮点数混合运算时，整数转为浮点数类型，与另一个运算数类型相同。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1.2</span> <span class=\"token comment\">// 4.2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例是<code>int</code>类型与<code>float</code>类型的混合计算，<code>int</code>类型的<code>3</code>会先转成<code>float</code>的<code>3.0</code>，再进行计算，得到<code>4.2</code>。</p>\n<p>（2）不同的浮点数类型混合运算时，宽度较小的类型转为宽度较大的类型，比如<code>float</code>转为<code>double</code>，<code>double</code>转为<code>long double</code>。</p>\n<p>（3）不同的整数类型混合运算时，宽度较小的类型会提升为宽度较大的类型。比如<code>short</code>转为<code>int</code>，<code>int</code>转为<code>long</code>等，有时还会将带符号的类型<code>signed</code>转为无符号<code>unsigned</code>。</p>\n<p>下面例子的执行结果，可能会出人意料。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>）\n  <span class=\"token function\">do_something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>a</code>是带符号整数，<code>sizeof(int)</code>是<code>size_t</code>类型，这是一个无符号整数。按照规则，signed int 自动转为 unsigned int，所以<code>a</code>会自动转成无符号整数<code>4294967291</code>（转换规则是<code>-5</code>加上无符号整数的最大值，再加1），导致比较失败，<code>do_something()</code>不会执行。</p>\n<p>所以，最好避免无符号整数与有符号整数的混合运算。因为这时 C 语言会自动将<code>signed int</code>转为<code>unsigned int</code>，可能不会得到预期的结果。</p>\n<h3 id=\"整数类型的运算\"><a href=\"#整数类型的运算\" class=\"headerlink\" title=\"整数类型的运算\"></a>整数类型的运算</h3><p>两个相同类型的整数运算时，或者单个整数的运算，一般来说，运算结果也属于同一类型。但是有一个例外，宽度小于<code>int</code>的类型，运算结果会自动提升为<code>int</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token number\">66</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"negative\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positive\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>a</code>是 unsigned char 类型，这个类型不可能小于0，但是<code>-a</code>不是 unsigned char 类型，会自动转为 int 类型，导致上面的代码输出 negative。</p>\n<p>再看下面的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> b <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">do_something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token function\">do_something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，表达式<code>a - 5</code>和<code>b + c</code>都会自动转为 int 类型，所以函数<code>do_something()</code>会执行两次。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>函数的参数和返回值，会自动转成函数定义里指定的类型。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">dostuff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span> m <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> n <span class=\"token operator\">=</span> <span class=\"token number\">43</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">dostuff</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，参数变量<code>m</code>和<code>n</code>不管原来的类型是什么，都会转成函数<code>dostuff()</code>定义的参数类型。</p>\n<p>下面是返回值自动转换类型的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数内部的变量<code>a</code>是<code>int</code>类型，但是返回的值是<code>char</code>类型，因为函数定义中返回的是这个类型。</p>\n<h2 id=\"类型的显式转换\"><a href=\"#类型的显式转换\" class=\"headerlink\" title=\"类型的显式转换\"></a>类型的显式转换</h2><p>原则上，应该避免类型的自动转换，防止出现意料之外的结果。C 语言提供了类型的显式转换，允许手动转换类型。</p>\n<p>只要在一个值或变量的前面，使用圆括号指定类型<code>(type)</code>，就可以将这个值或变量转为指定的类型，这叫做“类型指定”（casting）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> ch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例将变量<code>ch</code>转成无符号的字符类型。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>(long int)</code>将<code>10</code>显式转为<code>long int</code>类型。这里的显示转换其实是不必要的，因为赋值运算符会自动将右边的值，转为左边变量的类型。</p>\n<h2 id=\"可移植类型\"><a href=\"#可移植类型\" class=\"headerlink\" title=\"可移植类型\"></a>可移植类型</h2><p>C 语言的整数类型（short、int、long）在不同计算机上，占用的字节宽度可能是不一样的，无法提前知道它们到底占用多少个字节。</p>\n<p>程序员有时控制准确的字节宽度，这样的话，代码可以有更好的可移植性，头文件<code>stdint.h</code>创造了一些新的类型别名。</p>\n<p>（1）精确宽度类型(exact-width integer type)，保证某个整数类型的宽度是确定的。</p>\n<ul>\n<li><code>int8_t</code>：8位有符号整数。</li>\n<li><code>int16_t</code>：16位有符号整数。</li>\n<li><code>int32_t</code>：32位有符号整数。</li>\n<li><code>int64_t</code>：64位有符号整数。</li>\n<li><code>uint8_t</code>：8位无符号整数。</li>\n<li><code>uint16_t</code>：16位无符号整数。</li>\n<li><code>uint32_t</code>：32位无符号整数。</li>\n<li><code>uint64_t</code>：64位无符号整数。</li>\n</ul>\n<p>上面这些都是类型别名，编译器会指定它们指向的底层类型。比如，某个系统中，如果<code>int</code>类型为32位，<code>int32_t</code>就会指向<code>int</code>；如果<code>long</code>类型为32位，<code>int32_t</code>则会指向<code>long</code>。</p>\n<p>下面是一个使用示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  int32_t x32 <span class=\"token operator\">=</span> <span class=\"token number\">45933945</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x32 = %d\\n\"</span><span class=\"token punctuation\">,</span> x32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>x32</code>声明为<code>int32_t</code>类型，可以保证是32位的宽度。</p>\n<p>（2）最小宽度类型（minimum width type），保证某个整数类型的最小长度。</p>\n<ul>\n<li>int_least8_t</li>\n<li>int_least16_t</li>\n<li>int_least32_t</li>\n<li>int_least64_t</li>\n<li>uint_least8_t</li>\n<li>uint_least16_t</li>\n<li>uint_least32_t</li>\n<li>uint_least64_t</li>\n</ul>\n<p>上面这些类型，可以保证占据的字节不少于指定宽度。比如，<code>int_least8_t</code>表示可以容纳8位有符号整数的最小宽度的类型。</p>\n<p>（3）最快的最小宽度类型（fast minimum width type），可以使整数计算达到最快的类型。</p>\n<ul>\n<li>int_fast8_t</li>\n<li>int_fast16_t</li>\n<li>int_fast32_t</li>\n<li>int_fast64_t</li>\n<li>uint_fast8_t</li>\n<li>uint_fast16_t</li>\n<li>uint_fast32_t</li>\n<li>uint_fast64_t</li>\n</ul>\n<p>上面这些类型是保证字节宽度的同时，追求最快的运算速度，比如<code>int_fast8_t</code>表示对于8位有符号整数，运算速度最快的类型。这是因为某些机器对于特定宽度的数据，运算速度最快，举例来说，32位计算机对于32位数据的运算速度，会快于16位数据。</p>\n<p>（4）可以保存指针的整数类型。</p>\n<ul>\n<li><code>intptr_t</code>：可以存储指针（内存地址）的有符号整数类型。</li>\n<li><code>uintptr_t</code>：可以存储指针的无符号整数类型。</li>\n</ul>\n<p>（5）最大宽度整数类型，用于存放最大的整数。</p>\n<ul>\n<li><code>intmax_t</code>：可以存储任何有效的有符号整数的类型。</li>\n<li><code>uintmax_t</code>：可以存放任何有效的无符号整数的类型。</li>\n</ul>\n<p>上面的这两个类型的宽度比<code>long long</code>和<code>unsigned long</code>更大。</p>\n<h1 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h1><p>指针是 C 语言最重要的概念之一，也是最难理解的概念之一。</p>\n<h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>指针是什么？首先，它是一个值，这个值代表一个内存地址，因此指针相当于指向某个内存地址的路标。</p>\n<p>字符<code>*</code>表示指针，通常跟在类型关键字的后面，表示指针指向的是什么类型的值。比如，<code>char*</code>表示一个指向字符的指针，<code>float*</code>表示一个指向<code>float</code>类型的值的指针。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> intPtr<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例声明了一个变量<code>intPtr</code>，它是一个指针，指向的内存地址存放的是一个整数。</p>\n<p>星号<code>*</code>可以放在变量名与类型关键字之间的任何地方，下面的写法都是有效的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>   <span class=\"token operator\">*</span>intPtr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> intPtr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span>  intPtr<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>本书使用星号紧跟在类型关键字后面的写法（即<code>int* intPtr;</code>），因为这样可以体现，指针变量就是一个普通变量，只不过它的值是内存地址而已。</p>\n<p>这种写法有一个地方需要注意，如果同一行声明两个指针变量，那么需要写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 正确</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> foo<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> bar<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 错误</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，第二行的执行结果是，<code>foo</code>是整数指针变量，而<code>bar</code>是整数变量，即<code>*</code>只对第一个变量生效。</p>\n<p>一个指针指向的可能还是指针，这时就要用两个星号<code>**</code>表示。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> foo<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例表示变量<code>foo</code>是一个指针，指向的还是一个指针，第二个指针指向的则是一个整数。</p>\n<h2 id=\"运算符-1\"><a href=\"#运算符-1\" class=\"headerlink\" title=\"* 运算符\"></a>* 运算符</h2><p><code>*</code>这个符号除了表示指针以外，还可以作为运算符，用来取出指针变量所指向的内存地址里面的值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>increment()</code>的参数是一个整数指针<code>p</code>。函数体里面，<code>*p</code>就表示指针<code>p</code>所指向的那个值。对<code>*p</code>赋值，就表示改变指针所指向的那个地址里面的值。</p>\n<p>上面函数的作用是将参数值加<code>1</code>。该函数没有返回值，因为传入的是地址，函数体内部对该地址包含的值的操作，会影响到函数外部，所以不需要返回值。事实上，函数内部通过指针，将值传到外部，是 C 语言的常用方法。</p>\n<p>变量地址而不是变量值传入函数，还有一个好处。对于需要大量存储空间的大型变量，复制变量值传入函数，非常浪费时间和空间，不如传入指针来得高效。</p>\n<h2 id=\"amp-运算符\"><a href=\"#amp-运算符\" class=\"headerlink\" title=\"&amp; 运算符\"></a>&amp; 运算符</h2><p><code>&amp;</code>运算符用来取出一个变量所在的内存地址。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x's address is %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>x</code>是一个整数变量，<code>&amp;x</code>就是<code>x</code>的值所在的内存地址。<code>printf()</code>的<code>%p</code>是内存地址的占位符，可以打印出内存地址。</p>\n<p>上一小节中，参数变量加<code>1</code>的函数，可以像下面这样使用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，调用<code>increment()</code>函数以后，变量<code>x</code>的值就增加了1，原因就在于传入函数的是变量<code>x</code>的地址<code>&amp;x</code>。</p>\n<p><code>&amp;</code>运算符与<code>*</code>运算符互为逆运算，下面的表达式总是成立。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 正确</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"指针变量的初始化\"><a href=\"#指针变量的初始化\" class=\"headerlink\" title=\"指针变量的初始化\"></a>指针变量的初始化</h2><p>声明指针变量之后，编译器会为指针变量本身分配一个内存空间，但是这个内存空间里面的值是随机的，也就是说，指针变量指向的值是随机的。这时一定不能去读写指针变量指向的地址，因为那个地址是随机地址，很可能会导致严重后果。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面的代码是错的，因为<code>p</code>指向的那个地址是随机的，向这个随机地址里面写入<code>1</code>，会导致意想不到的结果。</p>\n<p>正确做法是指针变量声明后，必须先让它指向一个分配好的地址，然后再进行读写，这叫做指针变量的初始化。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>p</code>是指针变量，声明这个变量后，<code>p</code>会指向一个随机的内存地址。这时要将它指向一个已经分配好的内存地址，上例就是再声明一个整数变量<code>i</code>，编译器会为<code>i</code>分配内存地址，然后让<code>p</code>指向<code>i</code>的内存地址（<code>p = &amp;i;</code>）。完成初始化之后，就可以对<code>p</code>指向的内存地址进行赋值了（<code>*p = 13;</code>）。</p>\n<p>为了防止读写未初始化的指针变量，可以养成习惯，将未初始化的指针变量设为<code>NULL</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>NULL</code>在 C 语言中是一个常量，表示地址为<code>0</code>的内存空间，这个地址是无法使用的，读写该地址会报错。</p>\n<h2 id=\"指针的运算\"><a href=\"#指针的运算\" class=\"headerlink\" title=\"指针的运算\"></a>指针的运算</h2><p>指针本质上就是一个无符号整数，代表了内存地址。它可以进行运算，但是规则并不是整数运算的运算。</p>\n<p>（1）指针与整数值的加减运算</p>\n<p>指针与整数值的运算，表示指针的移动。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">short</span><span class=\"token operator\">*</span> j<span class=\"token punctuation\">;</span>\nj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x1234</span><span class=\"token punctuation\">;</span>\nj <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0x1236</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>j</code>是一个指针，指向内存地址<code>0x1234</code>。你可能以为<code>j + 1</code>等于<code>0x1235</code>，但正确答案是<code>0x1236</code>。原因是<code>j + 1</code>表示指针向高位移动一个单位，而一个单位的<code>short</code>类型占据两个字节的宽度，所以相当于向高位移动两个字节。同样的，<code>j - 1</code>得到的结果是<code>0x1232</code>。</p>\n<p>指针移动的单位，与指针指向的数据类型有关。数据类型占据多少个字节，每单位就移动多少个字节。</p>\n<p>（2）指针与指针的加法运算</p>\n<p>指针只能与整数值进行加减运算，两个指针进行加法是非法的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span><span class=\"token operator\">*</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span><span class=\"token operator\">*</span> k<span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> k<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 非法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例是两个指针相加，这是非法的。</p>\n<p>（3）指针与指针的减法</p>\n<p>相同类型的指针允许进行减法运算，返回它们之间的距离，即相隔多少个数据单位。</p>\n<p>高位地址减去低位地址，返回的是正值；低位地址减去高位地址，返回的是负值。</p>\n<p>这时，减法返回的值属于<code>ptrdiff_t</code>类型，这是一个带符号的整数类型别名，具体类型根据系统不同而不同。这个类型的原型定义在头文件<code>stddef.h</code>里面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">short</span><span class=\"token operator\">*</span> j1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">short</span><span class=\"token operator\">*</span> j2<span class=\"token punctuation\">;</span>\n\nj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x1234</span><span class=\"token punctuation\">;</span>\nj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x1236</span><span class=\"token punctuation\">;</span>\n\nptrdiff_t dist <span class=\"token operator\">=</span> j2 <span class=\"token operator\">-</span> j1<span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>j1</code>和<code>j2</code>是两个指向 short 类型的指针，变量<code>dist</code>是它们之间的距离，类型为<code>ptrdiff_t</code>，值为<code>1</code>，因为相差2个字节正好存放一个 short 类型的值。</p>\n<p>（4）指针与指针的比较运算</p>\n<p>指针之间的比较运算，比较的是各自的内存地址哪一个更大，返回值是整数<code>1</code>（true）或<code>0</code>（false）。</p>\n<h1 id=\"函数-1\"><a href=\"#函数-1\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>函数是一段可以重复执行的代码。它可以接受不同的参数，完成对应的操作。下面的例子就是一个函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">plus_one</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的代码声明了一个函数<code>plus_one()</code>。</p>\n<p>函数声明的语法有以下几点，需要注意。</p>\n<p>（1）返回值类型。函数声明时，首先需要给出返回值的类型，上例是<code>int</code>，表示函数<code>plus_one()</code>返回一个整数。</p>\n<p>（2）参数。函数名后面的圆括号里面，需要声明参数的类型和参数名，<code>plus_one(int n)</code>表示这个函数有一个整数参数<code>n</code>。</p>\n<p>（3）函数体。函数体要写在大括号里面，后面（即大括号外面）不需要加分号。大括号的起始位置，可以跟函数名在同一行，也可以另起一行，本书采用同一行的写法。</p>\n<p>（4）<code>return</code>语句。<code>return</code>语句给出函数的返回值，程序运行到这一行，就会跳出函数体，结束函数的调用。如果函数没有返回值，可以省略<code>return</code>语句，或者写成<code>return;</code>。</p>\n<p>调用函数时，只要在函数名后面加上圆括号就可以了，实际的参数放在圆括号里面，就像下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">plus_one</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a 等于 14</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>函数调用时，参数个数必须与定义里面的参数个数一致，参数过多或过少都会报错。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">plus_one</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">plus_one</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span>\n<span class=\"token function\">plus_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>plus_one()</code>只能接受一个参数，传入两个参数或不传参数，都会报错。</p>\n<p>函数必须声明后使用，否则会报错。也就是说，一定要在使用<code>plus_one()</code>之前，声明这个函数。如果像下面这样写，编译时会报错。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">plus_one</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">plus_one</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，在调用<code>plus_one()</code>之后，才声明这个函数，编译就会报错。</p>\n<p>C 语言标准规定，函数只能声明在源码文件的顶层，不能声明在其他函数内部。</p>\n<p>不返回值的函数，使用<code>void</code>关键字表示返回值的类型。没有参数的函数，声明时要用<code>void</code>关键字表示参数类型。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的<code>myFunc()</code>函数，既没有返回值，调用时也不需要参数。</p>\n<p>函数可以调用自身，这就叫做递归（recursion）。下面是斐波那契数列的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token function\">Fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">Fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>Fibonacci()</code>调用了自身，大大简化了算法。</p>\n<h2 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main()\"></a>main()</h2><p>C 语言规定，<code>main()</code>是程序的入口函数，即所有的程序一定要包含一个<code>main()</code>函数。程序总是从这个函数开始执行，如果没有该函数，程序就无法启动。其他函数都是通过它引入程序的。</p>\n<p><code>main()</code>的写法与其他函数一样，要给出返回值的类型和参数的类型，就像下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，最后的<code>return 0;</code>表示函数结束运行，返回<code>0</code>。</p>\n<p>C 语言约定，返回值<code>0</code>表示函数运行成功，如果返回其他非零整数，就表示运行失败，代码出了问题。系统根据<code>main()</code>的返回值，作为整个程序的返回值，确定程序是否运行成功。</p>\n<p>正常情况下，如果<code>main()</code>里面省略<code>return 0</code>这一行，编译器会自动加上。所以，写成下面这样，效果完全一样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span>\\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>由于 C 语言只会对<code>main()</code>函数默认添加返回值，对其他函数不会这样做，所以建议总是保留<code>return</code>语句，以便形成统一的代码风格。</p>\n<h2 id=\"参数的传值引用\"><a href=\"#参数的传值引用\" class=\"headerlink\" title=\"参数的传值引用\"></a>参数的传值引用</h2><p>如果函数的参数是一个变量，那么调用时，传入的是这个变量的值的拷贝，而不是变量本身。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，调用<code>increment(i)</code>以后，变量<code>i</code>本身不会发生变化，还是等于<code>10</code>。因为传入函数的是<code>i</code>的拷贝，而不是<code>i</code>本身，拷贝的变化，影响不到原始变量。这就叫做“传值引用”。</p>\n<p>所以，如果参数变量发生变化，最好把它作为返回值传出来。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\ni <span class=\"token operator\">=</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>再看下面的例子，<code>Swap()</code>函数用来交换两个变量的值，由于传值引用，下面的写法不会生效。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n  temp <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n  y <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无效</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的写法不会产生交换变量值的效果，因为传入的变量是原始变量<code>a</code>和<code>b</code>的拷贝，不管函数内部怎么操作，都影响不了原始变量。</p>\n<p>如果想要传入变量本身，只有一个办法，就是传入变量的地址。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n  temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>y <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，通过传入变量<code>x</code>和<code>y</code>的地址，函数内部就可以直接操作该地址，从而实现交换两个变量的值。</p>\n<p>虽然跟传参无关，这里特别提一下，函数不要返回内部变量的指针。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数返回内部变量<code>i</code>的指针，这种写法是错的。因为当函数结束运行时，内部变量就消失了，这时指向内部变量<code>i</code>的内存地址就是无效的，再去使用这个地址是非常危险的。</p>\n<h2 id=\"函数指针\"><a href=\"#函数指针\" class=\"headerlink\" title=\"函数指针\"></a>函数指针</h2><p>函数本身就是一段内存里面的代码，C 语言允许通过指针获取函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>print_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>print<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>print_ptr</code>是一个函数指针，它指向函数<code>print()</code>的地址。函数<code>print()</code>的地址可以用<code>&amp;print</code>获得。注意，<code>(*print_ptr)</code>一定要写在圆括号里面，否则函数参数<code>(int)</code>的优先级高于<code>*</code>，整个式子就会变成<code>void* print_ptr(int)</code>。</p>\n<p>有了函数指针，通过它也可以调用函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>print_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>比较特殊的是，C 语言还规定，函数名本身就是指向函数代码的指针，通过函数名就能获取函数地址。也就是说，<code>print</code>和<code>&amp;print</code>是一回事。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>print <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>print<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>因此，上面代码的<code>print_ptr</code>等同于<code>print</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>print_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>print<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或</span>\n<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>print_ptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> print<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>print_ptr <span class=\"token operator\">==</span> print<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以，对于任意函数，都有五种调用函数的写法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 写法一</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 写法二</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 写法三</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 写法四</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>print_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 写法五</span>\n<span class=\"token function\">print_ptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了简洁易读，一般情况下，函数名前面都不加<code>*</code>和<code>&amp;</code>。</p>\n<p>这种特性的一个应用是，如果一个函数的参数或返回值，也是一个函数，那么函数原型可以写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>myfunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例可以清晰地表明，函数<code>compute()</code>的第一个参数也是一个函数。</p>\n<h2 id=\"函数原型\"><a href=\"#函数原型\" class=\"headerlink\" title=\"函数原型\"></a>函数原型</h2><p>前面说过，函数必须先声明，后使用。由于程序总是先运行<code>main()</code>函数，导致所有其他函数都必须在<code>main()</code>函数之前声明。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>main()</code>函数必须在最后声明，否则编译时会产生警告，找不到<code>func1()</code>或<code>func2()</code>的声明。</p>\n<p>但是，<code>main()</code>是整个程序的入口，也是主要逻辑，放在最前面比较好。另一方面，对于函数较多的程序，保证每个函数的顺序正确，会变得很麻烦。</p>\n<p>C 语言提供的解决方法是，只要在程序开头处给出函数原型，函数就可以先使用、后声明。所谓函数原型，就是提前告诉编译器，每个函数的返回类型和参数类型。其他信息都不需要，也不用包括函数体，具体的函数实现可以后面再补上。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">twice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">twice</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">twice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>twice()</code>的实现是放在<code>main()</code>后面，但是代码头部先给出了函数原型，所以可以正确编译。只要提前给出函数原型，函数具体的实现放在哪里，就不重要了。</p>\n<p>函数原型包括参数名也可以，虽然这样对于编译器是多余的，但是阅读代码的时候，可能有助于理解函数的意图。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">twice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">twice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>twice</code>函数的参数名<code>num</code>，无论是否出现在原型里面，都是可以的。</p>\n<p>注意，函数原型必须以分号结尾。</p>\n<p>一般来说，每个源码文件的头部，都会给出当前脚本使用的所有函数的原型。</p>\n<h2 id=\"exit\"><a href=\"#exit\" class=\"headerlink\" title=\"exit()\"></a>exit()</h2><p><code>exit()</code>函数用来终止整个程序的运行。一旦执行到该函数，程序就会立即结束。该函数的原型定义在头文件<code>stdlib.h</code>里面。</p>\n<p><code>exit()</code>可以向程序外部返回一个值，它的参数就是程序的返回值。一般来说，使用两个常量作为它的参数：<code>EXIT_SUCCESS</code>（相当于 0）表示程序运行成功，<code>EXIT_FAILURE</code>（相当于 1）表示程序异常中止。这两个常数也是定义在<code>stdlib.h</code>里面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 程序运行成功</span>\n<span class=\"token comment\">// 等同于 exit(0);</span>\n<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 程序异常中止</span>\n<span class=\"token comment\">// 等同于 exit(1);</span>\n<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在<code>main()</code>函数里面，<code>exit()</code>等价于使用<code>return</code>语句。其他函数使用<code>exit()</code>，就是终止整个程序的运行，没有其他作用。</p>\n<p>C 语言还提供了一个<code>atexit()</code>函数，用来登记<code>exit()</code>执行时额外执行的函数，用来做一些退出程序时的收尾工作。该函数的原型也是定义在头文件<code>stdlib.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">atexit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>atexit()</code>的参数是一个函数指针。注意，它的参数函数（上例的<code>print</code>）不能接受参数，也不能有返回值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"something wrong!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">atexit</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>exit()</code>执行时会先自动调用<code>atexit()</code>注册的<code>print()</code>函数，然后再终止程序。</p>\n<h2 id=\"函数说明符\"><a href=\"#函数说明符\" class=\"headerlink\" title=\"函数说明符\"></a>函数说明符</h2><p>C 语言提供了一些函数说明符，让函数用法更加明确。</p>\n<h3 id=\"extern-说明符\"><a href=\"#extern-说明符\" class=\"headerlink\" title=\"extern 说明符\"></a>extern 说明符</h3><p>对于多文件的项目，源码文件会用到其他文件声明的函数。这时，当前文件里面，需要给出外部函数的原型，并用<code>extern</code>说明该函数的定义来自其他文件。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>foo()</code>定义在其他文件，<code>extern</code>告诉编译器当前文件不包含该函数的定义。</p>\n<p>不过，由于函数原型默认就是<code>extern</code>，所以这里不加<code>extern</code>，效果是一样的。</p>\n<h3 id=\"static-说明符\"><a href=\"#static-说明符\" class=\"headerlink\" title=\"static 说明符\"></a>static 说明符</h3><p>默认情况下，每次调用函数时，函数的内部变量都会重新初始化，不会保留上一次运行的值。<code>static</code>说明符可以改变这种行为。</p>\n<p><code>static</code>用于函数内部声明变量时，表示该变量只需要初始化一次，不需要在每次调用时都进行初始化。也就是说，它的值在两次调用之间保持不变。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 只初始化一次</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span>\n  <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span>\n  <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3</span>\n  <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 4</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>counter()</code>的内部变量<code>count</code>，使用<code>static</code>说明符修饰，表明这个变量只初始化一次，以后每次调用时都会使用上一次的值，造成递增的效果。</p>\n<p>注意，<code>static</code>修饰的变量初始化时，只能赋值为常量，不能赋值为变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>j</code>属于静态变量，初始化时不能赋值为另一个变量<code>i</code>。</p>\n<p>另外，在块作用域中，<code>static</code>声明的变量有默认值<code>0</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>static</code>可以用来修饰函数本身。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Twice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>static</code>关键字表示该函数只能在当前文件里使用，如果没有这个关键字，其他文件也可以使用这个函数（通过声明函数原型）。</p>\n<p><code>static</code>也可以用在参数里面，修饰参数数组。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>static</code>对程序行为不会有任何影响，只是用来告诉编译器，该数组长度至少为3，某些情况下可以加快程序运行速度。另外，需要注意的是，对于多维数组的参数，<code>static</code>仅可用于第一维的说明。</p>\n<h3 id=\"const-说明符\"><a href=\"#const-说明符\" class=\"headerlink\" title=\"const 说明符\"></a>const 说明符</h3><p>函数参数里面的<code>const</code>说明符，表示函数内部不得修改该参数变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>f()</code>的参数是一个指针<code>p</code>，函数内部可能会改掉它所指向的值<code>*p</code>，从而影响到函数外部。</p>\n<p>为了避免这种情况，可以在声明函数时，在指针参数前面加上<code>const</code>说明符，告诉编译器，函数内部不能修改该参数所指向的值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 该行报错</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，声明函数时，<code>const</code>指定不能修改指针<code>p</code>指向的值，所以<code>*p = 0</code>就会报错。</p>\n<p>但是上面这种写法，只限制修改<code>p</code>所指向的值，而<code>p</code>本身的地址是可以修改的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n  p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 允许修改</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>p</code>本身是可以修改，<code>const</code>只限定<code>*p</code>不能修改。</p>\n<p>如果想限制修改<code>p</code>，可以把<code>const</code>放在<code>p</code>前面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n  p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 该行报错</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果想同时限制修改<code>p</code>和<code>*p</code>，需要使用两个<code>const</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>有些函数的参数数量是不确定的，声明函数的时候，可以使用省略号<code>...</code>表示可变数量的参数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例是<code>printf()</code>函数的原型，除了第一个参数，其他参数的数量是可变的，与格式字符串里面的占位符数量有关。这时，就可以用<code>...</code>表示可变数量的参数。</p>\n<p>注意，<code>...</code>符号必须放在参数序列的结尾，否则会报错。</p>\n<p>头文件<code>stdarg.h</code>定义了一些宏，可以操作可变参数。</p>\n<p>（1）<code>va_list</code>：一个数据类型，用来定义一个可变参数对象。它必须在操作可变参数时，首先使用。</p>\n<p>（2）<code>va_start</code>：一个函数，用来初始化可变参数对象。它接受两个参数，第一个参数是可变参数对象，第二个参数是原始函数里面，可变参数之前的那个参数，用来为可变参数定位。</p>\n<p>（3）<code>va_arg</code>：一个函数，用来取出当前那个可变参数，每次调用后，内部指针就会指向下一个可变参数。它接受两个参数，第一个是可变参数对象，第二个是当前可变参数的类型。</p>\n<p>（4）<code>va_end</code>：一个函数，用来清理可变参数对象。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">double</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  va_list ap<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    total <span class=\"token operator\">+=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> total <span class=\"token operator\">/</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>va_list ap</code>定义<code>ap</code>为可变参数对象，<code>va_start(ap, i)</code>将参数<code>i</code>后面的参数统一放入<code>ap</code>，<code>va_arg(ap, double)</code>用来从<code>ap</code>依次取出一个参数，并且指定该参数为 double 类型，<code>va_end(ap)</code>用来清理可变参数对象。</p>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><h2 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>数组是一组相同类型的值，按照顺序储存在一起。数组通过变量名后加方括号表示，方括号里面是数组的成员数量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> scores<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例声明了一个数组<code>scores</code>，里面包含100个成员，每个成员都是<code>int</code>类型。</p>\n<p>注意，声明数组时，必须给出数组的大小。</p>\n<p>数组的成员从<code>0</code>开始编号，所以数组<code>scores[100]</code>就是从第0号成员一直到第99号成员，最后一个成员的编号会比数组长度小<code>1</code>。</p>\n<p>数组名后面使用方括号指定编号，就可以引用该成员。也可以通过该方式，对该位置进行赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">scores<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\nscores<span class=\"token punctuation\">[</span><span class=\"token number\">99</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例对数组<code>scores</code>的第一个位置和最后一个位置，进行了赋值。</p>\n<p>注意，如果引用不存在的数组成员（即越界访问数组），并不会报错，所以必须非常小心。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> scores<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nscores<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">51</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，数组<code>scores</code>只有100个成员，因此<code>scores[100]</code>这个位置是不存在的。但是，引用这个位置并不会报错，会正常运行，使得紧跟在<code>scores</code>后面的那块内存区域被赋值，而那实际上是其他变量的区域，因此不知不觉就更改了其他变量的值。这很容易引发错误，而且难以发现。</p>\n<p>数组也可以在声明时，使用大括号，同时对每一个成员赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3490</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意，使用大括号赋值时，必须在数组声明时赋值，否则编译时会报错。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3490</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码中，数组<code>a</code>声明之后再进行大括号赋值，导致报错。</p>\n<p>报错的原因是，C 语言规定，数组变量一旦声明，就不得修改变量指向的地址，具体会在后文解释。由于同样的原因，数组赋值之后，再用大括号修改值，也是不允许的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3490</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码中，数组<code>a</code>赋值后，再用大括号重新赋值也是不允许的。</p>\n<p>使用大括号赋值时，大括号里面的值不能多于数组的长度，否则编译时会报错。</p>\n<p>如果大括号里面的值，少于数组的成员数量，那么未赋值的成员自动初始化为<code>0</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3490</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3490</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果要将整个数组的每一个成员都设置为零，最简单的写法就是下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>数组初始化时，可以指定为哪些位置的成员赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，数组的2号、9号、14号位置被赋值，其他位置的值都自动设为0。</p>\n<p>指定位置的赋值可以不按照顺序，下面的写法与上面的例子是等价的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>指定位置的赋值与顺序赋值，可以结合使用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，0号、5号、6号、10号、11号被赋值。</p>\n<p>C 语言允许省略方括号里面的数组成员数量，这时将根据大括号里面的值的数量，自动确定数组的长度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3490</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3490</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，数组<code>a</code>的长度，将根据大括号里面的值的数量，确定为<code>3</code>。</p>\n<p>省略成员数量时，如果同时采用指定位置的赋值，那么数组长度将是最大的指定位置再加1。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，数组<code>a</code>的最大指定位置是<code>9</code>，所以数组的长度是10。</p>\n<h2 id=\"数组长度\"><a href=\"#数组长度\" class=\"headerlink\" title=\"数组长度\"></a>数组长度</h2><p><code>sizeof</code>运算符会返回整个数组的字节长度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3490</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> arrLen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>sizeof</code>返回数组<code>a</code>的字节长度是<code>12</code>。</p>\n<p>由于数组成员都是同一个类型，每个成员的字节长度都是一样的，所以数组整体的字节长度除以某个数组成员的字节长度，就可以得到数组的成员数量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>sizeof(a)</code>是整个数组的字节长度，<code>sizeof(a[0])</code>是数组成员的字节长度，相除就是数组的成员数量。</p>\n<p>注意，<code>sizeof</code>返回值的数据类型是<code>size_t</code>，所以<code>sizeof(a) / sizeof(a[0])</code>的数据类型也是<code>size_t</code>。在<code>printf()</code>里面的占位符，要用<code>%zd</code>或<code>%zu</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%zu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 48</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%zu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 4</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%zu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>sizeof(x) / sizeof(int)</code>就可以得到数组成员数量<code>12</code>。</p>\n<h2 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h2><p>C 语言允许声明多个维度的数组，有多少个维度，就用多少个方括号，比如二维数组就使用两个方括号。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> board<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例声明了一个二维数组，第一个维度有10个成员，第二个维度也有10个成员。</p>\n<p>多维数组可以理解成，上层维度的每个成员本身就是一个数组。比如上例中，第一个维度的每个成员本身就是一个有10个成员的数组，因此整个二维数组共有100个成员（10 x 10 = 100）。</p>\n<p>三维数组就使用三个方括号声明，以此类推。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>引用二维数组的每个成员时，需要使用两个方括号，同时指定两个维度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\nboard<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意，<code>board[0][0]</code>不能写成<code>board[0, 0]</code>，因为<code>0, 0</code>是一个逗号表达式，返回第二个值，所以<code>board[0, 0]</code>等同于<code>board[0]</code>。</p>\n<p>跟一维数组一样，多维数组每个维度的第一个成员也是从<code>0</code>开始编号。</p>\n<p>多维数组也可以使用大括号，一次性对所有成员赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>a</code>是一个二维数组，这种赋值写法相当于将第一维的每个成员写成一个数组。这种写法不用为每个成员都赋值，缺少的成员会自动设置为<code>0</code>。</p>\n<p>多维数组也可以指定位置，进行初始化赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，指定了<code>[0][0]</code>和<code>[1][1]</code>位置的值，其他位置就自动设为<code>0</code>。</p>\n<p>不管数组有多少维度，在内存里面都是线性存储，<code>a[0][0]</code>的后面是<code>a[0][1]</code>，<code>a[0][1]</code>的后面是<code>a[1][0]</code>，以此类推。因此，多维数组也可以使用单层大括号赋值，下面的语句是上面的赋值语句是完全等同的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"变长数组\"><a href=\"#变长数组\" class=\"headerlink\" title=\"变长数组\"></a>变长数组</h2><p>数组声明的时候，数组长度除了使用常量，也可以使用变量。这叫做变长数组（variable-length array，简称 VLA）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，数组<code>arr</code>就是变长数组，因为它的长度取决于变量<code>n</code>的值，编译器没法事先确定，只有运行时才能知道<code>n</code>是多少。</p>\n<p>变长数组的根本特征，就是数组长度只有运行时才能确定。它的好处是程序员不必在开发时，随意为数组指定一个估计的长度，程序可以在运行时为数组分配精确的长度。</p>\n<p>任何长度需要运行时才能确定的数组，都是变长数组。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a3<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，三个数组的长度都需要运行代码才能知道，编译器并不知道它们的长度，所以它们都是变长数组。</p>\n<p>变长数组也可以用于多维数组。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>c[m][n]</code>就是二维变长数组。</p>\n<h2 id=\"数组的地址\"><a href=\"#数组的地址\" class=\"headerlink\" title=\"数组的地址\"></a>数组的地址</h2><p>数组是一连串连续储存的同类型值，只要获得起始地址（首个成员的内存地址），就能推算出其他成员的地址。请看下面的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\n\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Prints \"11\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>&amp;a[0]</code>就是数组<code>a</code>的首个成员<code>11</code>的内存地址，也是整个数组的起始地址。反过来，从这个地址（<code>*p</code>），可以获得首个成员的值<code>11</code>。</p>\n<p>由于数组的起始地址是常用操作，<code>&amp;array[0]</code>的写法有点麻烦，C 语言提供了便利写法，数组名等同于起始地址，也就是说，数组名就是指向第一个成员（<code>array[0]</code>）的指针。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>&amp;a[0]</code>和数组名<code>a</code>是等价的。</p>\n<p>这样的话，如果把数组名传入一个函数，就等同于传入一个指针变量。在函数内部，就可以通过这个指针变量获得整个数组。</p>\n<p>函数接受数组作为参数，函数原型可以写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 写法一</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 写法二</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，传入一个整数数组，与传入一个整数指针是同一回事，数组符号<code>[]</code>与指针符号<code>*</code>是可以互换的。下一个例子是通过数组指针对成员求和。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 假定数组有 10 个成员</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    total <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，传入函数的是一个指针<code>arr</code>（也是数组名）和数组长度，通过指针获取数组的每个成员，从而求和。</p>\n<p><code>*</code>和<code>&amp;</code>运算符也可以用于多维数组。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 取出 a[0][0] 的值</span>\n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token operator\">*</span><span class=\"token operator\">*</span>a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，由于<code>a[0]</code>本身是一个指针，指向第二维数组的第一个成员<code>a[0][0]</code>。所以，<code>*(a[0])</code>取出的是<code>a[0][0]</code>的值。至于<code>**a</code>，就是对<code>a</code>进行两次<code>*</code>运算，第一次取出的是<code>a[0]</code>，第二次取出的是<code>a[0][0]</code>。同理，二维数组的<code>&amp;a[0][0]</code>等同于<code>*a</code>。</p>\n<p>注意，数组名指向的地址是不能更改的。声明数组时，编译器自动为数组分配了内存地址，这个地址与数组名是绑定的，不可更改，下面的代码会报错。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> ints<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nints <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，重新为数组名赋值，改变原来的内存地址，就会报错。</p>\n<p>这也导致不能将一个数组名赋值给另外一个数组名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 写法一</span>\n<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span>\n\n<span class=\"token comment\">// 写法二</span>\n<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面两种写法都会更改数组<code>b</code>的地址，导致报错。</p>\n<h2 id=\"数组指针的加减法\"><a href=\"#数组指针的加减法\" class=\"headerlink\" title=\"数组指针的加减法\"></a>数组指针的加减法</h2><p>C 语言里面，数组名可以进行加法和减法运算，等同于在数组成员之间前后移动，即从一个成员的内存地址移动到另一个成员的内存地址。比如，<code>a + 1</code>返回下一个成员的地址，<code>a - 1</code>返回上一个成员的地址。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，通过指针的移动遍历数组，<code>a + i</code>的每轮循环每次都会指向下一个成员的地址，<code>*(a + i)</code>取出该地址的值，等同于<code>a[i]</code>。对于数组的第一个成员，<code>*(a + 0)</code>（即<code>*a</code>）等同于<code>a[0]</code>。</p>\n<p>由于数组名与指针是等价的，所以下面的等式总是成立。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">a<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码给出了数组成员的两种访问方式，一种是使用方括号<code>a[b]</code>，另一种是使用指针<code>*(a + b)</code>。</p>\n<p>如果指针变量<code>p</code>指向数组的一个成员，那么<code>p++</code>就相当于指向下一个成员，这种方法常用来遍历数组。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">999</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">999</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，通过<code>p++</code>让变量<code>p</code>指向下一个成员。</p>\n<p>注意，数组名指向的地址是不能变的，所以上例中，不能直接对<code>a</code>进行自增，即<code>a++</code>的写法是错的，必须将<code>a</code>的地址赋值给指针变量<code>p</code>，然后对<code>p</code>进行自增。</p>\n<p>遍历数组一般都是通过数组长度的比较来实现，但也可以通过数组起始地址和结束地址的比较来实现。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    total <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>start<span class=\"token punctuation\">;</span>\n    start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> arr <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>arr</code>是数组的起始地址，<code>arr + 5</code>是结束地址。只要起始地址小于结束地址，就表示还没有到达数组尾部。</p>\n<p>反过来，通过数组的减法，可以知道两个地址之间有多少个数组成员，请看下面的例子，自己实现一个计算数组长度的函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span>\n  p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">-</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，将某个数组成员的地址，减去数组起始地址，就可以知道，当前成员与起始地址之间有多少个成员。</p>\n<p>对于多维数组，数组指针的加减法对于不同维度，含义是不一样的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 指针指向 arr[1]</span>\narr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 指针指向 arr[0][1]</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>arr</code>是一个二维数组，<code>arr + 1</code>是将指针移动到第一维数组的下一个成员，即<code>arr[1]</code>。由于每个第一维的成员，本身都包含另一个数组，即<code>arr[0]</code>是一个指向第二维数组的指针，所以<code>arr[0] + 1</code>的含义是将指针移动到第二维数组的下一个成员，即<code>arr[0][1]</code>。</p>\n<p>同一个数组的两个成员的指针相减时，返回它们之间的距离。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">-</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> q <span class=\"token operator\">-</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>p</code>和<code>q</code>分别是数组5号位置和1号位置的指针，它们相减等于4或-4。</p>\n<h2 id=\"数组的复制\"><a href=\"#数组的复制\" class=\"headerlink\" title=\"数组的复制\"></a>数组的复制</h2><p>由于数组名是指针，所以复制数组不能简单地复制数组名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\na <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的写法，结果不是将数组<code>b</code>复制给数组<code>a</code>，而是让<code>a</code>和<code>b</code>指向同一个数组。</p>\n<p>复制数组最简单的方法，还是使用循环，将数组元素逐个进行复制。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，通过将数组<code>b</code>的成员逐个复制给数组<code>a</code>，从而实现数组的赋值。</p>\n<p>另一种方法是使用<code>memcpy()</code>函数（定义在头文件<code>string.h</code>），直接把数组所在的那一段内存，再复制一份。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，将数组<code>b</code>所在的那段内存，复制给数组<code>a</code>。这种方法要比循环复制数组成员要快。</p>\n<h2 id=\"作为函数的参数\"><a href=\"#作为函数的参数\" class=\"headerlink\" title=\"作为函数的参数\"></a>作为函数的参数</h2><h3 id=\"声明参数数组\"><a href=\"#声明参数数组\" class=\"headerlink\" title=\"声明参数数组\"></a>声明参数数组</h3><p>数组作为函数的参数，一般会同时传入数组名和数组长度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>sum_array()</code>的第一个参数是数组本身，也就是数组名，第二个参数是数组长度。</p>\n<p>由于数组名就是一个指针，如果只传数组名，那么函数只知道数组开始的地址，不知道结束的地址，所以才需要把数组长度也一起传入。</p>\n<p>如果函数的参数是多维数组，那么除了第一维的长度可以当作参数传入函数，其他维的长度需要写入函数的定义。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>sum_array()</code>的参数是一个二维数组。第一个参数是数组本身（<code>a[][4]</code>），这时可以不写第一维的长度，因为它作为第二个参数，会传入函数，但是一定要写第二维的长度<code>4</code>。</p>\n<p>这是因为函数内部拿到的，只是数组的起始地址<code>a</code>，以及第一维的成员数量<code>2</code>。如果要正确计算数组的结束地址，还必须知道第一维每个成员的字节长度。写成<code>int a[][4]</code>，编译器就知道了，第一维每个成员本身也是一个数组，里面包含了4个整数，所以每个成员的字节长度就是<code>4 * sizeof(int)</code>。</p>\n<h3 id=\"变长数组作为参数\"><a href=\"#变长数组作为参数\" class=\"headerlink\" title=\"变长数组作为参数\"></a>变长数组作为参数</h3><p>变长数组作为函数参数时，写法略有不同。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，数组<code>a[n]</code>是一个变长数组，它的长度取决于变量<code>n</code>的值，只有运行时才能知道。所以，变量<code>n</code>作为参数时，顺序一定要在变长数组前面，这样运行时才能确定数组<code>a[n]</code>的长度，否则就会报错。</p>\n<p>因为函数原型可以省略参数名，所以变长数组的原型中，可以使用<code>*</code>代替变量名，也可以省略变量名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面两种变长函数的原型写法，都是合法的。</p>\n<p>变长数组作为函数参数有一个好处，就是多维数组的参数声明，可以把后面的维度省掉了。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 原来的写法</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 变长数组的写法</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>sum_array()</code>的参数是一个多维数组，按照原来的写法，一定要声明第二维的长度。但是使用变长数组的写法，就不用声明第二维长度了，因为它可以作为参数传入函数。</p>\n<h3 id=\"数组字面量作为参数\"><a href=\"#数组字面量作为参数\" class=\"headerlink\" title=\"数组字面量作为参数\"></a>数组字面量作为参数</h3><p>C 语言允许将数组字面量作为参数，传入函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 数组变量作为参数</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 数组字面量作为参数</span>\n<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">sum_array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，两种写法是等价的。第二种写法省掉了数组变量的声明，直接将数组字面量传入函数。<code>&#123;2, 3, 4, 5&#125;</code>是数组值的字面量，<code>(int [])</code>类似于强制的类型转换，告诉编译器怎么理解这组值。</p>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"简介-4\"><a href=\"#简介-4\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>C 语言没有单独的字符串类型，字符串被当作字符数组，即<code>char</code>类型的数组。比如，字符串“Hello”是当作数组<code>&#123;&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;&#125;</code>处理的。</p>\n<p>编译器会给数组分配一段连续内存，所有字符储存在相邻的内存单元之中。在字符串结尾，C 语言会自动添加一个全是二进制<code>0</code>的字节，写作<code>\\0</code>字符，表示字符串结束。字符<code>\\0</code>不同于字符<code>0</code>，前者的 ASCII 码是0（二进制形式<code>00000000</code>），后者的 ASCII 码是48（二进制形式<code>00110000</code>）。所以，字符串“Hello”实际储存的数组是<code>&#123;&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;\\0&#39;&#125;</code>。</p>\n<p>所有字符串的最后一个字符，都是<code>\\0</code>。这样做的好处是，C 语言不需要知道字符串的长度，就可以读取内存里面的字符串，只要发现有一个字符是<code>\\0</code>，那么就知道字符串结束了。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> localString<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例声明了一个10个成员的字符数组，可以当作字符串。由于必须留一个位置给<code>\\0</code>，所以最多只能容纳9个字符的字符串。</p>\n<p>字符串写成数组的形式，是非常麻烦的。C 语言提供了一种简写法，双引号之中的字符，会被自动视为字符数组。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 等价于</span>\n<span class=\"token string\">\"Hello\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面两种字符串的写法是等价的，内部存储方式都是一样的。双引号里面的字符串，不用自己添加结尾字符<code>\\0</code>，C 语言会自动添加。</p>\n<p>注意，双引号里面是字符串，单引号里面是字符，两者不能互换。如果把<code>Hello</code>放在单引号里面，编译器会报错。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 报错</span>\n<span class=\"token string\">'Hello'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>另一方面，即使双引号里面只有一个字符（比如<code>&quot;a&quot;</code>），也依然被处理成字符串（存储为2个字节），而不是字符<code>&#39;a&#39;</code>（存储为1个字节）。</p>\n<p>如果字符串内部包含双引号，则该双引号需要使用反斜杠转义。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token string\">\"She replied, \\\"It does.\\\"\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>反斜杠还可以表示其他特殊字符，比如换行符（<code>\\n</code>）、制表符（<code>\\t</code>）等。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token string\">\"Hello, world!\\n\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果字符串过长，可以在需要折行的地方，使用反斜杠（<code>\\</code>）结尾，将一行拆成多行。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token string\">\"hello \\\nworld\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，第一行尾部的反斜杠，将字符串拆成两行。</p>\n<p>上面这种写法有一个缺点，就是第二行必须顶格书写，如果想包含缩进，那么缩进也会被计入字符串。为了解决这个问题，C 语言允许合并多个字符串字面量，只要这些字符串之间没有间隔，或者只有空格，C 语言会将它们自动合并。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> greeting<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span><span class=\"token string\">\"how are you \"</span><span class=\"token string\">\"today!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">char</span> greeting<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, how are you today!\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这种新写法支持多行字符串的合并。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> greeting<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span>\n  <span class=\"token string\">\"how are you \"</span>\n  <span class=\"token string\">\"today!\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>printf()</code>使用占位符<code>%s</code>输出字符串。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"字符串变量的声明\"><a href=\"#字符串变量的声明\" class=\"headerlink\" title=\"字符串变量的声明\"></a>字符串变量的声明</h2><p>字符串变量可以声明成一个字符数组，也可以声明成一个指针，指向字符数组。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 写法一</span>\n<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 写法二</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面两种写法都声明了一个字符串变量<code>s</code>。如果采用第一种写法，由于字符数组的长度可以让编译器自动计算，所以声明时可以省略字符数组的长度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，编译器会将数组<code>s</code>指定为14，正好容纳后面的字符串。</p>\n<p>字符数组的长度，可以大于字符串的实际长度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，字符数组<code>s</code>的长度是<code>50</code>，但是字符串“hello”的实际长度只有6（包含结尾符号<code>\\0</code>），所以后面空出来的44个位置，都会被初始化为<code>\\0</code>。</p>\n<p>字符数组的长度，不能小于字符串的实际长度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，字符串数组<code>s</code>的长度是<code>5</code>，小于字符串“hello”的实际长度6，这时编译器会报错。因为如果只将前5个字符写入，而省略最后的结尾符号<code>\\0</code>，这很可能导致后面的字符串相关代码出错。</p>\n<p>字符指针和字符数组，这两种声明字符串变量的写法基本是等价的，但是有两个差异。</p>\n<p>第一个差异是，指针指向的字符串，在 C 语言内部被当作常量，不能修改字符串本身。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码使用指针，声明了一个字符串变量，然后修改了字符串的第一个字符。这种写法是错的，会导致难以预测的后果，执行时很可能会报错。</p>\n<p>如果使用数组声明字符串变量，就没有这个问题，可以修改数组的任意成员。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>为什么字符串声明为指针时不能修改，声明为数组时就可以修改？原因是声明为指针时，字符串是一个保存在内存“栈区”（stack）的常量，“栈区”的值由系统管理，一般都不允许修改；声明为数组时，字符串的副本会被拷贝到内存“堆区”（heap），“堆区”的值由用户管理，是可以修改的。</p>\n<p>为了提醒用户，字符串声明为指针后不得修改，可以在声明时使用<code>const</code>说明符，保证该字符串是只读的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面字符串声明为指针时，使用了<code>const</code>说明符，就保证了该字符串无法修改。一旦修改，编译器肯定会报错。</p>\n<p>第二个差异是，指针变量可以指向其它字符串。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，字符指针可以指向另一个字符串。</p>\n<p>但是，字符数组变量不能指向另一个字符串。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，字符数组的数组名，总是指向初始化时的字符串地址，不能修改。</p>\n<p>同样的原因，声明字符数组后，不能直接用字符串赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，不能直接把字符串赋值给字符数组变量，会报错。原因是字符数组的变量名，跟所指向的数组是绑定的，不能指向另一个地址。</p>\n<p>解决方法就是使用 C 语言原生提供的<code>strcpy()</code>函数，通过字符串拷贝完成赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>strcpy()</code>函数把字符串<code>abc</code>拷贝给变量<code>s</code>，这个函数的详细用法会在后面介绍。</p>\n<h2 id=\"strlen\"><a href=\"#strlen\" class=\"headerlink\" title=\"strlen()\"></a>strlen()</h2><p><code>strlen()</code>函数返回字符串的字节长度，不包括末尾的空字符<code>\\0</code>。该函数的原型如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// string.h</span>\nsize_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>它的参数是字符串变量，返回的是<code>size_t</code>类型的无符号整数，除非是极长的字符串，一般情况下当作<code>int</code>类型处理即可。下面是一个用法实例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>strlen()</code>的原型在标准库的<code>string.h</code>文件中定义，使用时需要加载头文件<code>string.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The string is %zd characters long.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，字符串长度（<code>strlen()</code>）与字符串变量长度（<code>sizeof()</code>），是两个不同的概念。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 5</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 50</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，字符串长度是5，字符串变量长度是50。</p>\n<p>如果不使用这个函数，可以通过判断字符串末尾的<code>\\0</code>，自己计算字符串长度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">my_strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"strcpy\"><a href=\"#strcpy\" class=\"headerlink\" title=\"strcpy()\"></a>strcpy()</h2><p>字符串的复制，不能使用赋值运算符，直接将一个字符串赋值给字符数组变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> str2<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nstr1 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span>\nstr2 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面两种字符串的复制写法，都是错的。因为数组的变量名是一个固定的地址，不能修改，使其指向另一个地址。</p>\n<p>如果是字符指针，赋值运算符（<code>=</code>）只是将一个指针的地址复制给另一个指针，而不是复制字符串。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s2<span class=\"token punctuation\">;</span>\n\ns1 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\ns2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码可以运行，结果是两个指针变量<code>s1</code>和<code>s2</code>指向同一字符串，而不是将字符串<code>s2</code>的内容复制给<code>s1</code>。</p>\n<p>C 语言提供了<code>strcpy()</code>函数，用于将一个字符串的内容复制到另一个字符串，相当于字符串赋值。该函数的原型定义在<code>string.h</code>头文件里面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> dest<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> source<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>strcpy()</code>接受两个参数，第一个参数是目的字符串数组，第二个参数是源字符串数组。复制字符串之前，必须要保证第一个参数的长度不小于第二个参数，否则虽然不会报错，但会溢出第一个字符串变量的边界，发生难以预料的结果。第二个参数的<code>const</code>说明符，表示这个函数不会修改第二个字符串。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"Hello, world!\"</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"zello, world!\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例将变量<code>s</code>的值，拷贝一份放到变量<code>t</code>，变成两个不同的字符串，修改一个不会影响到另一个。另外，变量<code>t</code>的长度大于<code>s</code>，复制后多余的位置（结束标志<code>\\0</code>后面的位置）都为随机值。</p>\n<p><code>strcpy()</code>也可以用于字符数组的赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例将字符数组变量，赋值为字符串“abcd”。</p>\n<p><code>strcpy()</code>的返回值是一个字符串指针（即<code>char*</code>），指向第一个参数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"beast\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Be the best that you can be.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ps<span class=\"token punctuation\">;</span>\n\nps <span class=\"token operator\">=</span> <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s2 <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Be the beast</span>\n<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// beast</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，从<code>s2</code>的第7个位置开始拷贝字符串<code>beast</code>，前面的位置不变。这导致<code>s2</code>后面的内容都被截去了，因为会连<code>beast</code>结尾的空字符一起拷贝。<code>strcpy()</code>返回的是一个指针，指向拷贝开始的位置。</p>\n<p><code>strcpy()</code>返回值的另一个用途，是连续为多个字符数组赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例调用两次<code>strcpy()</code>，完成两个字符串变量的赋值。</p>\n<p>另外，<code>strcpy()</code>的第一个参数最好是一个已经声明的数组，而不是声明后没有进行初始化的字符指针。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">;</span>\n<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面的代码是有问题的。<code>strcpy()</code>将字符串分配给指针变量<code>str</code>，但是<code>str</code>并没有进行初始化，指向的是一个随机的位置，因此字符串可能被复制到任意地方。</p>\n<p>如果不用<code>strcpy()</code>，自己实现字符串的拷贝，可以用下面的代码。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dest<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>source<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ptr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，关键的一行是<code>while (*dest++ = *source++)</code>，这是一个循环，依次将<code>source</code>的每个字符赋值给<code>dest</code>，然后移向下一个位置，直到遇到<code>\\0</code>，循环判断条件不再为真，从而跳出循环。其中，<code>*dest++</code>这个表达式等同于<code>*(dest++)</code>，即先返回<code>dest</code>这个地址，再进行自增运算移向下一个位置，而<code>*dest</code>可以对当前位置赋值。</p>\n<p><code>strcpy()</code>函数有安全风险，因为它并不检查目标字符串的长度，是否足够容纳源字符串的副本，可能导致写入溢出。如果不能保证不会发生溢出，建议使用<code>strncpy()</code>函数代替。</p>\n<h2 id=\"strncpy\"><a href=\"#strncpy\" class=\"headerlink\" title=\"strncpy()\"></a>strncpy()</h2><p><code>strncpy()</code>跟<code>strcpy()</code>的用法完全一样，只是多了第3个参数，用来指定复制的最大字符数，防止溢出目标字符串变量的边界。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> \n  size_t n\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面原型中，第三个参数<code>n</code>定义了复制的最大字符数。如果达到最大字符数以后，源字符串仍然没有复制完，就会停止复制，这时目的字符串结尾将没有终止符<code>\\0</code>，这一点务必注意。如果源字符串的字符数小于<code>n</code>，则<code>strncpy()</code>的行为与<code>strcpy()</code>完全一致。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstr1<span class=\"token punctuation\">[</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，字符串<code>str2</code>复制给<code>str1</code>，但是复制长度最多为<code>str1</code>的长度减去1，<code>str1</code>剩下的最后一位用于写入字符串的结尾标志<code>\\0</code>。这是因为<code>strncpy()</code>不会自己添加<code>\\0</code>，如果复制的字符串片段不包含结尾标志，就需要手动添加。</p>\n<p><code>strncpy()</code>也可以用来拷贝部分字符串。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s1<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns1<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，指定只拷贝前5个字符。</p>\n<h2 id=\"strcat\"><a href=\"#strcat\" class=\"headerlink\" title=\"strcat()\"></a>strcat()</h2><p><code>strcat()</code>函数用于连接字符串。它接受两个字符串作为参数，把第二个字符串的副本添加到第一个字符串的末尾。这个函数会改变第一个字符串，但是第二个字符串不变。</p>\n<p>该函数的原型定义在<code>string.h</code>头文件里面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>strcat()</code>的返回值是一个字符串指针，指向第一个参数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s1<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"helloworld\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，调用<code>strcat()</code>以后，可以看到字符串<code>s1</code>的值变了。</p>\n<p>注意，<code>strcat()</code>的第一个参数的长度，必须足以容纳添加第二个参数字符串。否则，拼接后的字符串会溢出第一个字符串的边界，写入相邻的内存单元，这是很危险的，建议使用下面的<code>strncat()</code>代替。</p>\n<h2 id=\"strncat\"><a href=\"#strncat\" class=\"headerlink\" title=\"strncat()\"></a>strncat()</h2><p><code>strncat()</code>用于连接两个字符串，用法与<code>strncat()</code>完全一致，只是增加了第三个参数，指定最大添加的字符数。在添加过程中，一旦达到指定的字符数，或者在源字符串中遇到空字符<code>\\0</code>，就不再添加了。它的原型定义在<code>string.h</code>头文件里面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">strncat</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span>\n  size_t n\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>strncat()</code>返回第一个参数，即目标字符串指针。</p>\n<p>为了保证连接后的字符串，不超过目标字符串的长度，<code>strncat()</code>通常会写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">strncat</span><span class=\"token punctuation\">(</span>\n  str1<span class=\"token punctuation\">,</span> \n  str2<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>strncat()</code>总是会在拼接结果的结尾，自动添加空字符<code>\\0</code>，所以第三个参数的最大值，应该是<code>str1</code>的变量长度减去<code>str1</code>的字符串长度，再减去<code>1</code>。下面是一个用法实例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s1<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Monday\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Tuesday\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">strncat</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"MondayTue\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>s1</code>的变量长度是10，字符长度是6，两者相减后再减去1，得到<code>3</code>，表明<code>s1</code>最多可以再添加三个字符，所以得到的结果是<code>MondayTue</code>。</p>\n<h2 id=\"strcmp\"><a href=\"#strcmp\" class=\"headerlink\" title=\"strcmp()\"></a>strcmp()</h2><p>如果要比较两个字符串，无法直接比较，只能一个个字符进行比较，C 语言提供了<code>strcmp()</code>函数。</p>\n<p><code>strcmp()</code>函数用于比较两个字符串的内容。该函数的原型如下，定义在<code>string.h</code>头文件里面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>按照字典顺序，如果两个字符串相同，返回值为<code>0</code>；如果<code>s1</code>小于<code>s2</code>，<code>strcmp()</code>返回值小于0；如果<code>s1</code>大于<code>s2</code>，返回值大于0。</p>\n<p>下面是一个用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// s1 = Happy New Year</span>\n<span class=\"token comment\">// s2 = Happy New Year</span>\n<span class=\"token comment\">// s3 = Happy Holidays</span>\n\n<span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n<span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 大于 0</span>\n<span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 小于 0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，<code>strcmp()</code>只用来比较字符串，不用来比较字符。因为字符就是小整数，直接用相等运算符（<code>==</code>）就能比较。所以，不要把字符类型（<code>char</code>）的值，放入<code>strcmp()</code>当作参数。</p>\n<h2 id=\"strncmp\"><a href=\"#strncmp\" class=\"headerlink\" title=\"strncmp()\"></a>strncmp()</h2><p>由于<code>strcmp()</code>比较的是整个字符串，C 语言又提供了<code>strncmp()</code>函数，只比较到指定的位置。</p>\n<p>该函数增加了第三个参数，指定了比较的字符数。它的原型定义在<code>string.h</code>头文件里面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s2<span class=\"token punctuation\">,</span> \n  size_t n\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它的返回值与<code>strcmp()</code>一样。如果两个字符串相同，返回值为<code>0</code>；如果<code>s1</code>小于<code>s2</code>，<code>strcmp()</code>返回值小于0；如果<code>s1</code>大于<code>s2</code>，返回值大于0。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s1<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello C\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"They all have hello.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例只比较两个字符串的前5个字符。</p>\n<h2 id=\"sprintf-，snprintf\"><a href=\"#sprintf-，snprintf\" class=\"headerlink\" title=\"sprintf()，snprintf()\"></a>sprintf()，snprintf()</h2><p><code>sprintf()</code>函数跟<code>printf()</code>类似，但是用于将数据写入字符串，而不是输出到显示器。该函数的原型定义在<code>stdio.h</code>头文件里面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>sprintf()</code>的第一个参数是字符串指针变量，其余参数和<code>printf()</code>相同，即第二个参数是格式字符串，后面的参数是待写入的变量列表。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s %s\"</span><span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello world</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>sprintf()</code>将输出内容组合成“hello world”，然后放入了变量<code>s</code>。</p>\n<p><code>sprintf()</code>的返回值是写入变量的字符数量（不计入尾部的空字符<code>\\0</code>）。如果遇到错误，返回负值。</p>\n<p><code>sprintf()</code>有严重的安全风险，如果写入的字符串过长，超过了目标字符串的长度，<code>sprintf()</code>依然会将其写入，导致发生溢出。为了控制写入的字符串的长度，C 语言又提供了另一个函数<code>snprintf()</code>。</p>\n<p><code>snprintf()</code>只比<code>sprintf()</code>多了一个参数<code>n</code>，用来控制写入变量的字符串不超过<code>n - 1</code>个字符，剩下一个位置写入空字符<code>\\0</code>。下面是它的原型。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>snprintf()</code>总是会自动写入字符串结尾的空字符。如果你尝试写入的字符数超过指定的最大字符数，<code>snprintf()</code>会写入 n - 1 个字符，留出最后一个位置写入空字符。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的例子中，<code>snprintf()</code>的第二个参数是12，表示写入字符串的最大长度不超过12（包括尾部的空字符）。</p>\n<p><code>snprintf()</code>的返回值是写入变量的字符数量（不计入尾部的空字符<code>\\0</code>），应该小于<code>n</code>。如果遇到错误，返回负值。</p>\n<h2 id=\"字符串数组\"><a href=\"#字符串数组\" class=\"headerlink\" title=\"字符串数组\"></a>字符串数组</h2><p>如果一个数组的每个成员都是一个字符串，需要通过二维的字符数组实现。每个字符串本身是一个字符数组，多个字符串再组成一个数组。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> weekdays<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"Monday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Tuesday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Wednesday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Thursday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Friday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Saturday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Sunday\"</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例就是一个字符串数组，一共包含7个字符串，所以第一维的长度是7。其中，最长的字符串的长度是10（含结尾的终止符<code>\\0</code>），所以第二维的长度统一设为10。</p>\n<p>因为第一维的长度，编译器可以自动计算，所以可以省略。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> weekdays<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"Monday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Tuesday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Wednesday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Thursday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Friday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Saturday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Sunday\"</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，二维数组第一维的长度，可以由编译器根据后面的赋值，自动计算，所以可以不写。</p>\n<p>数组的第二维，长度统一定为10，有点浪费空间，因为大多数成员的长度都小于10。解决方法就是把数组的第二维，从字符数组改成字符指针。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> weekdays<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"Monday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Tuesday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Wednesday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Thursday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Friday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Saturday\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Sunday\"</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的字符串数组，其实是一个一维数组，成员就是7个字符指针，每个指针指向一个字符串（字符数组）。</p>\n<p>遍历字符串数组的写法如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> weekdays<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"C-语言的内存管理\"><a href=\"#C-语言的内存管理\" class=\"headerlink\" title=\"C 语言的内存管理\"></a>C 语言的内存管理</h1><h2 id=\"简介-5\"><a href=\"#简介-5\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>C 语言的内存管理，分成两部分。一部分是系统管理的，另一部分是用户手动管理的。</p>\n<p>系统管理的内存，主要是函数内部的变量（局部变量）。这部分变量在函数运行时进入内存，函数运行结束后自动从内存卸载。这些变量存放的区域称为”栈“（stack），”栈“所在的内存是系统自动管理的。</p>\n<p>用户手动管理的内存，主要是程序运行的整个过程中都存在的变量（全局变量），这些变量需要用户手动从内存释放。如果使用后忘记释放，它就一直占用内存，直到程序退出，这种情况称为”内存泄漏“（memory leak）。这些变量所在的内存称为”堆“（heap），”堆“所在的内存是用户手动管理的。</p>\n<h2 id=\"void-指针\"><a href=\"#void-指针\" class=\"headerlink\" title=\"void 指针\"></a>void 指针</h2><p>前面章节已经说过了，每一块内存都有地址，通过指针变量可以获取指定地址的内存块。指针变量必须有类型，否则编译器无法知道，如何解读内存块保存的二进制数据。但是，向系统请求内存的时候，有时不确定会有什么样的数据写入内存，需要先获得内存块，稍后再确定写入的数据类型。</p>\n<p>为了满足这种需求，C 语言提供了一种不定类型的指针，叫做 void 指针。它只有内存块的地址信息，没有类型信息，等到使用该块内存的时候，再向编译器补充说明，里面的数据类型是什么。</p>\n<p>另一方面，void 指针等同于无类型指针，可以指向任意类型的数据，但是不能解读数据。void 指针与其他所有类型指针之间是互相转换关系，任一类型的指针都可以转为 void 指针，而 void 指针也可以转为任一类型的指针。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 整数指针转为 void 指针</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// void 指针转为整数指针</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例演示了，整数指针和 void 指针如何互相转换。<code>&amp;x</code>是一个整数指针，<code>p</code>是 void 指针，赋值时<code>&amp;x</code>的地址会自动解释为 void 类型。同样的，<code>p</code>再赋值给整数指针<code>q</code>时，<code>p</code>的地址会自动解释为整数指针。</p>\n<p>注意，由于不知道 void 指针指向什么类型的值，所以不能用<code>*</code>运算符取出它指向的值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>p</code>是一个 void 指针，所以这时无法用<code>*p</code>取出指针指向的值。</p>\n<p>void 指针的重要之处在于，很多内存相关函数的返回值就是 void 指针，只给出内存块的地址信息，所以放在最前面进行介绍。</p>\n<h2 id=\"malloc\"><a href=\"#malloc\" class=\"headerlink\" title=\"malloc()\"></a>malloc()</h2><p><code>malloc()</code>函数用于分配内存，该函数向系统要求一段内存，系统就在“堆”里面分配一段连续的内存块给它。它的原型定义在头文件<code>stdlib.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受一个非负整数作为参数，表示所要分配的内存字节数，返回一个 void 指针，指向分配好的内存块。这是非常合理的，因为<code>malloc()</code>函数不知道，将要存储在该块内存的数据是什么类型，所以只能返回一个无类型的 void 指针。</p>\n<p>可以使用<code>malloc()</code>为任意类型的数据分配内存，常见的做法是先使用<code>sizeof()</code>函数，算出某种数据类型所需的字节长度，然后再将这个长度传给<code>malloc()</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，先为整数类型分配一段内存，然后将整数<code>12</code>放入这段内存里面。这个例子其实不需要使用<code>malloc()</code>，因为 C 语言会自动为整数（本例是<code>12</code>）提供内存。</p>\n<p>有时候为了增加代码的可读性，可以对<code>malloc()</code>返回的指针进行一次强制类型转换。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码将<code>malloc()</code>返回的 void 指针，强制转换成了整数指针。</p>\n<p>由于<code>sizeof()</code>的参数可以是变量，所以上面的例子也可以写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>malloc()</code>分配内存有可能分配失败，这时返回常量 NULL。Null 的值为0，是一个无法读写的内存地址，可以理解成一个不指向任何地方的指针。它在包括<code>stdlib.h</code>等多个头文件里面都有定义，所以只要可以使用<code>malloc()</code>，就可以使用<code>NULL</code>。由于存在分配失败的可能，所以最好在使用<code>malloc()</code>之后检查一下，是否分配成功。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 内存分配失败</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，通过判断返回的指针<code>p</code>是否为<code>NULL</code>，确定<code>malloc()</code>是否分配成功。</p>\n<p><code>malloc()</code>最常用的场合，就是为数组和自定义数据结构分配内存。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>p</code>是一个整数指针，指向一段可以放置10个整数的内存，所以可以用作数组。</p>\n<p><code>malloc()</code>用来创建数组，有一个好处，就是它可以创建动态数组，即根据成员数量的不同，而创建长度不同的数组。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>malloc()</code>可以根据变量<code>n</code>的不同，动态为数组分配不同的大小。</p>\n<p>注意，<code>malloc()</code>不会对所分配的内存进行初始化，里面还保存着原来的值。如果没有初始化，就使用这段内存，可能从里面读到以前的值。程序员要自己负责初始化，比如，字符串初始化可以使用<code>strcpy()</code>函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or</span>\np <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，字符指针<code>p</code>指向一段4个字节的内存，<code>strcpy()</code>将字符串“abc”拷贝放入这段内存，完成了这段内存的初始化。</p>\n<h2 id=\"free\"><a href=\"#free\" class=\"headerlink\" title=\"free()\"></a>free()</h2><p><code>free()</code>用于释放<code>malloc()</code>函数分配的内存，将这块内存还给系统以便重新使用，否则这个内存块会一直占用到程序运行结束。该函数的原型定义在头文件<code>stdlib.h</code>里面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> block<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，<code>free()</code>的参数是<code>malloc()</code>返回的内存地址。下面就是用法实例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，分配的内存块一旦释放，就不应该再次操作已经释放的地址，也不应该再次使用<code>free()</code>对该地址释放第二次。</p>\n<p>一个很常见的错误是，在函数内部分配了内存，但是函数调用结束时，没有使用<code>free()</code>释放内存。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">gobble</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">double</span><span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>gobble()</code>内部分配了内存，但是没有写<code>free(temp)</code>。这会造成函数运行结束后，占用的内存块依然保留，如果多次调用<code>gobble()</code>，就会留下多个内存块。并且，由于指针<code>temp</code>已经消失了，也无法访问这些内存块，再次使用。</p>\n<h2 id=\"calloc\"><a href=\"#calloc\" class=\"headerlink\" title=\"calloc()\"></a>calloc()</h2><p><code>calloc()</code>函数的作用与<code>malloc()</code>相似，也是分配内存块。该函数的原型定义在头文件<code>stdlib.h</code>。</p>\n<p>两者的区别主要有两点：</p>\n<p>（1）<code>calloc()</code>接受两个参数，第一个参数是数据类型的单位字节长度，第二个是该数据类型的数量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>calloc()</code>的返回值也是一个 void 指针。分配失败时，返回 NULL。</p>\n<p>（2）<code>calloc()</code>会将所分配的内存全部初始化为<code>0</code>。<code>malloc()</code>不会对内存进行初始化，如果想要初始化为<code>0</code>，还要额外调用<code>memset()</code>函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>calloc()</code>相当于<code>malloc() + memset()</code>。</p>\n<p><code>calloc()</code>分配的内存块，也要使用<code>free()</code>释放。</p>\n<h2 id=\"realloc\"><a href=\"#realloc\" class=\"headerlink\" title=\"realloc()\"></a>realloc()</h2><p><code>realloc()</code>函数用于修改已经分配的内存块的大小，可以放大也可以缩小，返回一个指向新的内存块的指针。如果分配不成功，返回 NULL。该函数的原型定义在头文件<code>stdlib.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> block<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数。</p>\n<ul>\n<li><code>block</code>：已经分配好的内存块指针（由<code>malloc()</code>或<code>calloc()</code>或<code>realloc()</code>产生）。</li>\n<li><code>size</code>：该内存块的新大小，单位为字节。</li>\n</ul>\n<p><code>realloc()</code>可能返回一个全新的地址（数据也会自动复制过去），也可能返回跟原来一样的地址。<code>realloc()</code>优先在原有内存块上进行缩减，尽量不移动数据，所以通常是返回原先的地址。如果新内存块小于原来的大小，则丢弃超出的部分；如果大于原来的大小，则不对新增的部分进行初始化（程序员可以自动调用<code>memset()</code>）。</p>\n<p>下面是一个例子，<code>b</code>是数组指针，<code>realloc()</code>动态调整它的大小。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n\nb <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，指针<code>b</code>原来指向10个成员的整数数组，使用<code>realloc()</code>调整为2000个成员的数组。这就是手动分配数组内存的好处，可以在运行时随时调整数组的长度。</p>\n<p><code>realloc()</code>的第一个参数可以是 NULL，这时就相当于新建一个指针。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果<code>realloc()</code>的第二个参数是<code>0</code>，就会释放掉内存块。</p>\n<p>由于有分配失败的可能，所以调用<code>realloc()</code>以后，最好检查一下它的返回值是否为 NULL。分配失败时，原有内存块中的数据不会发生改变。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">float</span><span class=\"token operator\">*</span> new_p <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">*</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new_p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error reallocing\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，<code>realloc()</code>不会对内存块进行初始化。</p>\n<h2 id=\"restrict-说明符\"><a href=\"#restrict-说明符\" class=\"headerlink\" title=\"restrict 说明符\"></a>restrict 说明符</h2><p>声明指针变量时，可以使用<code>restrict</code>说明符，告诉编译器，该块内存区域只有当前指针一种访问方式，其他指针不能读写该块内存。这种指针称为“受限指针”（restrict pointer）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> restrict p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，声明指针变量<code>p</code>时，加入了<code>restrict</code>说明符，使得<code>p</code>变成了受限指针。后面，当<code>p</code>指向<code>malloc()</code>函数返回的一块内存区域，就味着，该区域只有通过<code>p</code>来访问，不存在其他访问方式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> restrict p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 未定义行为</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，另一个指针<code>q</code>与受限指针<code>p</code>指向同一块内存，现在该内存有<code>p</code>和<code>q</code>两种访问方式。这就违反了对编译器的承诺，后面通过<code>*q</code>对该内存区域赋值，会导致未定义行为。</p>\n<h2 id=\"memcpy\"><a href=\"#memcpy\" class=\"headerlink\" title=\"memcpy()\"></a>memcpy()</h2><p><code>memcpy()</code>用于将一块内存拷贝到另一块内存。该函数的原型定义在头文件<code>string.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> restrict dest<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> restrict source<span class=\"token punctuation\">,</span> \n  size_t n\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>dest</code>是目标地址，<code>source</code>是源地址，第三个参数<code>n</code>是要拷贝的字节数<code>n</code>。如果要拷贝10个 double 类型的数组成员，<code>n</code>就等于<code>10 * sizeof(double)</code>，而不是<code>10</code>。该函数会将从<code>source</code>开始的<code>n</code>个字节，拷贝到<code>dest</code>。</p>\n<p><code>dest</code>和<code>source</code>都是 void 指针，表示这里不限制指针类型，各种类型的内存数据都可以拷贝。两者都有 restrict 关键字，表示这两个内存块不应该有互相重叠的区域。</p>\n<p><code>memcpy()</code>的返回值是第一个参数，即目标地址的指针。</p>\n<p>因为<code>memcpy()</code>只是将一段内存的值，复制到另一段内存，所以不需要知道内存里面的数据是什么类型。下面是复制字符串的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Goats!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 拷贝7个字节，包括终止符</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"Goats!\"</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，字符串<code>s</code>所在的内存，被拷贝到字符数组<code>t</code>所在的内存。</p>\n<p><code>memcpy()</code>可以取代<code>strcpy()</code>进行字符串拷贝，而且是更好的方法，不仅更安全，速度也更快，它不检查字符串尾部的<code>\\0</code>字符。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n\nsize_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// strcpy() 的写法</span>\n  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// memcpy() 的写法</span>\n  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，两种写法的效果完全一样，但是<code>memcpy()</code>的写法要好于<code>strcpy()</code>。</p>\n<p>使用 void 指针，也可以自定义一个复制内存的函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> byte_count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> d <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>byte_count<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">*</span>d<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> dest<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，不管传入的<code>dest</code>和<code>src</code>是什么类型的指针，将它们重新定义成一字节的 Char 指针，这样就可以逐字节进行复制。<code>*d++ = *s++</code>语句相当于先执行<code>*d = *s</code>（源字节的值复制给目标字节），然后各自移动到下一个字节。最后，返回复制后的<code>dest</code>指针，便于后续使用。</p>\n<h2 id=\"memmove\"><a href=\"#memmove\" class=\"headerlink\" title=\"memmove()\"></a>memmove()</h2><p><code>memmove()</code>函数用于将一段内存数据复制到另一段内存。它跟<code>memcpy()</code>的主要区别是，它允许目标区域与源区域有重叠。如果发生重叠，源区域的内容会被更改；如果没有重叠，它与<code>memcpy()</code>行为相同。</p>\n<p>该函数的原型定义在头文件<code>string.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> source<span class=\"token punctuation\">,</span> \n  size_t n\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>dest</code>是目标地址，<code>source</code>是源地址，<code>n</code>是要移动的字节数。<code>dest</code>和<code>source</code>都是 void 指针，表示可以移动任何类型的内存数据，两个内存区域可以有重叠。</p>\n<p><code>memmove()</code>返回值是第一个参数，即目标地址的指针。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，从数组成员<code>a[1]</code>开始的99个成员，都向前移动一个位置。</p>\n<p>下面是另一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Home Sweet Home\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 Sweet Home Home</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，从字符串<code>x</code>的5号位置开始的10个字节，就是“Sweet Home”，<code>memmove()</code>将其前移到0号位置，所以<code>x</code>就变成了“Sweet Home Home”。</p>\n<h2 id=\"memcmp\"><a href=\"#memcmp\" class=\"headerlink\" title=\"memcmp()\"></a>memcmp()</h2><p><code>memcmp()</code>函数用来比较两个内存区域。它的原型定义在<code>string.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> s1<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> s2<span class=\"token punctuation\">,</span>\n  size_t n\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它接受三个参数，前两个参数是用来比较的指针，第三个参数指定比较的字节数。</p>\n<p>它的返回值是一个整数。两块内存区域的每个字节以字符形式解读，按照字典顺序进行比较，如果两者相同，返回<code>0</code>；如果<code>s1</code>大于<code>s2</code>，返回大于0的整数；如果<code>s1</code>小于<code>s2</code>，返回小于0的整数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"acd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小于 0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例比较<code>s1</code>和<code>s2</code>的前三个字节，由于<code>s1</code>小于<code>s2</code>，所以<code>r</code>是一个小于0的整数，一般为-1。</p>\n<p>下面是另一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'t'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例展示了，<code>memcmp()</code>可以比较内部带有字符串终止符<code>\\0</code>的内存区域。</p>\n<h1 id=\"struct-结构\"><a href=\"#struct-结构\" class=\"headerlink\" title=\"struct 结构\"></a>struct 结构</h1><h2 id=\"简介-6\"><a href=\"#简介-6\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>C 语言内置的数据类型，除了最基本的几种原始类型，只有数组属于复合类型，可以同时包含多个值，但是只能包含相同类型的数据，实际使用中并不够用。</p>\n<p>实际使用中，主要有下面两种情况，需要更灵活强大的复合类型。</p>\n<ul>\n<li>复杂的物体需要使用多个变量描述，这些变量都是相关的，最好有某种机制将它们联系起来。</li>\n<li>某些函数需要传入多个参数，如果一个个按照顺序传入，非常麻烦，最好能组合成一个复合结构传入。</li>\n</ul>\n<p>为了解决这些问题，C 语言提供了<code>struct</code>关键字，允许自定义复合数据类型，将不同类型的值组合在一起。这样不仅为编程提供方便，也有利于增强代码的可读性。C 语言没有其他语言的对象（object）和类（class）的概念，struct 结构很大程度上提供了对象和类的功能，可以将它视为只有属性、没有方法的类。</p>\n<p>下面是<code>struct</code>自定义数据类型的一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">fraction</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> denominator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例定义了一个分数的数据类型<code>struct fraction</code>，包含两个属性<code>numerator</code>和<code>denominator</code>。</p>\n<p>注意，作为一个自定义的数据类型，它的类型名要包括<code>struct</code>关键字，比如上例是<code>struct fraction</code>，单独的<code>fraction</code>没有任何意义，甚至脚本还可以另外定义名为<code>fraction</code>的变量，虽然这样很容易造成混淆。另外，<code>struct</code>语句结尾的分号不能省略，否则很容易产生错误。</p>\n<p>定义了新的数据类型以后，就可以声明该类型的变量，这与声明其他类型变量的写法是一样的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">fraction</span> f1<span class=\"token punctuation\">;</span>\n\nf1<span class=\"token punctuation\">.</span>numerator <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\nf1<span class=\"token punctuation\">.</span>denominator <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，先声明了一个<code>struct fraction</code>类型的变量<code>f1</code>，这时编译器就会为<code>f1</code>分配内存，接着就可以为<code>f1</code>的不同属性赋值。可以看到，struct 结构的属性通过点（<code>.</code>）来表示，比如<code>numerator</code>属性要写成<code>f1.numerator</code>。</p>\n<p>再提醒一下，声明自定义类型的变量时，类型名前面，不要忘记加上<code>struct</code>关键字。也就是说，必须使用<code>struct fraction f1</code>声明变量，不能写成<code>fraction f1</code>。</p>\n<p>除了逐一对属性赋值，也可以使用大括号，一次性对 struct 结构的所有属性赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">car</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> price<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> speed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">car</span> saturn <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Saturn SL/2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16000.99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>saturn</code>是<code>struct cat</code>类型，大括号里面同时对它的三个属性赋值。如果大括号里面的值的数量，少于属性的数量，那么缺失的属性自动初始化为<code>0</code>。</p>\n<p>注意，大括号里面的值的顺序，必须与 struct 类型声明时属性的顺序一致。否则，必须为每个值指定属性名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">car</span> saturn <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>speed<span class=\"token operator\">=</span><span class=\"token number\">172</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Saturn SL/2\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，初始化的属性少于声明时的属性，这时剩下的那些属性都会初始化为<code>0</code>。</p>\n<p>声明变量以后，可以修改某个属性的值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">car</span> saturn <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>speed<span class=\"token operator\">=</span><span class=\"token number\">172</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Saturn SL/2\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nsaturn<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">168</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例将<code>speed</code>属性的值改成<code>168</code>。</p>\n<p>struct 的数据类型声明语句与变量的声明语句，可以合并为一个语句。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> b1<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的语句同时声明了数据类型<code>book</code>和该类型的变量<code>b1</code>。如果类型标识符<code>book</code>只用在这一个地方，后面不再用到，这里可以将类型名省略。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> b1<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>struct</code>声明了一个匿名数据类型，然后又声明了这个类型的变量<code>b1</code>。</p>\n<p>与其他变量声明语句一样，可以在声明变量的同时，对变量赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> b1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Harry Potter\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"J. K. Rowling\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  b2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Cancer Ward\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Aleksandr Solzhenitsyn\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7.85</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，在声明变量<code>b1</code>和<code>b2</code>的同时，为它们赋值。</p>\n<p>下一章介绍的<code>typedef</code>命令可以为 struct 结构指定一个别名，这样使用起来更简洁。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cell_phone</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> cell_no<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> minutes_of_charge<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> phone<span class=\"token punctuation\">;</span>\n\nphone p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5551234</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>phone</code>就是<code>struct cell_phone</code>的别名。</p>\n<p>指针变量也可以指向<code>struct</code>结构。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">*</span> b1<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 或者写成两个语句</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> b1<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>b1</code>是一个指针，指向的数据是<code>struct book</code>类型的实例。</p>\n<p>struct 结构也可以作为数组成员。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">fraction</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nnumbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>numerator <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>denominator <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例声明了一个有1000个成员的数组<code>numbers</code>，每个成员都是自定义类型<code>fraction</code>的实例。</p>\n<p>struct 结构占用的存储空间，不是各个属性存储空间的总和。因为为了计算效率，C 语言的内存占用空间一般来说，都必须是<code>int</code>类型存储空间的倍数。如果<code>int</code>类型的存储是4字节，那么 struct 类型的存储空间就总是4的倍数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，如果按照属性占据的空间相加，变量<code>s</code>的存储空间应该是5个字节。但是，struct 结构的存储空间是<code>int</code>类型的倍数，所以最后的结果是占据8个字节，<code>a</code>属性与<code>b</code>属性之间有3个字节的“空洞”。</p>\n<h2 id=\"struct-的复制\"><a href=\"#struct-的复制\" class=\"headerlink\" title=\"struct 的复制\"></a>struct 的复制</h2><p>struct 变量可以使用赋值运算符（<code>=</code>），复制给另一个变量，这时会生成一个全新的副本。系统会分配一块新的内存空间，大小与原来的变量相同，把每个属性都复制过去，即原样生成了一份数据。这一点跟数组的复制不一样，务必小心。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cat</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">short</span> age<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hula\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hula</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mula</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>b</code>是变量<code>a</code>的副本，两个变量的值是各自独立的，修改掉<code>b.name</code>不影响<code>a.name</code>。</p>\n<p>上面这个示例是有前提的，就是 struct 结构的属性必须定义成字符数组，才能复制数据。如果稍作修改，属性定义成字符指针，结果就不一样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cat</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span> <span class=\"token keyword\">short</span> age<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Hula\"</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>name</code>属性变成了一个字符指针，这时<code>a</code>赋值给<code>b</code>，导致<code>b.name</code>也是同样的字符指针，指向同一个地址，也就是说两个属性共享同一个地址。因为这时，struct 结构内部保存的是一个指针，而不是上一个例子的数组，这时复制的就不是字符串本身，而是它的指针。并且，这个时候也没法修改字符串，因为字符指针指向的字符串是不能修改的。</p>\n<p>总结一下，赋值运算符（<code>=</code>）可以将 struct 结构每个属性的值，一模一样复制一份，拷贝给另一个 struct 变量。这一点跟数组完全不同，使用赋值运算符复制数组，不会复制数据，只会共享地址。</p>\n<p>注意，这种赋值要求两个变量是同一个类型，不同类型的 struct 变量无法互相赋值。</p>\n<p>另外，C 语言没有提供比较两个自定义数据结构是否相等的方法，无法用比较运算符（比如<code>==</code>和<code>!=</code>）比较两个数据结构是否相等或不等。</p>\n<h2 id=\"struct-指针\"><a href=\"#struct-指针\" class=\"headerlink\" title=\"struct 指针\"></a>struct 指针</h2><p>如果将 struct 变量传入函数，函数内部得到的是一个原始值的副本。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">turtle</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> species<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">happy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">turtle</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  t<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">turtle</span> myTurtle <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"MyTurtle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sea turtle\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">happy</span><span class=\"token punctuation\">(</span>myTurtle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Age is %i\\n\"</span><span class=\"token punctuation\">,</span> myTurtle<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 99</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>happy()</code>传入的是一个 struct 变量<code>myTurtle</code>，函数内部有一个自增操作。但是，执行完<code>happy()</code>以后，函数外部的<code>age</code>属性值根本没变。原因就是函数内部得到的是 struct 变量的副本，改变副本影响不到函数外部的原始数据。</p>\n<p>通常情况下，开发者希望传入函数的是同一份数据，函数内部修改数据以后，会反映在函数外部。而且，传入的是同一份数据，也有利于提高程序性能。这时就需要将 struct 变量的指针传入函数，通过指针来修改 struct 属性，就可以影响到函数外部。</p>\n<p>struct 指针传入函数的写法如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">happy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">turtle</span><span class=\"token operator\">*</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">happy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myTurtle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>t</code>是 struct 结构的指针，调用函数时传入的是指针。struct 类型跟数组不一样，类型标识符本身并不是指针，所以传入时，指针必须写成<code>&amp;myTurtle</code>。</p>\n<p>函数内部也必须使用<code>(*t).age</code>的写法，从指针拿到 struct 结构本身。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">happy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">turtle</span><span class=\"token operator\">*</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>(*t).age</code>不能写成<code>*t.age</code>，因为点运算符<code>.</code>的优先级高于<code>*</code>。<code>*t.age</code>这种写法会将<code>t.age</code>看成一个指针，然后取它对应的值，会出现无法预料的结果。</p>\n<p>现在，重新编译执行上面的整个示例，<code>happy()</code>内部对 struct 结构的操作，就会反映到函数外部。</p>\n<p><code>(*t).age</code>这样的写法很麻烦。C 语言就引入了一个新的箭头运算符（<code>-&gt;</code>），可以从 struct 指针上直接获取属性，大大增强了代码的可读性。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">happy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">turtle</span><span class=\"token operator\">*</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  t<span class=\"token operator\">-></span>age <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>总结一下，对于 struct 变量名，使用点运算符（<code>.</code>）获取属性；对于 struct 变量指针，使用箭头运算符（<code>-&gt;</code>）获取属性。以变量<code>myStruct</code>为例，假设<code>ptr</code>是它的指针，那么下面三种写法是同一回事。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// ptr == &amp;myStruct</span>\nmyStruct<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>prop <span class=\"token operator\">==</span> ptr<span class=\"token operator\">-></span>prop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"struct-的嵌套\"><a href=\"#struct-的嵌套\" class=\"headerlink\" title=\"struct 的嵌套\"></a>struct 的嵌套</h2><p>struct 结构的成员可以是另一个 struct 结构。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">species</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> kinds<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">fish</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">species</span> breed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>fish</code>的属性<code>breed</code>是另一个 struct 结构<code>species</code>。</p>\n<p>赋值的时候有多种写法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 写法一</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">fish</span> shark <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"shark\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Selachimorpha\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 写法二</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">species</span> myBreed <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Selachimorpha\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">fish</span> shark <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"shark\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> myBreed<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 写法三</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">fish</span> shark <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"shark\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">.</span>breed<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Selachimorpha\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 写法四</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">fish</span> shark <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"shark\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">.</span>breed<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Selachimorpha\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">.</span>breed<span class=\"token punctuation\">.</span>kinds<span class=\"token operator\">=</span><span class=\"token number\">500</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shark's species is %s\"</span><span class=\"token punctuation\">,</span> shark<span class=\"token punctuation\">.</span>breed<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例展示了嵌套 Struct 结构的四种赋值写法。另外，引用<code>breed</code>属性的内部属性，要使用两次点运算符（<code>shark.breed.name</code>）。</p>\n<p>下面是另一个嵌套 struct 的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">name</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">student</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">name</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">short</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> student1<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Harry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Potter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">name</span> myname <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Harry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Potter\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nstudent1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> myname<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，自定义类型<code>student</code>的<code>name</code>属性是另一个自定义类型，如果要引用后者的属性，就必须使用两个<code>.</code>运算符，比如<code>student1.name.first</code>。另外，对字符数组属性赋值，要使用<code>strcpy()</code>函数，不能直接赋值，因为直接改掉字符数组名的地址会报错。</p>\n<p>struct 结构内部不仅可以引用其他结构，还可以自我引用，即结构内部引用当前结构。比如，链表结构的节点就可以写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>node</code>结构的<code>next</code>属性，就是指向另一个<code>node</code>实例的指针。下面，使用这个结构自定义一个数据链表。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 生成一个三个节点的列表 (11)->(22)->(33)</span>\nhead <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhead<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\nhead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhead<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\nhead<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhead<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token number\">33</span><span class=\"token punctuation\">;</span>\nhead<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 遍历这个列表</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> cur <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例是链表结构的最简单实现，通过<code>for</code>循环可以对其进行遍历。</p>\n<h2 id=\"位字段\"><a href=\"#位字段\" class=\"headerlink\" title=\"位字段\"></a>位字段</h2><p>struct 还可以用来定义二进制位组成的数据结构，称为“位字段”（bit field），这对于操作底层的二进制数据非常有用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> ab<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> cd<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> ef<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> gh<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> synth<span class=\"token punctuation\">;</span>\n\nsynth<span class=\"token punctuation\">.</span>ab <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nsynth<span class=\"token punctuation\">.</span>cd <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，每个属性后面的<code>:1</code>，表示指定这些属性只占用一个二进制位，所以这个数据结构一共是4个二进制位。</p>\n<p>注意，定义二进制位时，结构内部的各个属性只能是整数类型。</p>\n<p>实际存储的时候，C 语言会按照<code>int</code>类型占用的字节数，存储一个位字段结构。如果有剩余的二进制位，可以使用未命名属性，填满那些位。也可以使用宽度为0的属性，表示占满当前字节剩余的二进制位，迫使下一个属性存储在下一个字节。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> field1 <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>        <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> field2 <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>        <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> field3 <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> stuff<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>stuff.field1</code>与<code>stuff.field2</code>之间，有一个宽度为两个二进制位的未命名属性。<code>stuff.field3</code>将存储在下一个字节。</p>\n<h2 id=\"弹性数组成员\"><a href=\"#弹性数组成员\" class=\"headerlink\" title=\"弹性数组成员\"></a>弹性数组成员</h2><p>很多时候，不能事先确定数组到底有多少个成员。如果声明数组的时候，事先给出一个很大的成员数，就会很浪费空间。C 语言提供了一个解决方法，叫做弹性数组成员（flexible array member）。</p>\n<p>如果不能事先确定数组成员的数量时，可以定义一个 struct 结构。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">vstring</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> chars<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>struct vstring</code>结构有两个属性。<code>len</code>属性用来记录数组<code>chars</code>的长度，<code>chars</code>属性是一个数组，但是没有给出成员数量。</p>\n<p><code>chars</code>数组到底有多少个成员，可以在为<code>vstring</code>分配内存时确定。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">vstring</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">vstring</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token operator\">-></span>len <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，假定<code>chars</code>数组的成员数量是<code>n</code>，只有在运行时才能知道<code>n</code>到底是多少。然后，就为<code>struct vstring</code>分配它需要的内存：它本身占用的内存长度，再加上<code>n</code>个数组成员占用的内存长度。最后，<code>len</code>属性记录一下<code>n</code>是多少。</p>\n<p>这样就可以让数组<code>chars</code>有<code>n</code>个成员，不用事先确定，可以跟运行时的需要保持一致。</p>\n<p>弹性数组成员有一些专门的规则。首先，弹性成员的数组，必须是 struct 结构的最后一个属性。另外，除了弹性数组成员，struct 结构必须至少还有一个其他属性。</p>\n<h1 id=\"typedef-命令\"><a href=\"#typedef-命令\" class=\"headerlink\" title=\"typedef 命令\"></a>typedef 命令</h1><h2 id=\"简介-7\"><a href=\"#简介-7\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>typedef</code>命令用来为某个类型起别名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> type name<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，<code>type</code>代表类型名，<code>name</code>代表别名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> BYTE<span class=\"token punctuation\">;</span>\n\nBYTE c <span class=\"token operator\">=</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>typedef</code>命令为类型<code>unsign char</code>起别名<code>BYTE</code>，然后就可以使用<code>BYTE</code>声明变量。</p>\n<p>typedef 可以一次指定多个别名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> antelope<span class=\"token punctuation\">,</span> bagel<span class=\"token punctuation\">,</span> mushroom<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，一次性为<code>int</code>类型起了三个别名。</p>\n<p>typedef 可以为指针起别名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> intptr<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nintptr x <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>intptr</code>是<code>int*</code>的别名。不过，使用的时候要小心，这样不容易看出来，变量<code>x</code>是一个指针类型。</p>\n<p>typedef 也可以用来为数组类型起别名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> five_ints<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nfive_ints x <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>five_ints</code>是一个数组类型，包含5个整数的</p>\n<p>typedef 为函数起别名的写法如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，类型别名<code>fp</code>是一个指针，代表函数<code>signed char (*)(void)</code>。</p>\n<h2 id=\"主要好处\"><a href=\"#主要好处\" class=\"headerlink\" title=\"主要好处\"></a>主要好处</h2><p><code>typedef</code>为类型起别名的好处，主要有下面几点。</p>\n<p>（1）更好的代码可读性。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> STRING<span class=\"token punctuation\">;</span>\n\nSTRING name<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例为字符指针起别名为<code>STRING</code>，以后使用<code>STRING</code>声明变量时，就可以轻易辨别该变量是字符串。</p>\n<p>（2）为 struct、union、enum 等命令定义的复杂数据结构创建别名，从而便于引用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">treenode</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">treenode</span><span class=\"token operator\">*</span> Tree<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>Tree</code>为<code>struct treenode*</code>的别名。</p>\n<p>typedef 也可以与 struct 定义数据类型的命令写在一起。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">animal</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> leg_count<span class=\"token punctuation\">,</span> speed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> animal<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，自定义数据类型时，同时使用<code>typedef</code>命令，为<code>struct animal</code>起了一个别名<code>animal</code>。</p>\n<p>这种情况下，C 语言允许省略 struct 命令后面的类型名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> leg_count<span class=\"token punctuation\">,</span> speed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> animal<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例相当于为一个匿名的数据类型起了别名<code>animal</code>。</p>\n<p>（3）typedef 方便以后为变量改类型。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">float</span> app_float<span class=\"token punctuation\">;</span>\n\napp_float f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">,</span> f3<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>f1</code>、<code>f2</code>、<code>f3</code>的类型都是<code>float</code>。如果以后需要为它们改类型，只需要修改<code>typedef</code>语句即可。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> app_float<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令将变量<code>f1</code>、<code>f2</code>、<code>f3</code>的类型都改为<code>long double</code>。</p>\n<p>（4）可移植性</p>\n<p>某一个值在不同计算机上的类型，可能是不一样的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码在32位整数的计算机没有问题，但是在16位整数的计算机就会出错。</p>\n<p>C 语言的解决办法，就是提供了类型别名，在不同计算机上会解释成不同类型，比如<code>int32_t</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int32_t i <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例将变量<code>i</code>声明成<code>int32_t</code>类型，保证它在不同计算机上都是32位宽度，移植代码时就不会出错。</p>\n<p>这一类的类型别名都是用 typedef 定义的。下面是类似的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> ptrdiff_t<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> size_t<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> wchar_t<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这些整数类型别名都放在头文件<code>stdint.h</code>，不同架构的计算机只需修改这个头文件即可，而无需修改代码。</p>\n<p>因此，<code>typedef</code>有助于提高代码的可移植性，使其能适配不同架构的计算机。</p>\n<p>（5）简化类型声明</p>\n<p>C 语言有些类型声明相当复杂，比如下面这个。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>typedef 可以简化复杂的类型声明，使其更容易理解。首先，最外面一层起一个类型别名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这个看起来还是有点复杂，就为里面一层也定义一个别名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> Func Arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nArr<span class=\"token operator\">*</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码就比较容易解读了。</p>\n<ul>\n<li><code>x</code>是一个函数，返回一个指向 Arr 类型的指针。</li>\n<li><code>Arr</code>是一个数组，有5个成员，每个成员是<code>Func</code>类型。</li>\n<li><code>Func</code>是一个函数指针，指向一个无参数、返回字符值的函数。</li>\n</ul>\n<h1 id=\"Union-结构\"><a href=\"#Union-结构\" class=\"headerlink\" title=\"Union 结构\"></a>Union 结构</h1><p>有时需要一种数据结构，不同的场合表示不同的数据类型。比如，如果只用一种数据结构表示水果的“量”，这种结构就需要有时是整数（6个苹果），有时是浮点数（1.5公斤草莓）。</p>\n<p>C 语言提供了 Union 结构，用来自定义可以灵活变更的数据结构。它内部可以包含各种属性，但同一时间只能有一个属性，因为所有属性都保存在同一个内存地址，后面写入的属性会覆盖前面的属性。这样做的最大好处是节省空间。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">union</span> quantity <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">short</span> count<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> weight<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> volume<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>union</code>命令定义了一个包含三个属性的数据类型<code>quantity</code>。虽然包含三个属性，但是同一时间只能取到一个属性。最后赋值的属性，就是可以取到值的那个属性。</p>\n<p>使用时，声明一个该类型的变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 写法一</span>\n<span class=\"token keyword\">union</span> quantity q<span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 写法二</span>\n<span class=\"token keyword\">union</span> quantity q <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 写法三</span>\n<span class=\"token keyword\">union</span> quantity q <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码展示了为 Union 结构赋值的三种写法。最后一种写法不指定属性名，就会赋值给第一个属性。</p>\n<p>执行完上面的代码以后，<code>q.count</code>可以取到值，另外两个属性取不到值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count is %i\\n\"</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// count is 4</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weight is %f\\n\"</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 未定义行为</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果要让<code>q.weight</code>属性可以取到值，就要先为它赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">q<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weight is %f\\n\"</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// weight is 0.5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>一旦为其他属性赋值，原先可以取到值的<code>q.count</code>属性就不再有效了。除了这一点，Union 结构的其他用法与 Struct 结构，基本上是一致的。</p>\n<p>Union 结构也支持指针运算符<code>-&gt;</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">union</span> quantity <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">short</span> count<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> weight<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> volume<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">union</span> quantity q<span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">union</span> quantity<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">;</span>\nptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ptr<span class=\"token operator\">-></span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>ptr</code>是<code>q</code>的指针，那么<code>ptr-&gt;count</code>等同于<code>q.count</code>。</p>\n<p>Union 结构指针与它的属性有关，当前哪个属性能够取到值，它的指针就是对应的数据类型。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">union</span> foo <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> foo_int_p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span><span class=\"token operator\">*</span> foo_float_p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n\nx<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 12</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>foo_int_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 12</span>\n\nx<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">3.141592</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 3.141592</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>foo_float_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3.141592</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>&amp;x</code>是 foo 结构的指针，它的数据类型完全由当前赋值的属性决定。</p>\n<p>typedef 命令可以为 Union 数据类型起别名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">short</span> count<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> weight<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> volume<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> quantity<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>union</code>命令定义了一个包含三个属性的数据类型，<code>typedef</code>命令为它起别名为<code>quantity</code>。</p>\n<p>Union 结构的好处，主要是节省空间。它将一段内存空间，重用于不同类型的数据。定义了三个属性，但同一时间只用到一个，使用 Union 结构就可以节省另外两个属性的空间。Union 结构占用的内存长度，等于它内部最长属性的长度。</p>\n<h1 id=\"Enum-类型\"><a href=\"#Enum-类型\" class=\"headerlink\" title=\"Enum 类型\"></a>Enum 类型</h1><p>如果一种数据类型的取值只有少数几种可能，并且每种取值都有自己的含义，为了提高代码的可读性，可以将它们定义为 Enum 类型，中文名为枚举。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">colors</span> <span class=\"token punctuation\">&#123;</span>RED<span class=\"token punctuation\">,</span> GREEN<span class=\"token punctuation\">,</span> BLUE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> GREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> BLUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，假定程序里面需要三种颜色，就可以使用<code>enum</code>命令，把这三种颜色定义成一种枚举类型<code>colors</code>，它只有三种取值可能<code>RED</code>、<code>GREEN</code>、<code>BLUE</code>。这时，这三个名字自动成为整数常量，编译器默认将它们的值设为数字<code>0</code>、<code>1</code>、<code>2</code>。相比之下，<code>RED</code>要比<code>0</code>的可读性好了许多。</p>\n<p>注意，Enum 内部的常量名，遵守标识符的命名规范，但是通常都使用大写。</p>\n<p>使用时，可以将变量声明为 Enum 类型。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">colors</span> color<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码将变量<code>color</code>声明为<code>enum colors</code>类型。这个变量的值就是常量<code>RED</code>、<code>GREEN</code>、<code>BLUE</code>之中的一个。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">color <span class=\"token operator\">=</span> BLUE<span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码将变量<code>color</code>的值设为<code>BLUE</code>，这里<code>BLUE</code>就是一个常量，值等于<code>2</code>。</p>\n<p>typedef 命令可以为 Enum 类型起别名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span>\n  SHEEP<span class=\"token punctuation\">,</span>\n  WHEAT<span class=\"token punctuation\">,</span>\n  WOOD<span class=\"token punctuation\">,</span>\n  BRICK<span class=\"token punctuation\">,</span>\n  ORE\n<span class=\"token punctuation\">&#125;</span> RESOURCE<span class=\"token punctuation\">;</span>\n\nRESOURCE r<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>RESOURCE</code>是 Enum 类型的别名。声明变量时，使用这个别名即可。</p>\n<p>还有一种不常见的写法，就是声明 Enum 类型时，在同一行里面为变量赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span>\n  SHEEP<span class=\"token punctuation\">,</span>\n  WHEAT<span class=\"token punctuation\">,</span>\n  WOOD<span class=\"token punctuation\">,</span>\n  BRICK<span class=\"token punctuation\">,</span>\n  ORE\n<span class=\"token punctuation\">&#125;</span> r <span class=\"token operator\">=</span> BRICK<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> WOOD<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>r</code>的值是<code>3</code>，<code>s</code>的值是<code>2</code>。</p>\n<p>由于 Enum 的属性会自动声明为常量，所以有时候使用 Enum 的目的，不是为了自定义一种数据类型，而是为了声明一组常量。这时就可以使用下面这种写法，比较简单。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span> ONE<span class=\"token punctuation\">,</span> TWO <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> ONE<span class=\"token punctuation\">,</span> TWO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>enum</code>是一个关键字，后面跟着一个代码块，常量就在代码内声明。<code>ONE</code>和<code>TWO</code>就是两个 Enum 常量。</p>\n<p>常量之间使用逗号分隔。最后一个常量后面的尾逗号，可以省略，也可以保留。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span> ONE<span class=\"token punctuation\">,</span> TWO<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>由于Enum 会自动编号，因此可以不必为常量赋值。C 语言会自动从0开始递增，为常量赋值。但是，C 语言也允许为 ENUM 常量指定值，不过只能指定为整数，不能是其他类型。因此，任何可以使用整数的场合，都可以使用 Enum 常量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span> ONE <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> TWO <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> ONE<span class=\"token punctuation\">,</span> TWO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>Enum 常量可以是不连续的值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span> X <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Y <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> Z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Enum 常量也可以是同一个值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span> X <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Z <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果一组常量之中，有些指定了值，有些没有指定。那么，没有指定值的常量会从上一个指定了值的常量，开始自动递增赋值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span>\n  A<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 0</span>\n  B<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 1</span>\n  C <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 4</span>\n  D<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 5</span>\n  E<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 6</span>\n  F <span class=\"token operator\">=</span> <span class=\"token number\">3</span>   <span class=\"token comment\">// 3</span>\n  G<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 4</span>\n  H     <span class=\"token comment\">// 5</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Enum 的作用域与变量相同。如果是在顶层声明，那么在整个文件内都有效；如果是在代码块内部声明，则只对该代码块有效。如果与使用<code>int</code>声明的常量相比，Enum 的好处是更清晰地表示代码意图。</p>\n<h1 id=\"预处理器（Preprocessor）\"><a href=\"#预处理器（Preprocessor）\" class=\"headerlink\" title=\"预处理器（Preprocessor）\"></a>预处理器（Preprocessor）</h1><h2 id=\"简介-8\"><a href=\"#简介-8\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>C 语言编译器在编译程序之前，会先使用预处理器（preprocessor）处理代码。</p>\n<p>预处理器首先会清理代码，进行删除注释、多行的语句合成一个逻辑行等等。然后，执行<code>#</code>开头的预处理指令。本章介绍 C 语言的预处理指令。</p>\n<p>预处理指令可以出现在程序的任何地方，但是习惯上，往往放在代码的开头部分。</p>\n<p>每个预处理指令都以<code>#</code>开头，放在一行的行首，指令前面可以有空白字符（比如空格或制表符）。<code>#</code>和指令的其余部分之间也可以有空格，但是为了兼容老的编译器，一般不留空格。</p>\n<p>所有预处理指令都是一行的，除非在行尾使用反斜杠，将其折行。指令结尾处不需要分号。</p>\n<h2 id=\"define\"><a href=\"#define\" class=\"headerlink\" title=\"#define\"></a>#define</h2><p><code>#define</code>是最常见的预处理指令，用来将指定的词替换成另一个词。它的参数分成两个部分，第一个参数就是要被替换的部分，其余参数是替换后的内容。每条替换规则，称为一个宏（macro）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MAX <span class=\"token number\">100</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>#define</code>指定将源码里面的<code>MAX</code>，全部替换成<code>100</code>。<code>MAX</code>就称为一个宏。</p>\n<p>宏的名称不允许有空格，而且必须遵守 C 语言的变量命名规则，只能使用字母、数字与下划线（<code>_</code>），且首字符不能是数字。</p>\n<p>宏是原样替换，指定什么内容，就一模一样替换成什么内容。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">HELLO </span><span class=\"token string\">\"Hello, world\"</span></span>\n\n<span class=\"token comment\">// 相当于 printf(\"%s\", \"Hello, world\");</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> HELLO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，宏<code>HELLO</code>会被原样替换成<code>&quot;Hello, world&quot;</code>。</p>\n<p><code>#define</code>指令可以出现在源码文件的任何地方，从指令出现的地方到该文件末尾都有效。习惯上，会将<code>#define</code>放在源码文件的头部。它的主要好处是，会使得程序的可读性更好，也更容易修改。</p>\n<p><code>#define</code>指令从<code>#</code>开始，一直到换行符为止。如果整条指令过长，可以在折行处使用反斜杠，延续到下一行。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">OW </span><span class=\"token string\">\"C programming language is invented \\\nin 1970s.\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，第一行结尾的反斜杠将<code>#define</code>指令拆成两行。</p>\n<p><code>#define</code>允许多重替换，即一个宏可以包含另一个宏。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TWO <span class=\"token number\">2</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">FOUR TWO<span class=\"token operator\">*</span>TWO</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>FOUR</code>会被替换成<code>2*2</code>。</p>\n<p>注意，如果宏出现在字符串里面（即出现在双引号中），或者是其他标识符的一部分，就会失效，并不会发生替换。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TWO <span class=\"token number\">2</span></span></span>\n\n<span class=\"token comment\">// 输出 TWO</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TWO\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出 22</span>\n<span class=\"token keyword\">const</span> TWOs <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> TWOs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，双引号里面的<code>TWO</code>，以及标识符<code>TWOs</code>，都不会被替换。</p>\n<p>同名的宏可以重复定义，只要定义是相同的，就没有问题。如果定义不同，就会报错。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 正确</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">FOO hello</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">FOO hello</span></span>\n\n<span class=\"token comment\">// 报错</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">BAR hello</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">BAR world</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，宏<code>FOO</code>没有变化，所以可以重复定义，宏<code>BAR</code>发生了变化，就报错了。</p>\n<h2 id=\"带参数的宏\"><a href=\"#带参数的宏\" class=\"headerlink\" title=\"带参数的宏\"></a>带参数的宏</h2><h3 id=\"基本用法-1\"><a href=\"#基本用法-1\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>宏的强大之处在于，它的名称后面可以使用括号，指定接受一个或多个参数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">SQUARE</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> X<span class=\"token operator\">*</span>X</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，宏<code>SQUARE</code>可以接受一个参数<code>X</code>，替换成<code>X*X</code>。</p>\n<p>注意，宏的名称与左边圆括号之间，不能有空格。</p>\n<p>这个宏的用法如下。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 替换成 z = 2*2;</span>\nz <span class=\"token operator\">=</span> <span class=\"token function\">SQUARE</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这种写法很像函数，但又不是函数，而是完全原样的替换，会跟函数有不一样的行为。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">SQUARE</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> X<span class=\"token operator\">*</span>X</span></span>\n\n<span class=\"token comment\">// 输出19</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SQUARE</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>SQUARE(3 + 4)</code>如果是函数，输出的应该是49（<code>7*7</code>）；宏是原样替换，所以替换成<code>3 + 4*3 + 4</code>，最后输出19。</p>\n<p>可以看到，原样替换可能导致意料之外的行为。解决办法就是在定义宏的时候，尽量多使用圆括号，这样可以避免很多意外。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">SQUARE</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>SQUARE(X)</code>替换后的形式，有两层圆括号，就可以避免很多错误的发生。</p>\n<p>宏的参数也可以是空的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，宏<code>getchar()</code>的参数就是空的。这种情况其实可以省略圆括号，但是加上了，会让它看上去更像函数。</p>\n<p>一般来说，带参数的宏都是一行的。下面是两个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">IS_EVEN</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果宏的长度过长，可以使用反斜杠（<code>\\</code>）折行，将宏写成多行。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">PRINT_NUMS_TO_PRODUCT</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token keyword\">int</span> product <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> product<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"%d\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，替换文本放在大括号里面，这是为了创造一个块作用域，避免宏内部的变量污染外部。</p>\n<p>带参数的宏也可以嵌套，一个宏里面包含另一个宏。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">QUADP</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">QUADM</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">QUAD</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token function\">QUADP</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">QUADM</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例是一元二次方程组求解的宏，由于存在正负两个解，所以宏<code>QUAD</code>先替换成另外两个宏<code>QUADP</code>和<code>QUADM</code>，后者再各自替换成一个解。</p>\n<p>那么，什么时候使用带参数的宏，什么时候使用函数呢？</p>\n<p>一般来说，应该首先使用函数，它的功能更强、更容易理解。宏有时候会产生意想不到的替换结果，而且往往只能写成一行，除非对换行符进行转义，但是可读性就变得很差。</p>\n<p>宏的优点是相对简单，本质上是字符串替换，不涉及数据类型，不像函数必须定义数据类型。而且，宏将每一处都替换成实际的代码，省掉了函数调用的开销，所以性能会好一些。另外，以前的代码大量使用宏，尤其是简单的数学运算，为了读懂前人的代码，需要对它有所了解。</p>\n<h3 id=\"运算符，-运算符\"><a href=\"#运算符，-运算符\" class=\"headerlink\" title=\"#运算符，##运算符\"></a><code>#</code>运算符，<code>##</code>运算符</h3><p>由于宏不涉及数据类型，所以替换以后可能为各种类型的值。如果希望替换后的值为字符串，可以在替换文本的参数前面加上<code>#</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">STR</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> #x</span></span>\n\n<span class=\"token comment\">// 等同于 printf(\"%s\\n\", \"3.14159\");</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">STR</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14159</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>STR(3.14159)</code>会被替换成<code>3.14159</code>。如果<code>x</code>前面没有<code>#</code>，这会被解释成一个浮点数，有了<code>#</code>以后，就会被转换成字符串。</p>\n<p>下面是另一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">XNAME</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> </span><span class=\"token string\">\"x\"</span><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">n</span></span>\n\n<span class=\"token comment\">// 输出 x4</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">XNAME</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>#n</code>指定参数输出为字符串，再跟前面的字符串结合，最终输出为<code>&quot;x4&quot;</code>。如果不加<code>#</code>，这里实现起来就很麻烦了。</p>\n<p>如果替换后的文本里面，参数需要跟其他标识符连在一起，组成一个新的标识符，可以使用<code>##</code>运算符。它起到粘合作用，将参数“嵌入”一个标识符之中。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">MK_ID</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> i</span><span class=\"token punctuation\">##</span><span class=\"token expression\">n</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>n</code>是宏<code>MK_ID</code>的参数，这个参数需要跟标识符<code>i</code>粘合在一起，这时<code>i</code>和<code>n</code>之间就要使用<code>##</code>运算符。下面是这个宏的用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">MK_ID</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MK_ID</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MK_ID</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 替换成</span>\n<span class=\"token keyword\">int</span> i1<span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">,</span> i3<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，替换后的文本<code>i1</code>、<code>i2</code>、<code>i3</code>是三个标识符，参数<code>n</code>是标识符的一部分。从这个例子可以看到，<code>##</code>运算符的一个主要用途是批量生成变量名和标识符。</p>\n<h3 id=\"不定参数的宏\"><a href=\"#不定参数的宏\" class=\"headerlink\" title=\"不定参数的宏\"></a>不定参数的宏</h3><p>宏的参数还可以是不定数量的（即不确定有多少个参数），<code>...</code>表示剩余的参数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __VA_ARGS__</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>X(a, b, ...)</code>表示<code>X()</code>至少有两个参数，多余的参数使用<code>...</code>表示。在替换文本中，<code>__VA_ARGS__</code>代表多余的参数（每个参数之间使用逗号分隔）。下面是用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 替换成</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，<code>...</code>只能替代宏的尾部参数，不能写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 报错</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">WRONG</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">)</span> #X #__CA_ARGS__ #Y</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>...</code>替代中间部分的参数，这是不允许的，会报错。</p>\n<p><code>__VA_ARGS__</code>前面加上一个<code>#</code>号，可以让输出变成一个字符串。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> #__VA_ARGS__</span></span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Prints \"1, 2, 3\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"undef\"><a href=\"#undef\" class=\"headerlink\" title=\"#undef\"></a>#undef</h2><p><code>#undef</code>指令用来取消已经使用<code>#define</code>定义的宏。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">LIMIT <span class=\"token number\">400</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">LIMIT</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例的<code>undef</code>指令取消已经定义的宏<code>LIMIT</code>，后面就可以重新用 LIMIT 定义一个宏。</p>\n<p>有时候想重新定义一个宏，但不确定是否以前定义过，就可以先用<code>#undef</code>取消，然后再定义。因为同名的宏如果两次定义不一样，会报错，而<code>#undef</code>的参数如果是不存在的宏，并不会报错。</p>\n<p>GCC 的<code>-U</code>选项可以在命令行取消宏的定义，相当于<code>#undef</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ gcc -ULIMIT foo.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中的<code>-U</code>参数，取消了宏<code>LIMIT</code>，相当于源文件里面的<code>#undef LIMIT</code>。</p>\n<h2 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"#include\"></a>#include</h2><p><code>#include</code>指令用于编译时将其他源码文件，加载进入当前文件。它有两种形式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 形式一</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;foo.h></span> <span class=\"token comment\">// 加载系统提供的文件</span></span>\n\n<span class=\"token comment\">// 形式二</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"foo.h\"</span> <span class=\"token comment\">// 加载用户提供的文件</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>形式一，文件名写在尖括号里面，表示该文件是系统提供的，通常是标准库的库文件，不需要写路径。因为编译器会到系统指定的安装目录里面，去寻找这些文件。</p>\n<p>形式二，文件名写在双引号里面，表示该文件由用户提供，具体的路径取决于编译器的设置，可能是当前目录，也可能是项目的工作目录。如果所要包含的文件在其他位置，就需要指定路径，下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"/usr/local/lib/foo.h\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>GCC 编译器的<code>-I</code>参数，也可以用来指定<code>include</code>命令中用户文件的加载路径。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ gcc -Iinclude/ -o code code.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面命令中，<code>-Iinclude/</code>指定从当前目录的<code>include</code>子目录里面，加载用户自己的文件。</p>\n<p><code>#include</code>最常见的用途，就是用来加载包含函数原型的头文件（后缀名为<code>.h</code>），参见《多文件编译》一章。多个<code>#include</code>指令的顺序无关紧要，多次包含同一个头文件也是合法的。</p>\n<h2 id=\"if…-endif\"><a href=\"#if…-endif\" class=\"headerlink\" title=\"#if…#endif\"></a>#if…#endif</h2><p><code>#if...#endif</code>指令用于预处理器的条件判断，满足条件时，内部的行会被编译，否则就被编译器忽略。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.1415</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不会执行</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>#if</code>后面的<code>0</code>，表示判断条件不成立。所以，内部的变量定义语句会被编译器忽略。<code>#if 0</code>这种写法常用来当作注释使用，不需要的代码就放在<code>#if 0</code>里面。</p>\n<p><code>#if</code>后面的判断条件，通常是一个表达式。如果表达式的值不等于<code>0</code>，就表示判断条件为真，编译内部的语句；如果表达式的值等于0，表示判断条件为伪，则忽略内部的语句。</p>\n<p><code>#if...#endif</code>之间还可以加入<code>#else</code>指令，用于指定判断条件不成立时，需要编译的语句。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">FOO <span class=\"token number\">1</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">FOO</span></span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"defined\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not defined\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，宏<code>FOO</code>如果定义过，会被替换成<code>1</code>，从而输出<code>defined</code>，否则输出<code>not defined</code>。</p>\n<p>如果有多个判断条件，还可以加入<code>#elif</code>命令。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">HAPPY_FACTOR <span class=\"token operator\">==</span> <span class=\"token number\">0</span></span></span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm not happy!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">HAPPY_FACTOR <span class=\"token operator\">==</span> <span class=\"token number\">1</span></span></span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm just regular\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm extra happy!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，通过<code>#elif</code>指定了第二重判断。注意，<code>#elif</code>的位置必须在<code>#else</code>之前。如果多个判断条件皆不满足，则执行<code>#else</code>的部分。</p>\n<p>没有定义过的宏，等同于<code>0</code>。因此如果<code>UNDEFINED</code>是一个没有定义过的宏，那么<code>#if UNDEFINED</code>为伪，而<code>#if !UNDEFINED</code>为真。</p>\n<p><code>#if</code>的常见应用就是打开（或关闭）调试模式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">DEBUG <span class=\"token number\">1</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">DEBUG</span></span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of i : %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of j : %d\\n\"</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，通过将<code>DEBUG</code>设为<code>1</code>，就打开了调试模式，可以输出调试信息。</p>\n<p>GCC 的<code>-D</code>参数可以在编译时指定宏的值，因此可以很方便地打开调试开关。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ gcc -DDEBUG<span class=\"token operator\">=</span><span class=\"token number\">1</span> foo.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>-D</code>参数指定宏<code>DEBUG</code>为<code>1</code>，相当于在代码中指定<code>#define DEBUG 1</code>。</p>\n<h2 id=\"ifdef…-endif\"><a href=\"#ifdef…-endif\" class=\"headerlink\" title=\"#ifdef…#endif\"></a>#ifdef…#endif</h2><p><code>#ifdef...#endif</code>指令用于判断某个宏是否定义过。</p>\n<p>有时源码文件可能会重复加载某个库，为了避免这种情况，可以在库文件里使用<code>#define</code>定义一个空的宏。通过这个宏，判断库文件是否被加载了。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">EXTRA_HAPPY</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>EXTRA_HAPPY</code>就是一个空的宏。</p>\n<p>然后，源码文件使用<code>#ifdef...#endif</code>检查这个宏是否定义过。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">EXTRA_HAPPY</span></span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm extra happy!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>#ifdef</code>检查宏<code>EXTRA_HAPPY</code>是否定义过。如果已经存在，表示加载过库文件，就会打印一行提示。</p>\n<p><code>#ifdef</code>可以与<code>#else</code>指令配合使用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">EXTRA_HAPPY</span></span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm extra happy!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm just regular\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，如果宏<code>EXTRA_HAPPY</code>没有定义过，就会执行<code>#else</code>的部分。</p>\n<p><code>#ifdef...#else...#endif</code>可以用来实现条件加载。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MAVIS</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"foo.h\"</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">STABLES <span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"bar.h\"</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">STABLES <span class=\"token number\">2</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，通过判断宏<code>MAVIS</code>是否定义过，实现加载不同的头文件。</p>\n<h2 id=\"defined-运算符\"><a href=\"#defined-运算符\" class=\"headerlink\" title=\"defined 运算符\"></a>defined 运算符</h2><p>上一节的<code>#ifdef</code>指令，等同于<code>#if defined</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">FOO</span></span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">defined FOO</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>defined</code>是一个预处理运算符，如果它的参数是一个定义过的宏，就会返回1，否则返回0。</p>\n<p>使用这种语法，可以完成多重判断。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">defined FOO</span></span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">defined BAR</span></span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个运算符的一个应用，就是对于不同架构的系统，加载不同的头文件。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">defined IBMPC</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ibmpc.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">defined MAC</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mac.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"general.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，不同架构的系统需要定义对应的宏。代码根据不同的宏，加载对应的头文件。</p>\n<h2 id=\"ifndef…-endif\"><a href=\"#ifndef…-endif\" class=\"headerlink\" title=\"#ifndef…#endif\"></a>#ifndef…#endif</h2><p><code>#ifndef...#endif</code>指令跟<code>#ifdef...#endif</code>正好相反。它用来判断，如果某个宏没有被定义过，则执行指定的操作。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">EXTRA_HAPPY</span></span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm extra happy!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">EXTRA_HAPPY</span></span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm just regular\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，针对宏<code>EXTRA_HAPPY</code>是否被定义过，<code>#ifdef</code>和<code>#ifndef</code>分别指定了两种情况各自需要编译的代码。</p>\n<p><code>#ifndef</code>常用于防止重复加载。举例来说，为了防止头文件<code>myheader.h</code>被重复加载，可以把它放在<code>#ifndef...#endif</code>里面加载。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">MYHEADER_H</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MYHEADER_H</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"myheader.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，宏<code>MYHEADER_H</code>对应文件名<code>myheader.h</code>的大写。只要<code>#ifndef</code>发现这个宏没有被定义过，就说明该头文件没有加载过，从而加载内部的代码，并会定义宏<code>MYHEADER_H</code>，防止被再次加载。</p>\n<p><code>#ifndef</code>等同于<code>#if !defined</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">FOO</span></span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span>defined FOO</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"预定义宏\"><a href=\"#预定义宏\" class=\"headerlink\" title=\"预定义宏\"></a>预定义宏</h2><p>C 语言提供一些预定义的宏，可以直接使用。</p>\n<ul>\n<li><code>__DATE__</code>：编译日期，格式为“Mmm dd yyyy”的字符串（比如 Nov 23 2021）。</li>\n<li><code>__TIME__</code>：编译时间，格式为“hh:mm:ss”。</li>\n<li><code>__FILE__</code>：当前文件名。</li>\n<li><code>__LINE__</code>：当前行号。</li>\n<li><code>__func__</code>：当前正在执行的函数名。该预定义宏必须在函数作用域使用。</li>\n<li><code>__STDC__</code>：如果被设为1，表示当前编译器遵循 C 标准。</li>\n<li><code>__STDC_HOSTED__</code>：如果被设为1，表示当前编译器可以提供完整的标准库；否则被设为0（嵌入式系统的标准库常常是不完整的）。</li>\n<li><code>__STDC_VERSION__</code>：编译所使用的 C 语言版本，是一个格式为<code>yyyymmL</code>的长整数，C99 版本为“199901L”，C11 版本为“201112L”，C17 版本为“201710L”。</li>\n</ul>\n<p>下面示例打印这些预定义宏的值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This function: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__func__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This file: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This line: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__LINE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Compiled on: %s %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__DATE__</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__TIME__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C Version: %ld\\n\"</span><span class=\"token punctuation\">,</span> __STDC_VERSION__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/* 输出如下\n\nThis function: main\nThis file: test.c\nThis line: 7\nCompiled on: Mar 29 2021 19:19:37\nC Version: 201710\n\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"line\"><a href=\"#line\" class=\"headerlink\" title=\"#line\"></a>#line</h2><p><code>#line</code>指令用于覆盖预定义宏<code>__LINE__</code>，将其改为自定义的行号。后面的行将从<code>__LINE__</code>的新值开始计数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 将下一行的行号重置为 300</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">line</span> <span class=\"token expression\"><span class=\"token number\">300</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，紧跟在<code>#line 300</code>后面一行的行号，将被改成300，其后的行会在300的基础上递增编号。</p>\n<p><code>#line</code>还可以改掉预定义宏<code>__FILE__</code>，将其改为自定义的文件名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">line</span> <span class=\"token expression\"><span class=\"token number\">300</span> </span><span class=\"token string\">\"newfilename\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，下一行的行号重置为<code>300</code>，文件名重置为<code>newfilename</code>。</p>\n<h2 id=\"error\"><a href=\"#error\" class=\"headerlink\" title=\"#error\"></a>#error</h2><p><code>#error</code>指令用于让预处理器抛出一个错误，终止编译。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">__STDC_VERSION__ <span class=\"token operator\">!=</span> <span class=\"token number\">201112L</span></span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">error</span> <span class=\"token expression\">Not C11</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例指定，如果编译器不使用 C11 标准，就中止编译。GCC 编译器会像下面这样报错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ gcc -std<span class=\"token operator\">=</span>c99 newish.c\nnewish.c:14:2: error: <span class=\"token comment\">#error Not C11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，GCC 使用 C99 标准编译，就报错了。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">INT_MAX <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span></span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">error</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> type is too small</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，编译器一旦发现<code>INT</code>类型的最大值小于<code>100,000</code>，就会停止编译。</p>\n<p><code>#error</code>指令也可以用在<code>#if...#elif...#else</code>的部分。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">defined WIN32</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">defined MAC_OS</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">defined LINUX</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">error</span> <span class=\"token expression\">NOT support the operating system</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"pragma\"><a href=\"#pragma\" class=\"headerlink\" title=\"#pragma\"></a>#pragma</h2><p><code>#pragma</code>指令用来修改编译器属性。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 使用 C99 标准</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">c9x on</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例让编译器以 C99 标准进行编译。</p>\n<h1 id=\"I-O-函数\"><a href=\"#I-O-函数\" class=\"headerlink\" title=\"I/O 函数\"></a>I/O 函数</h1><p>C 语言提供了一些函数，用于与外部设备通信，称为输入输出函数，简称 I/O 函数。输入（import）指的是获取外部数据，输出（export）指的是向外部传递数据。</p>\n<h2 id=\"缓存和字节流\"><a href=\"#缓存和字节流\" class=\"headerlink\" title=\"缓存和字节流\"></a>缓存和字节流</h2><p>严格地说，输入输出函数并不是直接与外部设备通信，而是通过缓存（buffer）进行间接通信。这个小节介绍缓存是什么。</p>\n<p>普通文件一般都保存在磁盘上面，跟 CPU 相比，磁盘读取或写入数据是一个很慢的操作。所以，程序直接读写磁盘是不可行的，可能每执行一行命令，都必须等半天。C 语言的解决方案，就是只要打开一个文件，就在内存里面为这个文件设置一个缓存区。</p>\n<p>程序向文件写入数据时，程序先把数据放入缓存，等到缓存满了，再把里面的数据会一次性写入磁盘文件。这时，缓存区就空了，程序再把新的数据放入缓存，重复整个过程。</p>\n<p>程序从文件读取数据时，文件先把一部分数据放到缓存里面，然后程序从缓存获取数据，等到缓存空了，磁盘文件再把新的数据放入缓存，重复整个过程。</p>\n<p>内存的读写速度比磁盘快得多，缓存的设计减少了读写磁盘的次数，大大提高了程序的执行效率。另外，一次性移动大块数据，要比多次移动小块数据快得多。</p>\n<p>这种读写模式，对于程序来说，就有点像水流（stream），不是一次性读取或写入所有数据，而是一个持续不断的过程。先操作一部分数据，等到缓存吞吐完这部分数据，再操作下一部分数据。这个过程就叫做字节流操作。</p>\n<p>由于缓存读完就空了，所以字节流读取都是只能读一次，第二次就读不到了。这跟读取文件很不一样。</p>\n<p>C 语言的输入输出函数，凡是涉及读写文件，都是属于字节流操作。输入函数从文件获取数据，操作的是输入流；输出函数向文件写入数据，操作的是输出流。</p>\n<h2 id=\"printf-1\"><a href=\"#printf-1\" class=\"headerlink\" title=\"printf()\"></a>printf()</h2><p><code>printf()</code>是最常用的输出函数，用于屏幕输出，原型定义在头文件<code>stdio.h</code>，详见《基本语法》一章。</p>\n<h2 id=\"scanf\"><a href=\"#scanf\" class=\"headerlink\" title=\"scanf()\"></a>scanf()</h2><h3 id=\"基本用法-2\"><a href=\"#基本用法-2\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p><code>scanf()</code>函数用于读取用户的键盘输入。程序运行到这个语句时，会停下来，等待用户从键盘输入。用户输入数据、按下回车键后，<code>scanf()</code>就会处理用户的输入，将其存入变量。它的原型定义在头文件<code>stdio.h</code>。</p>\n<p><code>scanf()</code>的语法跟<code>printf()</code>类似。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的第一个参数是一个格式字符串，里面会放置占位符（与<code>printf()</code>的占位符基本一致），告诉编译器如何解读用户的输入，需要提取的数据是什么类型。这是因为 C 语言的数据都是有类型的，<code>scanf()</code>必须提前知道用户输入的数据类型，才能处理数据。它的其余参数就是存放用户输入的变量，格式字符串里面有多少个占位符，就有多少个变量。</p>\n<p>上面示例中，<code>scanf()</code>的第一个参数<code>%d</code>，表示用户输入的应该是一个整数。<code>%d</code>就是一个占位符，<code>%</code>是占位符的标志，<code>d</code>表示整数。第二个参数<code>&amp;i</code>表示，将用户从键盘输入的整数存入变量<code>i</code>。</p>\n<p>注意，变量前面必须加上<code>&amp;</code>运算符（指针变量除外），因为<code>scanf()</code>传递的不是值，而是地址，即将变量<code>i</code>的地址指向用户输入的值。如果这里的变量是指针变量（比如字符串变量），那就不用加<code>&amp;</code>运算符。</p>\n<p>下面是一次将键盘输入读入多个变量的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d%f%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，格式字符串<code>%d%d%f%f</code>，表示用户输入的前两个是整数，后两个是浮点数，比如<code>1 -20 3.4 -4.0e3</code>。这四个值依次放入<code>i</code>、<code>j</code>、<code>x</code>、<code>y</code>四个变量。</p>\n<p><code>scanf()</code>处理数值占位符时，会自动过滤空白字符，包括空格、制表符、换行符等。所以，用户输入的数据之间，有一个或多个空格不影响<code>scanf()</code>解读数据。另外，用户使用回车键，将输入分成几行，也不影响解读。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">1</span>\n<span class=\"token operator\">-</span><span class=\"token number\">20</span>\n<span class=\"token number\">3.4</span>\n<span class=\"token operator\">-</span><span class=\"token number\">4.0e3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，用户分成四行输入，得到的结果与一行输入是完全一样的。每次按下回车键以后，<code>scanf()</code>就会开始解读，如果第一行匹配第一个占位符，那么下次按下回车键时，就会从第二个占位符开始解读。</p>\n<p><code>scanf()</code>处理用户输入的原理是，用户的输入先放入缓存，等到按下回车键后，按照占位符对缓存进行解读。解读用户输入时，会从上一次解读遗留的第一个字符开始，直到读完缓存，或者遇到第一个不符合条件的字符为止。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> y<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 用户输入 \"    -13.45e12# 0\"</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>scanf()</code>读取用户输入时，<code>%d</code>占位符会忽略起首的空格，从<code>-</code>处开始获取数据，读取到<code>-13</code>停下来，因为后面的<code>.</code>不属于整数的有效字符。这就是说，占位符<code>%d</code>会读到<code>-13</code>。</p>\n<p>第二次调用<code>scanf()</code>时，就会从上一次停止解读的地方，继续往下读取。这一次读取的首字符是<code>.</code>，由于对应的占位符是<code>%f</code>，会读取到<code>.45e12</code>，这是采用科学计数法的浮点数格式。后面的<code>#</code>不属于浮点数的有效字符，所以会停在这里。</p>\n<p>由于<code>scanf()</code>可以连续处理多个占位符，所以上面的例子也可以写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>scanf()</code>的返回值是一个整数，表示成功读取的变量个数。如果没有读取任何项，或者匹配失败，则返回<code>0</code>。如果读取到文件结尾，则返回常量 EOF。</p>\n<h3 id=\"占位符-1\"><a href=\"#占位符-1\" class=\"headerlink\" title=\"占位符\"></a>占位符</h3><p><code>scanf()</code>常用的占位符如下，与<code>printf()</code>的占位符基本一致。</p>\n<ul>\n<li><code>%c</code>：字符。</li>\n<li><code>%d</code>：整数。</li>\n<li><code>%f</code>：<code>float</code>类型浮点数。</li>\n<li><code>%lf</code>：<code>double</code>类型浮点数。</li>\n<li><code>%Lf</code>：<code>long double</code>类型浮点数。</li>\n<li><code>%s</code>：字符串。</li>\n<li><code>%[]</code>：在方括号中指定一组匹配的字符（比如<code>%[0-9]</code>），遇到不在集合之中的字符，匹配将会停止。</li>\n</ul>\n<p>上面所有占位符之中，除了<code>%c</code>以外，都会自动忽略起首的空白字符。<code>%c</code>不忽略空白字符，总是返回当前第一个字符，无论该字符是否为空格。如果要强制跳过字符前的空白字符，可以写成<code>scanf(&quot; %c&quot;, &amp;ch)</code>，即<code>%c</code>前加上一个空格，表示跳过零个或多个空白字符。</p>\n<p>下面要特别说一下占位符<code>%s</code>，它其实不能简单地等同于字符串。它的规则是，从当前第一个非空白字符开始读起，直到遇到空白字符（即空格、换行符、制表符等）为止。因为<code>%s</code>不会包含空白字符，所以无法用来读取多个单词，除非多个<code>%s</code>一起使用。这也意味着，<code>scanf()</code>不适合读取可能包含空格的字符串，比如书名或歌曲名。另外，<code>scanf()</code>遇到<code>%s</code>占位符，会在字符串变量末尾存储一个空字符<code>\\0</code>。</p>\n<p><code>scanf()</code>将字符串读入字符数组时，不会检测字符串是否超过了数组长度。所以，储存字符串时，很可能会超过数组的边界，导致预想不到的结果。为了防止这种情况，使用<code>%s</code>占位符时，应该指定读入字符串的最长长度，即写成<code>%[m]s</code>，其中的<code>[m]</code>是一个整数，表示读取字符串的最大长度，后面的字符将被丢弃。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%10s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>name</code>是一个长度为11的字符数组，<code>scanf()</code>的占位符<code>%10s</code>表示最多读取用户输入的10个字符，后面的字符将被丢弃，这样就不会有数组溢出的风险了。</p>\n<h3 id=\"赋值忽略符\"><a href=\"#赋值忽略符\" class=\"headerlink\" title=\"赋值忽略符\"></a>赋值忽略符</h3><p>有时，用户的输入可能不符合预定的格式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d-%d-%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>year<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>month<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，如果用户输入<code>2020-01-01</code>，就会正确解读出年、月、日。问题是用户可能输入其他格式，比如<code>2020/01/01</code>，这种情况下，<code>scanf()</code>解析数据就会失败。</p>\n<p>为了避免这种情况，<code>scanf()</code>提供了一个赋值忽略符（assignment suppression character）<code>*</code>。只要把<code>*</code>加在任何占位符的百分号后面，该占位符就不会返回值，解析后将被丢弃。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%*c%d%*c%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>year<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>month<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>%*c</code>就是在占位符的百分号后面，加入了赋值忽略符<code>*</code>，表示这个占位符没有对应的变量，解读后不必返回。</p>\n<h2 id=\"sscanf\"><a href=\"#sscanf\" class=\"headerlink\" title=\"sscanf()\"></a>sscanf()</h2><p><code>sscanf()</code>函数与<code>scanf()</code>很类似，不同之处是<code>sscanf()</code>从字符串里面，而不是从用户输入获取数据。它的原型定义在头文件<code>stdio.h</code>里面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>sscanf()</code>的第一个参数是一个字符串指针，用来从其中获取数据。其他参数都与<code>scanf()</code>相同。</p>\n<p><code>sscanf()</code>主要用来处理其他输入函数读入的字符串，从其中提取数据。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>fgets()</code>先从标准输入获取了一行数据（<code>fgets()</code>的介绍详见下一章），存入字符数组<code>str</code>。然后，<code>sscanf()</code>再从字符串<code>str</code>里面提取两个整数，放入变量<code>i</code>和<code>j</code>。</p>\n<p><code>sscanf()</code>的一个好处是，它的数据来源不是流数据，所以可以反复使用，不像<code>scanf()</code>的数据来源是流数据，只能读取一次。</p>\n<p><code>sscanf()</code>的返回值是成功赋值的变量的数量，如果提取失败，返回常量 EOF。</p>\n<h2 id=\"getchar-，putchar\"><a href=\"#getchar-，putchar\" class=\"headerlink\" title=\"getchar()，putchar()\"></a>getchar()，putchar()</h2><p><strong>（1）getchar()</strong></p>\n<p><code>getchar()</code>函数返回用户从键盘输入的一个字符，使用时不带有任何参数。程序运行到这个命令就会暂停，等待用户从键盘输入，等同于使用<code>scanf()</code>方法读取一个字符。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\nch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>getchar()</code>不会忽略起首的空白字符，总是返回当前读取的第一个字符，无论是否为空格。如果读取失败，返回常量 EOF，由于 EOF 通常是<code>-1</code>，所以返回值的类型要设为 int，而不是 char。</p>\n<p>由于<code>getchar()</code>返回读取的字符，所以可以用在循环条件之中。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，只有读到的字符等于换行符（<code>\\n</code>），才会退出循环，常用来跳过某行。<code>while</code>循环的循环体没有任何语句，表示对该行不执行任何操作。</p>\n<p>下面的例子是计算某一行的字符长度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n  len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>getchar()</code>每读取一个字符，长度变量<code>len</code>就会加1，直到读取到换行符为止，这时<code>len</code>就是该行的字符长度。</p>\n<p>下面的例子是跳过空格字符。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，结束循环后，变量<code>ch</code>等于第一个非空格字符。</p>\n<p><strong>（2）putchar()</strong></p>\n<p><code>putchar()</code>函数将它的参数字符输出到屏幕，等同于使用<code>printf()</code>输出一个字符。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>操作成功时，<code>putchar()</code>返回输出的字符，否则返回常量 EOF。</p>\n<p><strong>（3）小结</strong></p>\n<p>由于<code>getchar()</code>和<code>putchar()</code>这两个函数的用法，要比<code>scanf()</code>和<code>printf()</code>更简单，而且通常是用宏来实现，所以要比<code>scanf()</code>和<code>printf()</code>更快。如果操作单个字符，建议优先使用这两个函数。</p>\n<h2 id=\"puts\"><a href=\"#puts\" class=\"headerlink\" title=\"puts()\"></a>puts()</h2><p><code>puts()</code>函数用于将参数字符串显示在屏幕（stdout）上，并且自动在字符串末尾添加换行符。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here are some messages:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>puts()</code>在屏幕上输出两行内容。</p>\n<p>写入成功时，<code>puts()</code>返回一个非负整数，否则返回常量 EOF。</p>\n<h2 id=\"gets\"><a href=\"#gets\" class=\"headerlink\" title=\"gets()\"></a>gets()</h2><p><code>gets()</code>函数以前用于从<code>stdin</code>读取整行输入，现在已经被废除了，仍然放在这里介绍一下。</p>\n<p>该函数读取用户的一行输入，不会跳过起始处的空白字符，直到遇到换行符为止。这个函数会丢弃换行符，将其余字符放入参数变量，并在这些字符的末尾添加一个空字符<code>\\0</code>，使其成为一个字符串。</p>\n<p>它经常与<code>puts()</code>配合使用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">81</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a string, please\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例使用<code>puts()</code>在屏幕上输出提示，然后使用<code>gets()</code>获取用户的输入。</p>\n<p>由于<code>gets()</code>获取的字符串，可能超过字符数组变量的最大长度，有安全风险，建议不要使用，改为使用<code>fgets()</code>。</p>\n<h1 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h1><p>本章介绍 C 语言如何操作文件。</p>\n<h2 id=\"文件指针\"><a href=\"#文件指针\" class=\"headerlink\" title=\"文件指针\"></a>文件指针</h2><p>C 语言提供了一个 FILE 数据结构，记录了操作一个文件所需要的信息。该结构定义在头文件<code>stdio.h</code>，所有文件操作函数都要通过这个数据结构，获取文件信息。</p>\n<p>开始操作一个文件之前，就要定义一个指向该文件的 FILE 指针，相当于获取一块内存区域，用来保存文件信息。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">FILE<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例定义了一个 FILE 指针<code>fp</code>。</p>\n<p>下面是一个读取文件的完整示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  FILE<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">;</span>\n  fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，新建文件指针<code>fp</code>以后，依次使用了下面三个文件操作函数，分成三个步骤。其他的文件操作，大致上也是这样的步骤。</p>\n<p>第一步，使用<code>fopen()</code>打开指定文件，返回一个 File 指针。如果出错，返回 NULL。</p>\n<p>它相当于将指定文件的信息与新建的文件指针<code>fp</code>相关联，在 FILE 结构内部记录了这样一些信息：文件内部的当前读写位置、读写报错的记录、文件结尾指示器、缓冲区开始位置的指针、文件标识符、一个计数器（统计拷贝进缓冲区的字节数）等等。后继的操作就可以使用这个指针（而不是文件名）来处理指定文件。</p>\n<p>同时，它还为文件建立一个缓存区。由于存在缓存区，也可以说<code>fopen()</code>函数“打开一个了流”，后继的读写文件都是流模式。</p>\n<p>第二步，使用读写函数，从文件读取数据，或者向文件写入数据。上例使用了<code>fgetc()</code>函数，从已经打开的文件里面，读取一个字符。</p>\n<p><code>fgetc()</code>一调用，文件的数据块先拷贝到缓冲区。不同的计算机有不同的缓冲区大小，一般是512字节或是它的倍数，如4096或16384。随着计算机硬盘容量越来越大，缓冲区也越来越大。</p>\n<p><code>fgetc()</code>从缓冲区读取数据，同时将文件指针内部的读写位置指示器，指向所读取字符的下一个字符。所有的文件读取函数都使用相同的缓冲区，后面再调用任何一个读取函数，都将从指示器指向的位置，即上一次读取函数停止的位置开始读取。</p>\n<p>当读取函数发现已读完缓冲区里面的所有字符时，会请求把下一个缓冲区大小的数据块，从文件拷贝到缓冲区中。读取函数就以这种方式，读完文件的所有内容，直到文件结尾。不过，上例是只从缓存区读取一个字符。当函数在缓冲区里面，读完文件的最后一个字符时，就把 FILE 结构里面的文件结尾指示器设置为真。于是，下一次再调用读取函数时，会返回常量 EOF。EOF 是一个整数值，代表文件结尾，一般是<code>-1</code>。</p>\n<p>第三步，<code>fclose()</code>关闭文件，同时清空缓存区。</p>\n<p>上面是文件读取的过程，文件写入也是类似的方式，先把数据写入缓冲区，当缓冲区填满后，缓存区的数据将被转移到文件中。</p>\n<h2 id=\"fopen\"><a href=\"#fopen\" class=\"headerlink\" title=\"fopen()\"></a>fopen()</h2><p><code>fopen()</code>函数用来打开文件。所有文件操作的第一步，都是使用<code>fopen()</code>打开指定文件。这个函数的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">FILE<span class=\"token operator\">*</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数。第一个参数是文件名(可以包含路径)，第二个参数是模式字符串，指定对文件执行的操作，比如下面的例子中，<code>r</code>表示以读取模式打开文件。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in.dat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>成功打开文件以后，<code>fopen()</code>返回一个 FILE 指针，其他函数可以用这个指针操作文件。如果无法打开文件（比如文件不存在或没有权限），会返回空指针 NULL。所以，执行<code>fopen()</code>以后，最好判断一下，有没有打开成功。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't open file!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，如果<code>fopen()</code>返回一个空指针，程序就会报错。</p>\n<p><code>fopen()</code>的模式字符串有以下几种。</p>\n<ul>\n<li><code>r</code>：读模式，只用来读取数据。如果文件不存在，返回 NULL 指针。</li>\n<li><code>w</code>：写模式，只用来写入数据。如果文件存在，文件长度会被截为0，然后再写入；如果文件不存在，则创建该文件。</li>\n<li><code>a</code>：写模式，只用来在文件尾部追加数据。如果文件不存在，则创建该文件。</li>\n<li><code>r+</code>：读写模式。如果文件存在，指针指向文件开始处，可以在文件头部添加数据。如果文件不存在，返回 NULL 指针。</li>\n<li><code>w+</code>：读写模式。如果文件存在，文件长度会被截为0，然后再写入数据。这种模式实际上读不到数据，反而会擦掉数据。如果文件不存在，则创建该文件。</li>\n<li><code>a+</code>：读写模式。如果文件存在，指针指向文件结尾，可以在现有文件末尾添加内容。如果文件不存在，则创建该文件。</li>\n</ul>\n<p>上一小节说过，<code>fopen()</code>函数会为打开的文件创建一个缓冲区。读模式下，创建的是读缓存区；写模式下，创建的是写缓存区；读写模式下，会同时创建两个缓冲区。C 语言通过缓存区，以流的形式，向文件读写数据。</p>\n<p>数据在文件里面，都是以二进制形式存储。但是，读取的时候，有不同的解读方法：以原本的二进制形式解读，叫做“二进制流”；将二进制数据转成文本，以文本形式解读，叫做“文本流”。写入操作也是如此，分成以二进制写入和以文本写入，后者会多一个文本转二进制的步骤。</p>\n<p><code>fopen()</code>的模式字符串，默认是以文本流读写。如果添加<code>b</code>后缀（表示 binary），就会以“二进制流”进行读写。比如，<code>rb</code>是读取二进制数据模式，<code>wb</code>是写入二进制数据模式。</p>\n<p>模式字符串还有一个<code>x</code>后缀，表示独占模式（exclusive）。如果文件已经存在，则打开文件失败；如果文件不存在，则新建文件，打开后不再允许其他程序或线程访问当前文件。比如，<code>wx</code>表示以独占模式写入文件，如果文件已经存在，就会打开失败。</p>\n<h2 id=\"标准流\"><a href=\"#标准流\" class=\"headerlink\" title=\"标准流\"></a>标准流</h2><p>Linux 系统默认提供三个已经打开的文件，它们的文件指针如下。</p>\n<ul>\n<li><code>stdin</code>（标准输入）：默认来源为键盘，文件指针编号为<code>0</code>。</li>\n<li><code>stdout</code>（标准输出）：默认目的地为显示器，文件指针编号为<code>1</code>。</li>\n<li><code>stderr</code>（标准错误）：默认目的地为显示器，文件指针编号为<code>2</code>。</li>\n</ul>\n<p>Linux 系统的文件，不一定是数据文件，也可以是设备文件，即文件代表一个可以读或写的设备。文件指针<code>stdin</code>默认是把键盘看作一个文件，读取这个文件，就能获取用户的键盘输入。同理，<code>stdout</code>和<code>stderr</code>默认是把显示器看作一个文件，将程序的运行结果写入这个文件，用户就能看到运行结果了。它们的区别是，<code>stdout</code>写入的是程序的正常运行结果，<code>stderr</code>写入的是程序的报错信息。</p>\n<p>这三个输入和输出渠道，是 Linux 默认提供的，所以分别称为标准输入（stdin）、标准输出（stdout）和标准错误（stderr）。因为它们的实现是一样的，都是文件流，所以合称为“标准流”。</p>\n<p>Linux 允许改变这三个文件指针（文件流）指向的文件，这称为重定向（redirection）。</p>\n<p>如果标准输入不绑定键盘，而是绑定其他文件，可以在文件名前面加上小于号<code>&lt;</code>，跟在程序名后面。这叫做“输入重定向”（input redirection）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ demo <span class=\"token operator\">&lt;</span> in.dat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>demo</code>程序代码里面的<code>stdin</code>，将指向文件<code>in.dat</code>，即从<code>in.dat</code>获取数据。</p>\n<p>如果标准输出绑定其他文件，而不是显示器，可以在文件名前加上大于号<code>&gt;</code>，跟在程序名后面。这叫做“输出重定向”（output redirection）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ demo <span class=\"token operator\">></span> out.dat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>demo</code>程序代码里面的<code>stdout</code>，将指向文件<code>out.dat</code>，即向<code>out.dat</code>写入数据。</p>\n<p>输出重定向<code>&gt;</code>会先擦去<code>out.dat</code>的所有原有的内容，然后再写入。如果希望写入的信息追加在<code>out.dat</code>的结尾，可以使用<code>&gt;&gt;</code>符号。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ demo <span class=\"token operator\">>></span> out.dat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>demo</code>程序代码里面的<code>stdout</code>，将向文件<code>out.dat</code>写入数据。与<code>&gt;</code>不同的是，写入的开始位置是<code>out.dat</code>的文件结尾。</p>\n<p>标准错误的重定向符号是<code>2&gt;</code>。其中的<code>2</code>代表文件指针的编号，即<code>2&gt;</code>表示将2号文件指针的写入，重定向到<code>err.txt</code>。2号文件指针就是标准错误<code>stderr</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ demo <span class=\"token operator\">></span> out.dat <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> err.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>demo</code>程序代码里面的<code>stderr</code>，会向文件<code>err.txt</code>写入报错信息。而<code>stdout</code>向文件<code>out.dat</code>写入。</p>\n<p>输入重定向和输出重定向，也可以结合在一条命令里面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ demo <span class=\"token operator\">&lt;</span> in.dat <span class=\"token operator\">></span> out.dat\n\n// or\n$ demo <span class=\"token operator\">></span> out.dat <span class=\"token operator\">&lt;</span> in.dat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重定向还有另一种情况，就是将一个程序的标准输出<code>stdout</code>，指向另一个程序的标准输入<code>stdin</code>，这时要使用<code>|</code>符号。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ random <span class=\"token operator\">|</span> <span class=\"token function\">sum</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>random</code>程序代码里面的<code>stdout</code>的写入，会从<code>sum</code>程序代码里面的<code>stdin</code>被读取。</p>\n<h2 id=\"fclose\"><a href=\"#fclose\" class=\"headerlink\" title=\"fclose()\"></a>fclose()</h2><p><code>fclose()</code>用来关闭已经使用<code>fopen()</code>打开的文件。它的原型定义在<code>stdin.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受一个文件指针<code>fp</code>作为参数。如果成功关闭文件，<code>fclose()</code>函数返回整数<code>0</code>；如果操作失败（比如磁盘已满，或者出现 I/O 错误），则返回一个特殊值 EOF（详见下一小节）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something wrong.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>不再使用的文件，都应该使用<code>fclose()</code>关闭，否则无法释放资源。一般来说，系统对同时打开的文件数量有限制，及时关闭文件可以避免超过这个限制。</p>\n<h2 id=\"EOF\"><a href=\"#EOF\" class=\"headerlink\" title=\"EOF\"></a>EOF</h2><p>C 语言的文件操作函数的设计是，如果遇到文件结尾，就返回一个特殊值。程序接收到这个特殊值，就知道已经到达文件结尾了。</p>\n<p>头文件<code>stdio.h</code>为这个特殊值定义了一个宏<code>EOF</code>（end of file 的缩写），它的值一般是<code>-1</code>。这是因为从文件读取的二进制值，不管作为无符号数字解释，还是作为 ASCII 码解释，都不可能是负值，所以可以很安全地返回<code>-1</code>，不会跟文件本身的数据相冲突。</p>\n<p>需要注意的是，不像字符串结尾真的存储了<code>\\0</code>这个值，<code>EOF</code>并不存储在文件结尾，文件中并不存在这个值，完全是文件操作函数发现到达了文件结尾，而返回这个值。</p>\n<h2 id=\"freopen\"><a href=\"#freopen\" class=\"headerlink\" title=\"freopen()\"></a>freopen()</h2><p><code>freopen()</code>用于新打开一个文件，直接关联到某个已经打开的文件指针。这样可以复用文件指针。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">FILE<span class=\"token operator\">*</span> <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> mode<span class=\"token punctuation\">,</span> FILE stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它跟<code>fopen()</code>相比，就是多出了第三个参数，表示要复用的文件指针。其他两个参数都一样，分别是文件名和打开模式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例将文件<code>output.txt</code>关联到<code>stdout</code>，此后向<code>stdout</code>写入的内容，都会写入<code>output.txt</code>。由于<code>printf()</code>默认就是输出到<code>stdout</code>，所以运行上面的代码以后，文件<code>output.txt</code>会被写入<code>hello</code>。</p>\n<p><code>freopen()</code>的返回值是它的第三个参数（文件指针）。如果打开失败（比如文件不存在），会返回空指针 NULL。</p>\n<p><code>freopen()</code>会自动关闭原先已经打开的文件，如果文件指针并没有指向已经打开的文件，则<code>freopen()</code>等同于<code>fopen()</code>。</p>\n<p>下面是<code>freopen()</code>关联<code>scanf()</code>的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"someints.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中，一共调用了两次<code>scanf()</code>，第一次调用是从键盘读取，然后使用<code>freopen()</code>将<code>stdin</code>指针关联到某个文件，第二次调用就会从该文件读取。</p>\n<p>某些系统允许使用<code>freopen()</code>，改变文件的打开模式。这时，<code>freopen()</code>的第一个参数应该是 NULL。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例将<code>stdout</code>的打开模式从<code>w</code>改成了<code>wb</code>。</p>\n<h2 id=\"fgetc-，getc\"><a href=\"#fgetc-，getc\" class=\"headerlink\" title=\"fgetc()，getc()\"></a>fgetc()，getc()</h2><p><code>fgetc()</code>和<code>getc()</code>用于从文件读取一个字符。它们的用法跟<code>getchar()</code>类似，区别是<code>getchar()</code>只用来从<code>stdin</code>读取，而这两个函数是从任意指定的文件读取。它们的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>fgetc()</code>与<code>getc()</code>的用法是一样的，都只有文件指针一个参数。两者的区别是，<code>getc()</code>一般用宏来实现，而<code>fgetc()</code>是函数实现，所以前者的性能可能更好一些。注意，虽然这两个函数返回的是一个字符，但是它们的返回值类型却不是<code>char</code>，而是<code>int</code>，这是因为读取失败的情况下，它们会返回 EOF，这个值一般是<code>-1</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\n  fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>getc()</code>依次读取文件的每个字符，将其放入变量<code>c</code>，直到读到文件结尾，返回 EOF，循环终止。变量<code>c</code>的类型是<code>int</code>，而不是<code>char</code>，因为有可能等于负值，所以设为<code>int</code>更好一些。</p>\n<h2 id=\"fputc-，putc\"><a href=\"#fputc-，putc\" class=\"headerlink\" title=\"fputc()，putc()\"></a>fputc()，putc()</h2><p><code>fputc()</code>和<code>putc()</code>用于向文件写入一个字符。它们的用法跟<code>putchar()</code>类似，区别是<code>putchar()</code>是向<code>stdout</code>写入，而这两个函数是向文件写入。它们的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">putc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>fputc()</code>与<code>putc()</code>的用法是一样，都接受两个参数，第一个参数是待写入的字符，第二个参数是文件指针。它们的区别是，<code>putc()</code>通常是使用宏来实现，而<code>fputc()</code>只作为函数来实现，所以理论上，<code>putc()</code>的性能会好一点。</p>\n<p>写入成功时，它们返回写入的字符；写入失败时，返回 EOF。</p>\n<h2 id=\"fprintf\"><a href=\"#fprintf\" class=\"headerlink\" title=\"fprintf()\"></a>fprintf()</h2><p><code>fprintf()</code>用于向文件写入格式化字符串，用法与<code>printf()</code>类似。区别是<code>printf()</code>总是写入<code>stdout</code>，而<code>fprintf()</code>则是写入指定的文件，它的第一个参数必须是一个文件指针。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>fprintf()</code>可以替代<code>printf()</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, world!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面例子中，指定<code>fprintf()</code>写入<code>stdout</code>，结果就等同于调用<code>printf()</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sum: %d\\n\"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例是向文件指针<code>fp</code>写入指定格式的字符串。</p>\n<p>下面是向<code>stderr</code>输出错误信息的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Something number.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"fscanf\"><a href=\"#fscanf\" class=\"headerlink\" title=\"fscanf()\"></a>fscanf()</h2><p><code>fscanf()</code>用于按照给定的模式，从文件中读取内容，用法跟<code>scanf()</code>类似。区别是<code>scanf()</code>总是从<code>stdin</code>读取数据，而<code>fscanf()</code>是从文件读入数据，它的原型定义在头文件<code>stdio.h</code>，第一个参数必须是文件指针。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>fscanf()</code>从文件<code>fp</code>里面，读取两个整数，放入变量<code>i</code>和<code>j</code>。</p>\n<p>使用<code>fscanf()</code>的前提是知道文件的结构，它的占位符解析规则与<code>scanf()</code>完全一致。由于<code>fscanf()</code>可以连续读取，直到读到文件尾，或者发生错误（读取失败、匹配失败），才会停止读取，所以<code>fscanf()</code>通常放在循环里面。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>fscanf()</code>依次读取文件的每个词，将它们一行打印一个，直到文件结束。</p>\n<p><code>fscanf()</code>的返回值是赋值成功的变量数量，如果赋值失败会返回 EOF。</p>\n<h2 id=\"fgets\"><a href=\"#fgets\" class=\"headerlink\" title=\"fgets()\"></a>fgets()</h2><p><code>fgets()</code>用于从文件读取指定长度的字符串，它名字的第一个字符是<code>f</code>，就代表<code>file</code>。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> STRLEN<span class=\"token punctuation\">,</span> File<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的第一个参数<code>str</code>是一个字符串指针，用于存放读取的内容。第二个参数<code>STRLEN</code>指定读取的长度，第三个参数是一个 FILE 指针，指向要读取的文件。</p>\n<p><code>fgets()</code>读取 STRLEN - 1 个字符之后，或者遇到换行符与文件结尾，就会停止读取，然后在已经读取的内容末尾添加一个空字符<code>\\0</code>，使之成为一个字符串。注意，<code>fgets()</code>会将换行符（<code>\\n</code>）存储进字符串。</p>\n<p>如果<code>fgets</code>的第三个参数是<code>stdin</code>，就可以读取标准输入，等同于<code>scanf()</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>读取成功时，<code>fgets()</code>的返回值是它的第一个参数，即指向字符串的指针，否则返回空指针 NULL。</p>\n<p><code>fgets()</code>可以用来读取文件的每一行，下面是读取文件所有行的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  FILE<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 数组必须足够大，足以放下一行</span>\n  <span class=\"token keyword\">int</span> linecount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> s<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d: %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>linecount<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，每读取一行，都会输出行号和该行的内容。</p>\n<p>下面的例子是循环读取用户的输入。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter strings (q to quit):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'q'</span> <span class=\"token operator\">&amp;&amp;</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的示例中，如果用户输入的字符串大于9个字符，<code>fgets()</code>会多次读取。直到遇到<code>q</code> + 回车键，才会退出循环。</p>\n<h2 id=\"fputs\"><a href=\"#fputs\" class=\"headerlink\" title=\"fputs()\"></a>fputs()</h2><p><code>fputs()</code>函数用于向文件写入字符串，和<code>puts()</code>函数只有一点不同，那就是它不会在字符串末尾添加换行符。这是因为<code>fgets()</code>保留了换行符，所以<code>fputs()</code>就不添加了。<code>fputs()</code>函数通常与<code>fgets()</code>配对使用。</p>\n<p>它的原型定义在<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数，第一个参数是字符串指针，第二个参数是要写入的文件指针。如果第二个参数为<code>stdout</code>（标准输出），就是将内容输出到计算机屏幕，等同于<code>printf()</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a string, please.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is your string:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，先用<code>fgets()</code>从<code>stdin</code>读取用户输入，然后用<code>fputs()</code>输出到<code>stdout</code>。</p>\n<p>写入成功时，<code>fputs()</code>返回一个非负整数，否则返回 EOF。</p>\n<h2 id=\"fwrite\"><a href=\"#fwrite\" class=\"headerlink\" title=\"fwrite()\"></a>fwrite()</h2><p><code>fwrite()</code>用来一次性写入较大的数据块，主要用途是将数组数据一次性写入文件，适合写入二进制数据。它的原型定义在<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">size_t <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">,</span>\n  size_t size<span class=\"token punctuation\">,</span>\n  size_t nmemb<span class=\"token punctuation\">,</span>\n  FILE<span class=\"token operator\">*</span> fp\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它接受四个参数。</p>\n<ul>\n<li><code>ptr</code>：数组指针。</li>\n<li><code>size</code>：每个数组成员的大小，单位字节。</li>\n<li><code>nmemb</code>：数组成员的数量。</li>\n<li><code>fp</code>：要写入的文件指针。</li>\n</ul>\n<p>注意，<code>fwrite()</code>原型的第一个参数类型是<code>void*</code>，这是一个无类型指针，编译器会自动将参数指针转成<code>void*</code>类型。正是由于<code>fwrite()</code>不知道数组成员的类型，所以才需要知道每个成员的大小（第二个参数）和成员数量（第三个参数）。</p>\n<p><code>fwrite()</code>函数的返回值是成功写入的数组成员的数量（注意不是字节数）。正常情况下，该返回值就是第三个参数<code>nmemb</code>，但如果出现写入错误，只写入了一部分成员，返回值会比<code>nmemb</code>小。</p>\n<p>要将整个数组<code>arr</code>写入文件，可以采用下面的写法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>\n  arr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  fp\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>sizeof(a[0])</code>是每个数组成员占用的字节，<code>sizeof(a) / sizeof(a[0])</code>是整个数组的成员数量。</p>\n<p>下面的例子是将一个大小为256字节的字符串写入文件。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，数组<code>buffer</code>每个成员是1个字节，一共有256个成员。由于<code>fwrite()</code>是连续内存复制，所以写成<code>fwrite(buffer, 256, 1, fp)</code>也能达到目的。</p>\n<p><code>fwrite()</code>没有规定一定要写入整个数组，只写入数组的一部分也是可以的。</p>\n<p>任何类型的数据都可以看成是1字节数据组成的数组，或者是一个成员的数组，所以<code>fwrite()</code>实际上可以写入任何类型的数据，而不仅仅是数组。比如，<code>fwrite()</code>可以将一个 Struct 结构写入文件保存。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>s</code>是一个 Struct 结构指针，可以看成是一个成员的数组。注意，如果<code>s</code>的属性包含指针，存储时需要小心，因为保存指针可能没意义，还原出来的时候，并不能保证指针指向的数据还存在。</p>\n<p><code>fwrite()</code>以及后面要介绍的<code>fread()</code>，比较适合读写二进制数据，因为它们不会对写入的数据进行解读。二进制数据可能包含空字符<code>\\0</code>，这是 C 语言的字符串结尾标记，所以读写二进制文件，不适合使用文本读写函数（比如<code>fprintf()</code>等）。</p>\n<p>下面是一个写入二进制文件的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  FILE<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.bin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，写入二进制文件时，<code>fopen()</code>要使用<code>wb</code>模式打开，表示二进制写入。<code>fwrite()</code>可以把数据解释成单字节数组，因此它的第二个参数是<code>sizeof(char)</code>，第三个参数是数组的总字节数<code>sizeof(bytes)</code>。</p>\n<p>上面例子写入的文件<code>output.bin</code>，使用十六进制编辑器打开，会是下面的内容。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">05</span> <span class=\"token number\">25</span> <span class=\"token number\">00</span> <span class=\"token number\">58</span> ff <span class=\"token number\">0</span>c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>fwrite()</code>还可以连续向一个文件写入数据。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">clientData</span> myClient <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo bar'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myClient<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">clientData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cfPtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>fwrite()</code>连续将100条数据写入文件。</p>\n<h2 id=\"fread\"><a href=\"#fread\" class=\"headerlink\" title=\"fread()\"></a>fread()</h2><p><code>fread()</code>函数用于一次性从文件读取较大的数据块，主要用途是将文件内容读入一个数组，适合读取二进制数据。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">size_t <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">,</span>\n  size_t size<span class=\"token punctuation\">,</span>\n  size_t nmemb<span class=\"token punctuation\">,</span>\n  FILE<span class=\"token operator\">*</span> fp\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它接受四个参数，与<code>fwrite()</code>完全相同。</p>\n<ul>\n<li><code>ptr</code>：数组地址。</li>\n<li><code>size</code>：数组的成员数量。</li>\n<li><code>nmemb</code>：每个数组成员的大小。</li>\n<li><code>fp</code>：文件指针。</li>\n</ul>\n<p>要将文件内容读入数组<code>arr</code>，可以采用下面的写法。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>\n  arr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  fp\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，数组长度（第二个参数）和每个成员的大小（第三个参数）的乘积，就是数组占用的内存空间的大小。<code>fread()</code>会从文件（第四个参数）里面读取相同大小的内容，然后将<code>ptr</code>（第一个参数）指向这些内容的内存地址。</p>\n<p>下面的例子是将文件内容读入一个10个成员的双精度浮点数数组。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> earnings<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>earnings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，每个数组成员的大小是<code>sizeof(double)</code>，一个有10个成员，就会从文件<code>fp</code>读取<code>sizeof(double) * 10</code>大小的内容。</p>\n<p><code>fread()</code>函数的返回值是成功读取的数组成员的数量。正常情况下，该返回值就是第三个参数<code>nmemb</code>，但如果出现读取错误或读到文件结尾，该返回值就会比<code>nmemb</code>小。所以，检查<code>fread()</code>的返回值是非常重要的。</p>\n<p><code>fread()</code>和<code>fwrite()</code>可以配合使用。在程序终止之前，使用<code>fwrite()</code>将数据保存进文件，下次运行时再用<code>fread()</code>将数据还原进入内存。</p>\n<p>下面是读取上一节生成的二进制文件<code>output.bin</code>的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  FILE<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\n  fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.bin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行后，得到如下结果。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">5</span>\n<span class=\"token number\">37</span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">88</span>\n<span class=\"token number\">255</span>\n<span class=\"token number\">12</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"feof\"><a href=\"#feof\" class=\"headerlink\" title=\"feof()\"></a>feof()</h2><p><code>feof()</code>函数判断文件的内部指针是否指向文件结尾。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>feof()</code>接受一个文件指针作为参数。如果已经到达文件结尾，会返回一个非零值（表示 true），否则返回<code>0</code>（表示 false）。</p>\n<p>诸如<code>fgetc()</code>这样的文件读取函数，如果返回 EOF，有两种可能，一种可能是已读取到文件结尾，另一种可能是出现读取错误。<code>feof()</code>可以用来判断到底是那一种情况。</p>\n<p>下面是通过<code>feof()</code>判断是否到达文件结尾，从而循环读取整个文件的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nFILE<span class=\"token operator\">*</span> cfPtr <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clients.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>cfPtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>cfPtr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %s\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>cfPtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例通过循环判断<code>feof()</code>是否读到文件结尾，从而实现读出整个文件内容。</p>\n<p><code>feof()</code>为真时，可以通过<code>fseek()</code>、<code>rewind()</code>、<code>fsetpos()</code>函数改变文件内部读写位置的指示器，从而清除这个函数的状态。</p>\n<h2 id=\"fseek\"><a href=\"#fseek\" class=\"headerlink\" title=\"fseek()\"></a>fseek()</h2><p>每个文件指针都有一个内部指示器（内部指针），记录当前打开的文件的读写位置（file position），即下一次读写从哪里开始。文件操作函数（比如<code>getc()</code>、<code>fgets()</code>、<code>fscanf()</code>和<code>fread()</code>等）都从这个指示器指定的位置开始按顺序读写文件。</p>\n<p>如果希望改变这个指示器，将它移到文件的指定位置，可以使用<code>fseek()</code>函数。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> whence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>fseek()</code>接受3个参数。</p>\n<ul>\n<li><code>stream</code>：文件指针。</li>\n<li><code>offset</code>：距离基准（第三个参数）的字节数。类型为 long int，可以为正值（向文件末尾移动）、负值（向文件开始处移动）或 0（保持不动）。</li>\n<li><code>whence</code>：位置基准，用来确定计算起点。它的值是以下三个宏（定义在<code>stdio.h</code>）：<code>SEEK_SET</code>（文件开始处）、<code>SEEK_CUR </code>（内部指针的当前位置）、<code>SEEK_END</code>（文件末尾）</li>\n</ul>\n<p>请看下面的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 定位到文件开始处</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定位到文件末尾</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 从当前位置前移2个字节</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">2L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_CUR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定位到文件第10个字节</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">10L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定位到文件倒数第10个字节</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">10L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>fseek()</code>的第二个参数为 long 类型，所以移动距离必须加上后缀<code>L</code>，将其转为 long 类型。</p>\n<p>下面的示例逆向输出文件的所有字节。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;=</span> size<span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>count<span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，<code>fseek()</code>最好只用来操作二进制文件，不要用来读取文本文件。因为文本文件的字符有不同的编码，某个位置的准确字节位置不容易确定。</p>\n<p>正常情况下，<code>fseek()</code>的返回值为0。如果发生错误（如移动的距离超出文件的范围），返回值为非零值（比如<code>-1</code>)。</p>\n<h2 id=\"ftell\"><a href=\"#ftell\" class=\"headerlink\" title=\"ftell()\"></a>ftell()</h2><p><code>ftell()</code>函数返回文件内部指示器的当前位置。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受一个文件指针作为参数。返回值是一个 long 类型的整数，表示内部指示器的当前位置，即文件开始处到当前位置的字节数，<code>0</code>表示文件开始处。如果发生错误，<code>ftell()</code>返回<code>-1L</code>。</p>\n<p><code>ftell()</code>可以跟<code>fseek()</code>配合使用，先记录内部指针的位置，一系列操作过后，再用<code>fseek()</code>返回原来的位置。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> file_pos <span class=\"token operator\">=</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 一系列文件操作之后</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> file_pos<span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面的例子先将指示器定位到文件结尾，然后得到文件开始处到结尾的字节数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsize <span class=\"token operator\">=</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"rewind\"><a href=\"#rewind\" class=\"headerlink\" title=\"rewind()\"></a>rewind()</h2><p><code>rewind()</code>函数可以让文件的内部指示器回到文件开始处。它的原型定义在<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>file<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受一个文件指针作为参数。</p>\n<p><code>rewind(fp)</code>基本等价于<code>fseek(fp, 0l, seek_set)</code>，唯一的区别是<code>rewind()</code>没有返回值，而且会清除当前文件的错误指示器。</p>\n<h2 id=\"fgetpos-，fsetpos\"><a href=\"#fgetpos-，fsetpos\" class=\"headerlink\" title=\"fgetpos()，fsetpos()\"></a>fgetpos()，fsetpos()</h2><p><code>fseek()</code>和<code>ftell()</code>有一个潜在的问题，那就是它们都把文件大小限制在 long int 类型能表示的范围内。这看起来相当大，但是在32位计算机上，long int 的长度为4个字节，能够表示的范围最大为 4GB。随着存储设备的容量迅猛增长，文件也越来越大，往往会超出这个范围。鉴于此，C 语言新增了两个处理大文件的新定位函数：<code>fgetpos()</code>和<code>fsetpos()</code>。</p>\n<p>它们的原型都定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fgetpos</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> fpos_t<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">fsetpos</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> fpos_t<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>fgetpos()</code>函数会将文件内部指示器的当前位置，存储在指针变量<code>pos</code>。该函数接受两个参数，第一个是文件指针，第二个存储指示器位置的变量。</p>\n<p><code>fsetpos()</code>函数会将文件内部指示器的位置，移动到指针变量<code>pos</code>指定的地址。注意，变量<code>pos</code>必须是通过调用<code>fgetpos()</code>方法获得的。<code>fsetpos()</code>的两个参数与<code>fgetpos()</code>必须是一样的。</p>\n<p>记录文件内部指示器位置的指针变量<code>pos</code>，类型为<code>fpos_t*</code>（file position type 的缩写，意为文件定位类型）。它不一定是整数，也可能是一个 Struct 结构。</p>\n<p>下面是用法示例。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">fpos_t file_pos<span class=\"token punctuation\">;</span>\n<span class=\"token function\">fgetpos</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>file_pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 一系列文件操作之后</span>\n<span class=\"token function\">fsetpos</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>file_pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，先用<code>fgetpos()</code>获取内部指针的位置，后面再用<code>fsetpos()</code>恢复指针的位置。</p>\n<p>执行成功时，<code>fgetpos()</code>和<code>fsetpos()</code>都会返回<code>0</code>，否则返回非零值。</p>\n<h2 id=\"ferror-，clearerr\"><a href=\"#ferror-，clearerr\" class=\"headerlink\" title=\"ferror()，clearerr()\"></a>ferror()，clearerr()</h2><p>所有的文件操作函数如果执行失败，都会在文件指针里面记录错误状态。后面的操作只要读取错误指示器，就知道前面的操作出错了。</p>\n<p><code>ferror()</code>函数用来返回错误指示器的状态。可以通过这个函数，判断前面的文件操作是否成功。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">ferror</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受一个文件指针作为参数。如果前面的操作出现错误，<code>ferror()</code>就会返回一个非零整数（表示 true），否则返回<code>0</code>。</p>\n<p><code>clearerr()</code>函数用来重置出错指示器。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">clearerr</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受一个文件指针作为参数，没有返回值。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">FILE<span class=\"token operator\">*</span> fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ferror</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取文件：file.txt 时发生错误\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">clearerr</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>fgetc()</code>尝试读取一个以”写模式“打开的文件，读取失败就会返回 EOF。这时调用<code>ferror()</code>就可以知道上一步操作出错了。处理完以后，再用<code>clearerr()</code>清除出错状态。</p>\n<p>文件操作函数如果正常执行，<code>ferror()</code>和<code>feof()</code>都会返回零。如果执行不正常，就要判断到底是哪里出了问题。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ferror</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"io error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end of file\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">clearerr</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，当<code>fscanf()</code>函数报错时，通过检查<code>ferror()</code>和<code>feof()</code>，确定到底发生什么问题。这两个指示器改变状态后，会保持不变，所以要用<code>clearerr()</code>清除它们，<code>clearerr()</code>可以同时清除两个指示器。</p>\n<h2 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove()\"></a>remove()</h2><p><code>remove()</code>函数用于删除指定文件。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受文件名作为参数。如果删除成功，<code>remove()</code>返回<code>0</code>，否则返回非零值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例删除了<code>foo.txt</code>文件。</p>\n<p>注意，删除文件必须是在文件关闭的状态下。如果是用<code>fopen()</code>打开的文件，必须先用<code>fclose()</code>关闭后再删除。</p>\n<h2 id=\"rename\"><a href=\"#rename\" class=\"headerlink\" title=\"rename()\"></a>rename()</h2><p><code>rename()</code>函数用于文件改名，也用于移动文件。它的原型定义在头文件<code>stdio.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> old_filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> new_filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数，第一个参数是现在的文件名，第二个参数是新的文件名。如果改名成功，<code>rename()</code>返回<code>0</code>，否则返回非零值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例将<code>foo.txt</code>改名为<code>bar.txt</code>。</p>\n<p>注意，改名后的文件不能与现有文件同名。另外，如果要改名的文件已经打开了，必须先关闭，然后再改名，对打开的文件进行改名会失败。</p>\n<p>下面是移动文件的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tmp/evidence.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/home/beej/nothing.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"变量说明符\"><a href=\"#变量说明符\" class=\"headerlink\" title=\"变量说明符\"></a>变量说明符</h1><p>C 语言允许声明变量的时候，加上一些特定的说明符（specifier），为编译器提供变量行为的额外信息。它的主要作用是帮助编译器优化代码，有时会对程序行为产生影响。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p><code>const</code>说明符表示变量是只读的，不得被修改。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14159</span><span class=\"token punctuation\">;</span>\nPI <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例里面的<code>const</code>，表示变量<code>PI</code>的值不应改变。如果改变的话，编译器会报错。</p>\n<p>对于数组，<code>const</code>表示数组成员不能修改。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>const</code>使得数组<code>arr</code>的成员无法修改。</p>\n<p>对于指针变量，<code>const</code>有两种写法，含义是不一样的。如果<code>const</code>在<code>*</code>前面，表示指针指向的值不可修改。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// const 表示指向的值 *x 不能修改</span>\n<span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> x\n# 或者\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面示例中，对<code>x</code>指向的值进行修改导致报错。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果<code>const</code>在<code>*</code>后面，表示指针包含的地址不可修改。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// const 表示地址 x 不能修改</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面示例中，对<code>x</code>进行修改导致报错。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">;</span>\n\nx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这两者可以结合起来。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，指针变量<code>x</code>指向一个字符串。两个<code>const</code>意味着，<code>x</code>包含的内存地址以及<code>x</code>指向的字符串，都不能修改。</p>\n<p><code>const</code>的一个用途，就是防止函数体内修改函数参数。如果某个参数在函数体内不会被修改，可以在函数声明时，对该参数添加<code>const</code>说明符。这样的话，使用这个函数的人看到原型里面的<code>const</code>，就知道调用函数前后，参数数组保持不变。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，函数<code>find</code>的参数数组<code>arr</code>有<code>const</code>说明符，就说明该数组在函数内部将保持不变。</p>\n<p>有一种情况需要注意，如果一个指针变量指向<code>const</code>变量，那么该指针变量也不应该被修改。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span>j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>j</code>是一个指针变量，指向变量<code>i</code>，即<code>j</code>和<code>i</code>指向同一个地址。<code>j</code>本身没有<code>const</code>说明符，但是<code>i</code>有。这种情况下，<code>j</code>指向的值也不能被修改。</p>\n<h2 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h2><p><code>static</code>说明符对于全局变量和局部变量有不同的含义。</p>\n<p>（1）用于局部变量（位于块作用域内部）。</p>\n<p><code>static</code>用于函数内部声明的局部变量时，表示该变量的值会在函数每次执行后得到保留，下次执行时不会进行初始化，就类似于一个只用于函数内部的全局变量。由于不必每次执行函数时，都对该变量进行初始化，这样可以提高函数的执行速度，详见《函数》一章。</p>\n<p>（2）用于全局变量（位于块作用域外部）。</p>\n<p><code>static</code>用于函数外部声明的全局变量时，表示该变量只用于当前文件，其他源码文件不可以引用该变量，即该变量不会被链接（link）。</p>\n<p><code>static</code>修饰的变量，初始化时，值不能等于变量，必须是常量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>m</code>有<code>static</code>修饰，它的值如果等于变量<code>n</code>，就会报错，必须等于常量。</p>\n<p>只在当前文件里面使用的函数，也可以声明为<code>static</code>，表明该函数只在当前文件使用，其他文件可以定义同名函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"auto\"><a href=\"#auto\" class=\"headerlink\" title=\"auto\"></a>auto</h2><p><code>auto</code>说明符表示该变量的存储，由编译器自主分配内存空间，且只存在于定义时所在的作用域，退出作用域时会自动释放。</p>\n<p>由于只要不是<code>extern</code>的变量（外部变量），都是由编译器自主分配内存空间的，这属于默认行为，所以该说明符没有实际作用，一般都省略不写。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">auto</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h2><p><code>extern</code>说明符表示，该变量在其他文件里面声明，没有必要在当前文件里面为它分配空间。通常用来表示，该变量是多个文件共享的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，<code>a</code>是<code>extern</code>变量，表示该变量在其他文件里面定义和初始化，当前文件不必为它分配存储空间。</p>\n<p>但是，变量声明时，同时进行初始化，<code>extern</code>就会无效。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// extern 无效</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>extern</code>对变量初始化的声明是无效的。这是为了防止多个<code>extern</code>对同一个变量进行多次初始化。</p>\n<p>函数内部使用<code>extern</code>声明变量，就相当于该变量是静态存储，每次执行时都要从外部获取它的值。</p>\n<p>函数本身默认是<code>extern</code>，即该函数可以被外部文件共享，通常省略<code>extern</code>不写。如果只希望函数在当前文件可用，那就需要在函数前面加上<code>static</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"register\"><a href=\"#register\" class=\"headerlink\" title=\"register\"></a>register</h2><p><code>register</code>说明符向编译器表示，该变量是经常使用的，应该提供最快的读取速度，所以应该放进寄存器。但是，编译器可以忽略这个说明符，不一定按照这个指示行事。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>register</code>提示编译器，变量<code>a</code>会经常用到，要为它提供最快的读取速度。</p>\n<p><code>register</code>只对声明在代码块内部的变量有效。</p>\n<p>设为<code>register</code>的变量，不能获取它的地址。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译器报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>&amp;a</code>会报错，因为变量<code>a</code>可能放在寄存器里面，无法获取内存地址。</p>\n<p>如果数组设为<code>register</code>，也不能获取整个数组或任一个数组成员的地址。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 报错</span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>历史上，CPU 内部的缓存，称为寄存器（register）。与内存相比，寄存器的访问速度快得多，所以使用它们可以提高速度。但是它们不在内存之中，所以没有内存地址，这就是为什么不能获取指向它们的指针地址。现代编译器已经有巨大的进步，不管是否使用<code>register</code>关键字，都会尽可能使用寄存器，所以不保证一定会把这些变量放到寄存器。</p>\n<h2 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h2><p><code>volatile</code>说明符表示所声明的变量，可能会预想不到地发生变化（即其他程序可能会更改它的值），不受当前程序控制，因此编译器不要对这类变量进行优化，每次使用时都应该查询一下它的值。硬件设备的编程中，这个说明符很常用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> bar<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>volatile</code>的目的是阻止编译器对变量行为进行优化，请看下面的例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> foo <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 其他语句，假设没有改变 x 的值</span>\n<span class=\"token keyword\">int</span> bar <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，由于变量<code>foo</code>和<code>bar</code>都等于<code>x</code>，而且<code>x</code>的值也没有发生变化，所以编译器可能会把<code>x</code>放入缓存，直接从缓存读取值（而不是从 x 的原始内存位置读取），然后对<code>foo</code>和<code>bar</code>进行赋值。如果<code>x</code>被设定为<code>volatile</code>，编译器就不会把它放入缓存，每次都从原始位置去取<code>x</code>的值，因为在两次读取之间，其他程序可能会改变<code>x</code>。</p>\n<h2 id=\"restrict\"><a href=\"#restrict\" class=\"headerlink\" title=\"restrict\"></a>restrict</h2><p><code>restrict</code>说明符允许编译器优化某些代码。它只能用于指针，表明该指针是访问数据的唯一方式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> restrict pt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>restrict</code>表示变量<code>pt</code>是访问 malloc 所分配内存的唯一方式。</p>\n<p>下面例子的变量<code>foo</code>，就不能使用<code>restrict</code>修饰符。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> bar <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>foo</code>指向的内存，可以用<code>foo</code>访问，也可以用<code>bar</code>访问，因此就不能将<code>foo</code>设为 restrict。</p>\n<p>如果编译器知道某块内存只能用一个方式访问，可能可以更好地优化代码，因为不用担心其他地方会修改值。</p>\n<p><code>restrict</code>用于函数参数时，表示参数的内存地址之间没有重叠。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> restrict a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> restrict b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n  t <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，函数参数声明里的<code>restrict</code>表示，参数<code>a</code>和参数<code>b</code>的内存地址没有重叠。</p>\n<h1 id=\"多文件项目\"><a href=\"#多文件项目\" class=\"headerlink\" title=\"多文件项目\"></a>多文件项目</h1><h2 id=\"简介-9\"><a href=\"#简介-9\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>一个软件项目往往包含多个源码文件，编译时需要将这些文件一起编译，生成一个可执行文件。</p>\n<p>假定一个项目有两个源码文件<code>foo.c</code>和<code>bar.c</code>，其中<code>foo.c</code>是主文件，<code>bar.c</code>是库文件。所谓“主文件”，就是包含了<code>main()</code>函数的项目入口文件，里面会引用库文件定义的各种函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// File foo.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 5!</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，主文件<code>foo.c</code>调用了函数<code>add()</code>，这个函数是在库文件<code>bar.c</code>里面定义的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// File bar.c</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，将这两个文件一起编译。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ gcc -o foo foo.c bar.c\n\n<span class=\"token comment\"># 更省事的写法</span>\n$ gcc -o foo *.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令中，gcc 的<code>-o</code>参数指定生成的二进制可执行文件的文件名，本例是<code>foo</code>。</p>\n<p>这个命令运行后，编译器会发出警告，原因是在编译<code>foo.c</code>的过程中，编译器发现一个不认识的函数<code>add()</code>，<code>foo.c</code>里面没有这个函数的原型或者定义。因此，最好修改一下<code>foo.c</code>，在文件头部加入<code>add()</code>的原型。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// File foo.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 5!</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在再编译就没有警告了。</p>\n<p>你可能马上就会想到，如果有多个文件都使用这个函数<code>add()</code>，那么每个文件都需要加入函数原型。一旦需要修改函数<code>add()</code>（比如改变参数的数量），就会非常麻烦，需要每个文件逐一改动。所以，通常的做法是新建一个专门的头文件<code>bar.h</code>，放置所有在<code>bar.c</code>里面定义的函数的原型。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// File bar.h</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>然后使用<code>include</code>命令，在用到这个函数的源码文件里面加载这个头文件<code>bar.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// File foo.c</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"bar.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 5!</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，<code>#include &quot;bar.h&quot;</code>表示加入头文件<code>bar.h</code>。这个文件没有放在尖括号里面，表示它是用户提供的；它没有写路径，就表示与当前源码文件在同一个目录。</p>\n<p>然后，最好在<code>bar.c</code>里面也加载这个头文件，这样可以让编译器验证，函数原型与函数定义是否一致。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// File bar.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"bar.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在重新编译，就可以顺利得到二进制可执行文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ gcc -o foo foo.c bar.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"重复加载\"><a href=\"#重复加载\" class=\"headerlink\" title=\"重复加载\"></a>重复加载</h2><p>头文件里面还可以加载其他头文件，因此有可能产生重复加载。比如，<code>a.h</code>和<code>b.h</code>都加载了<code>c.h</code>，然后<code>foo.c</code>同时加载了<code>a.h</code>和<code>b.h</code>，这意味着<code>foo.c</code>会编译两次<code>c.h</code>。</p>\n<p>最好避免这种重复加载，虽然多次定义同一个函数原型并不会报错，但是有些语句重复使用会报错，比如多次重复定义同一个 Struct 数据结构。解决重复加载的常见方法是，在头文件里面设置一个专门的宏，加载时一旦发现这个宏存在，就不再继续加载当前文件了。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// File bar.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">BAR_H</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">BAR_H</span></span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，头文件<code>bar.h</code>使用<code>#ifndef</code>和<code>#endif</code>设置了一个条件判断。每当加载这个头文件时，就会执行这个判断，查看有没有设置过宏<code>BAR_H</code>。如果设置过了，表明这个头文件已经加载过了，就不再重复加载了，反之就先设置一下这个宏，然后加载函数原型。</p>\n<h2 id=\"extern-说明符-1\"><a href=\"#extern-说明符-1\" class=\"headerlink\" title=\"extern 说明符\"></a>extern 说明符</h2><p>当前文件还可以使用其他文件定义的变量，这时要使用<code>extern</code>说明符，在当前文件中声明，这个变量是其他文件定义的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> myVar<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>extern</code>说明符告诉编译器，变量<code>myvar</code>是其他脚本文件声明的，不需要在这里为它分配内存空间。</p>\n<p>由于不需要分配内存空间，所以<code>extern</code>声明数组时，不需要给出数组长度。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这种共享变量的声明，可以直接写在源码文件里面，也可以放在头文件中，通过<code>#include</code>指令加载。</p>\n<h2 id=\"static-说明符-1\"><a href=\"#static-说明符-1\" class=\"headerlink\" title=\"static 说明符\"></a>static 说明符</h2><p>正常情况下，当前文件内部的全局变量，可以被其他文件使用。有时候，不希望发生这种情况，而是希望某个变量只局限在当前文件内部使用，不要被其他文件引用。</p>\n<p>这时可以在声明变量的时候，使用<code>static</code>关键字，使得该变量变成当前文件的私有变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，变量<code>foo</code>只能在当前文件里面使用，其他文件不能引用。</p>\n<h2 id=\"编译策略\"><a href=\"#编译策略\" class=\"headerlink\" title=\"编译策略\"></a>编译策略</h2><p>多个源码文件的项目，编译时需要所有文件一起编译。哪怕只是修改了一行，也需要从头编译，非常耗费时间。</p>\n<p>为了节省时间，通常的做法是将编译拆分成两个步骤。第一步，使用 GCC 的<code>-c</code>参数，将每个源码文件单独编译为对象文件（object file）。第二步，将所有对象文件链接在一起，合并生成一个二进制可执行文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ gcc -c foo.c <span class=\"token comment\"># 生成 foo.o</span>\n$ gcc -c bar.c <span class=\"token comment\"># 生成 bar.o</span>\n\n<span class=\"token comment\"># 更省事的写法</span>\n$ gcc -c *.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面命令为源码文件<code>foo.c</code>和<code>bar.c</code>，分别生成对象文件<code>foo.o</code>和<code>bar.o</code>。</p>\n<p>对象文件不是可执行文件，只是编译过程中的一个阶段性产物，文件名与源码文件相同，但是后缀名变成了<code>.o</code>。</p>\n<p>得到所有的对象文件以后，再次使用<code>gcc</code>命令，将它们通过链接，合并生成一个可执行文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ gcc -o foo foo.o bar.o\n\n<span class=\"token comment\"># 更省事的写法</span>\n$ gcc -o foo *.o<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以后，修改了哪一个源文件，就将这个文件重新编译成对象文件，其他文件不用重新编译，可以继续使用原来的对象文件，最后再将所有对象文件重新链接一次就可以了。由于链接的耗时大大短于编译，这样做就节省了大量时间。</p>\n<h2 id=\"make-命令\"><a href=\"#make-命令\" class=\"headerlink\" title=\"make 命令\"></a>make 命令</h2><p>大型项目的编译，如果全部手动完成，是非常麻烦的，容易出错。一般会使用专门的自动化编译工具，比如 make。</p>\n<p>make 是一个命令行工具，使用时会自动在当前目录下搜索配置文件 makefile（也可以写成 Makefile）。该文件定义了所有的编译规则，每个编译规则对应一个编译产物。为了得到这个编译产物，它需要知道两件事。</p>\n<ul>\n<li>依赖项（生成该编译产物，需要用到哪些文件）</li>\n<li>生成命令（生成该编译产物的命令）</li>\n</ul>\n<p>比如，对象文件<code>foo.o</code>是一个编译产物，它的依赖项是<code>foo.c</code>，生成命令是<code>gcc -c foo.c</code>。对应的编译规则如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">foo<span class=\"token punctuation\">.</span>o<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">.</span>c\n  gcc <span class=\"token operator\">-</span>c foo<span class=\"token punctuation\">.</span>c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面示例中，编译规则由两行组成。第一行首先是编译产物，冒号后面是它的依赖项，第二行则是生成命令。</p>\n<p>注意，第二行的缩进必须使用 Tab 键，如果使用空格键会报错。</p>\n<p>完整的配置文件 makefile 由多个编译规则组成，可能是下面的样子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">foo<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">.</span>o bar<span class=\"token punctuation\">.</span>o\n  gcc <span class=\"token operator\">-</span>o foo foo<span class=\"token punctuation\">.</span>o bar<span class=\"token punctuation\">.</span>o\n\nfoo<span class=\"token punctuation\">.</span>o<span class=\"token operator\">:</span> bar<span class=\"token punctuation\">.</span>h foo<span class=\"token punctuation\">.</span>c\n  gcc <span class=\"token operator\">-</span>c foo<span class=\"token punctuation\">.</span>c\n\nbar<span class=\"token punctuation\">.</span>o<span class=\"token operator\">:</span> bar<span class=\"token punctuation\">.</span>h bar<span class=\"token punctuation\">.</span>c\n  gcc <span class=\"token operator\">-</span>c bar<span class=\"token punctuation\">.</span>c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面是 makefile 的一个示例文件。它包含三个编译规则，对应三个编译产物（<code>foo.o</code>、<code>bar.o</code>和<code>foo</code>），每个编译规则之间使用空行分隔。</p>\n<p>有了 makefile，编译时，只要在 make 命令后面指定编译目标（编译产物的名字），就会自动调用对应的编译规则。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> foo.o\n\n<span class=\"token comment\"># or</span>\n$ <span class=\"token function\">make</span> bar.o\n\n<span class=\"token comment\"># or</span>\n$ <span class=\"token function\">make</span> foo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，make 命令会根据不同的命令，生成不同的编译产物。</p>\n<p>如果省略了编译目标，<code>make</code>命令会执行第一条编译规则，构建相应的产物。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，<code>make</code>后面没有编译目标，所以会执行 makefile 的第一条编译规则，本例是<code>make foo</code>。由于用户期望执行<code>make</code>后得到最终的可执行文件，所以建议总是把最终可执行文件的编译规则，放在 makefile 文件的第一条。makefile 本身对编译规则没有顺序要求。</p>\n<p>make 命令的强大之处在于，它不是每次执行命令，都会进行编译，而是会检查是否有必要重新编译。具体方法是，通过检查每个源码文件的时间戳，确定在上次编译之后，哪些文件发生过变动。然后，重新编译那些受到影响的编译产物（即编译产物直接或间接依赖于那些发生变动的源码文件），不受影响的编译产物，就不会重新编译。</p>\n<p>举例来说，上次编译之后，修改了<code>foo.c</code>，没有修改<code>bar.c</code>和<code>bar.h</code>。于是，重新运行<code>make foo</code>命令时，Make 就会发现<code>bar.c</code>和<code>bar.h</code>没有变动过，因此不用重新编译<code>bar.o</code>，只需要重新编译<code>foo.o</code>。有了新的<code>foo.o</code>以后，再跟<code>bar.o</code>一起，重新编译成新的可执行文件<code>foo</code>。</p>\n<p>Make 这样设计的最大好处，就是自动处理编译过程，只重新编译变动过的文件，因此大大节省了时间。</p>\n<h1 id=\"命令行环境\"><a href=\"#命令行环境\" class=\"headerlink\" title=\"命令行环境\"></a>命令行环境</h1><h2 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h2><p>C 语言程序可以从命令行接收参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./foo hello world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面示例中，程序<code>foo</code>接收了两个命令行参数<code>hello</code>和<code>world</code>。</p>\n<p>程序内部怎么拿到命令行参数呢？C 语言会把命令行输入的内容，放在一个数组里面。<code>main()</code>函数的参数可以接收到这个数组。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arg %d: %s\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>main()</code>函数有两个参数<code>argc</code>（argument count）和<code>argv</code>（argument variable）。这两个参数的名字可以任意取，但是一般来说，约定俗成就是使用这两个词。</p>\n<p>第一个参数<code>argc</code>是命令行参数的数量，由于程序名也被计算在内，所以严格地说<code>argc</code>是参数数量 + 1。</p>\n<p>第二个参数<code>argv</code>是一个数组，保存了所有的命令行输入，它的每个成员是一个字符串指针。</p>\n<p>以<code>./foo hello world</code>为例，<code>argc</code>是3，表示命令行输入有三个组成部分：<code>./foo</code>、<code>hello</code>、<code>world</code>。数组<code>argv</code>用来获取这些输入，<code>argv[0]</code>是程序名<code>./foo</code>，<code>argv[1]</code>是<code>hello</code>，<code>argv[2]</code>是<code>world</code>。一般来说，<code>argv[1]</code>到<code>argv[argc - 1]</code>依次是命令行的所有参数。<code>argv[argc]</code>则是一个空指针 NULL。</p>\n<p>由于字符串指针可以看成是字符数组，所以下面三种写法是等价的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 写法一</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 写法二</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 写法三</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另一方面，每个命令行参数既可以写成数组形式<code>argv[i]</code>，也可以写成指针形式<code>*(argv + i)</code>。</p>\n<p>利用<code>argc</code>，可以限定函数只能有多少个参数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: mult x y\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>argc</code>不等于<code>3</code>就会报错，这样就限定了程序必须有两个参数，才能运行。</p>\n<p>另外，<code>argv</code>数组的最后一个成员是 NULL 指针（<code>argv[argc] == NULL</code>）。所以，参数的遍历也可以写成下面这样。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arg: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，指针<code>p</code>依次移动，指向<code>argv</code>的每个成员，一旦移到空指针 NULL，就表示遍历结束。由于<code>argv</code>的地址是固定的，不能执行自增运算（<code>argv++</code>），所以必须通过一个中间变量<code>p</code>，完成遍历操作。</p>\n<h2 id=\"退出状态\"><a href=\"#退出状态\" class=\"headerlink\" title=\"退出状态\"></a>退出状态</h2><p>C 语言规定，如果<code>main()</code>函数没有<code>return</code>语句，那么结束运行的时候，默认会添加一句<code>return 0</code>，即返回整数<code>0</code>。这就是为什么<code>main()</code>语句通常约定返回一个整数值，并且返回整数<code>0</code>表示程序运行成功。如果返回非零值，就表示程序运行出了问题。</p>\n<p>Bash 的环境变量<code>$?</code>可以用来读取上一个命令的返回值，从而知道是否运行成功。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ./foo hello world\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span>\n<span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>echo $?</code>用来打印环境变量<code>$?</code>的值，该值为<code>0</code>，就表示上一条命令运行成功，否则就是运行失败。</p>\n<p>注意，只有<code>main()</code>会默认添加<code>return 0</code>，其他函数都没有这个机制。</p>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>C 语言提供了<code>getenv()</code>函数（原型在<code>stdlib.h</code>）用来读取命令行环境变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> val <span class=\"token operator\">=</span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HOME\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot find the HOME environment variable\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value: %s\\n\"</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>getenv(&quot;HOME&quot;)</code>用来获取命令行的环境变量<code>$HOME</code>，如果这个变量为空（<code>NULL</code>），则程序报错返回。</p>\n<h1 id=\"多字节字符\"><a href=\"#多字节字符\" class=\"headerlink\" title=\"多字节字符\"></a>多字节字符</h1><p>本章介绍 C 语言如何处理非英语字符。</p>\n<h2 id=\"Unicode-简介\"><a href=\"#Unicode-简介\" class=\"headerlink\" title=\"Unicode 简介\"></a>Unicode 简介</h2><p>C 语言诞生时，只考虑了英语字符，使用7位的 ASCII 码表示所有字符。ASCII 码的范围是0到127，也就是100多个字符，所以<code>char</code>类型只占用一个字节，</p>\n<p>但是，如果处理非英语字符，一个字节就不够了，单单是中文，就至少有几万个字符，字符集就势必使用多个字节表示。</p>\n<p>最初，不同国家有自己的字符编码方式，这样不便于多种字符的混用。因此，后来就逐渐统一到 Unicode 编码，将所有字符放入一个字符集。</p>\n<p>Unicode 为每个字符提供一个号码，称为码点（code point），其中0到127的部分，跟 ASCII 码是重合的。通常使用“U+十六进制码点”表示一个字符，比如<code>U+0041</code>表示字母<code>A</code>。</p>\n<p>Unicode 编码目前一共包含了100多万个字符，码点范围是 U+0000 到 U+10FFFF。完整表达整个 Unicode 字符集，至少需要三个字节。但是，并不是所有文档都需要那么多字符，比如对于 ASCII 码就够用的英语文档，如果每个字符使用三个字节表示，就会比单字节表示的文件体积大出三倍。</p>\n<p>为了适应不同的使用需求，Unicode 标准委员会提供了三种不同的表示方法，表示 Unicode 码点。</p>\n<ul>\n<li>UTF-8：使用1个到4个字节，表示一个码点。不同的字符占用的字节数不一样。</li>\n<li>UTF-16：对于U+0000 到 U+FFFF 的字符（称为基本平面），使用2个字节表示一个码点。其他字符使用4个字节。</li>\n<li>UTF-32：统一使用4个字节，表示一个码点。</li>\n</ul>\n<p>其中，UTF-8 的使用最为广泛，因为对于 ASCII 字符（U+0000 到 U+007F），它只使用一个字节表示，这就跟 ASCII 的编码方式完全一样。</p>\n<p>C 语言提供了两个宏，表示当前系统支持的编码字节长度。这两个宏都定义在头文件<code>limits.h</code>。</p>\n<ul>\n<li><code>MB_LEN_MAX</code>：任意支持地区的最大字节长度，定义在<code>limits.h</code>。</li>\n<li><code>MB_CUR_MAX</code>：当前语言的最大字节长度，总是小于或等于<code>MB_LEN_MAX</code>，定义在<code>stdlib.h</code>。</li>\n</ul>\n<h2 id=\"字符的表示方法\"><a href=\"#字符的表示方法\" class=\"headerlink\" title=\"字符的表示方法\"></a>字符的表示方法</h2><p>字符表示法的本质，是将每个字符映射为一个整数，然后从编码表获得该整数对应的字符。</p>\n<p>C 语言提供了不同的写法，用来表示字符的整数号码。</p>\n<ul>\n<li><code>\\123</code>：以八进制值表示一个字符，斜杠后面需要三个数字。</li>\n<li><code>\\x4D</code>：以十六进制表示一个字符，<code>\\x</code>后面是十六进制整数。</li>\n<li><code>\\u2620</code>：以 Unicode 码点表示一个字符（不适用于 ASCII 字符），码点以十六进制表示，<code>\\u</code>后面需要4个字符。</li>\n<li><code>\\U0001243F</code>：以 Unicode 码点表示一个字符（不适用于 ASCII 字符），码点以十六进制表示，<code>\\U</code>后面需要8个字符。</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABC\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\101\\102\\103\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x41\\x42\\x43\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面三行都会输出“ABC”。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\u2022 Bullet 1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\U00002022 Bullet 1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面两行都会输出“• Bullet 1”。</p>\n<h2 id=\"多字节字符的表示\"><a href=\"#多字节字符的表示\" class=\"headerlink\" title=\"多字节字符的表示\"></a>多字节字符的表示</h2><p>C 语言预设只有基本字符，才能使用字面量表示，其它字符都应该使用码点表示，并且当前系统还必须支持该码点的编码方法。</p>\n<p>所谓基本字符，指的是所有可打印的 ASCII 字符，但是有三个字符除外：<code>@</code>、<code>$</code>、<code>`</code>。</p>\n<p>因此，遇到非英语字符，应该将其写成 Unicode 码点形式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"\\u6625\\u5929\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 春天</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码会输出中文“春天”。</p>\n<p>如果当前系统是 UTF-8 编码，可以直接用字面量表示多字节字符。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意，<code>\\u + 码点</code>和<code>\\U + 码点</code>的写法，不能用来表示 ASCII 码字符（码点小于<code>0xA0</code>的字符），只有三个字符除外：<code>0x24</code>（<code>$</code>），<code>0x40</code>（<code>@</code>）和<code>0x60</code>（<code>`</code>）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"\\u0024\\u0040\\u0060\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// @$`</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面代码会输出三个 Unicode 字符“@$`”，但是其它 ASCII 字符都不能用这种表示法表示。</p>\n<p>为了保证程序执行时，字符能够正确解读，最好将程序环境切换到本地化环境。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">set_locale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码中，使用<code>set_locale()</code>切换到执行环境切换到系统的本地化语言。<code>set_locale()</code>的原型定义在头文件<code>locale.h</code>，详见标准库部分的《locale.h》章节。</p>\n<p>像下面这样，指定编码语言也可以。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">setlocale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"zh_CN.UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面代码将程序执行环境，切换到中文环境的 UTF-8 编码。</p>\n<p>C 语言允许使用<code>u8</code>前缀，对多字节字符串指定编码方式为 UTF-8。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> u8<span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>一旦字符串里面包含多字节字符，就意味着字符串的字节数与字符数不再一一对应了。比如，字符串的长度为10字节，就不再是包含10个字符，而可能只包含7个字符、5个字符等等。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">set_locale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，字符串<code>s</code>只包含两个字符，但是<code>strlen()</code>返回的结果却是6，表示这两个字符一共占据了6个字节。</p>\n<p>C 语言的字符串函数只针对单字节字符有效，对于多字节字符都会失效，比如<code>strtok()</code>、<code>strchr()</code>、<code>strspn()</code>、<code>toupper()</code>、<code>tolower()</code>、<code>isalpha()</code>等不会得到正确结果。</p>\n<h2 id=\"宽字符\"><a href=\"#宽字符\" class=\"headerlink\" title=\"宽字符\"></a>宽字符</h2><p>上一小节的多字节字符串，每个字符的字节宽度是可变的。这种编码方式虽然使用起来方便，但是很不利于字符串处理，因此必须逐一检查每个字符占用的字节数。所以除了这种方式，C 语言还提供了确定宽度的多字节字符存储方式，称为宽字符（wide character）。</p>\n<p>所谓“宽字符”，就是每个字符占用的字节数是固定的，要么是2个字节，要么是4个字节。这样的话，就很容易快速处理。</p>\n<p>宽字符有一个单独的数据类型 wchar_t，每个宽字符都是这个类型。它属于整数类型的别名，可能是有符号的，也可能是无符号的，由当前实现决定。该类型的长度为16位（2个字节）或32位（4个字节），足以容纳当前系统的所有字符。它定义在头文件<code>wchar.h</code>里面。</p>\n<p>宽字符的字面量必须加上前缀“L”，否则 C 语言会把字面量当作窄字符类型处理。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">set_locale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwchar_t c <span class=\"token operator\">=</span> L<span class=\"token string\">'牛'</span>；\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lc\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwchar_t<span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> L<span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ls\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，前缀“L”在单引号前面，表示宽字符，对应<code>printf()</code>的占位符为<code>%lc</code>；在双引号前面，表示宽字符串，对应<code>printf()</code>的占位符为<code>%ls</code>。</p>\n<p>宽字符串的结尾也有一个空字符，不过是宽空字符，占用多个字节。</p>\n<p>处理宽字符，需要使用宽字符专用的函数，绝大部分都定义在头文件<code>wchar.h</code>。</p>\n<h2 id=\"多字节字符处理函数\"><a href=\"#多字节字符处理函数\" class=\"headerlink\" title=\"多字节字符处理函数\"></a>多字节字符处理函数</h2><h3 id=\"mblen\"><a href=\"#mblen\" class=\"headerlink\" title=\"mblen()\"></a>mblen()</h3><p><code>mblen()</code>函数返回一个多字节字符占用的字符数。它的原型定义在头文件<code>stdlib.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">mblen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> mbstr<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它接受两个参数，第一个参数是多字节字符串指针，一般会检查该字符串的第一个字符；第二个参数是需要检查的字节数，这个数字不能大于当前系统单个字符占用的最大字节，一般使用<code>MB_CUR_MAX</code>。</p>\n<p>它的返回值是该字符占用的字节数。如果当前字符是空的宽字符，则返回<code>0</code>；如果当前字符不是有效的多字节字符，则返回<code>-1</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">setlocale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> mbs1 <span class=\"token operator\">=</span> <span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mblen</span><span class=\"token punctuation\">(</span>mbs1<span class=\"token punctuation\">,</span> MB_CUR_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> mbs2 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mblen</span><span class=\"token punctuation\">(</span>mbs2<span class=\"token punctuation\">,</span> MB_CUR_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，字符串“春天”的第一个字符“春”，占用3个字节；字符串“abc”的第一个字符“a”，占用1个字节。</p>\n<h3 id=\"wctomb\"><a href=\"#wctomb\" class=\"headerlink\" title=\"wctomb()\"></a>wctomb()</h3><p><code>wctomb()</code>函数（wide character to multibyte）用于将宽字符转为多字节字符。它的原型定义在头文件<code>stdlib.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">wctomb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> wchar_t wc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>wctomb()</code>接受两个参数，第一个参数是作为目标的多字节字符数组，第二个参数是需要转换的一个宽字符。它的返回值是多字节字符存储占用的字节数量，如果无法转换，则返回<code>-1</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">setlocale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwchar_t wc <span class=\"token operator\">=</span> L<span class=\"token string\">'牛'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> mbStr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> nBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nnBytes <span class=\"token operator\">=</span> <span class=\"token function\">wctomb</span><span class=\"token punctuation\">(</span>mbStr<span class=\"token punctuation\">,</span> wc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> mbStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 牛</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> nBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>wctomb()</code>将宽字符“牛”转为多字节字符，<code>wctomb()</code>的返回值表示转换后的多字节字符占用3个字节。</p>\n<h3 id=\"mbtowc\"><a href=\"#mbtowc\" class=\"headerlink\" title=\"mbtowc()\"></a>mbtowc()</h3><p><code>mbtowc()</code>用于将多字节字符转为宽字符。它的原型定义在头文件<code>stdlib.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">mbtowc</span><span class=\"token punctuation\">(</span>\n   wchar_t<span class=\"token operator\">*</span> wchar<span class=\"token punctuation\">,</span>\n   <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> mbchar<span class=\"token punctuation\">,</span>\n   size_t count\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它接受3个参数，第一个参数是作为目标的宽字符指针，第二个参数是待转换的多字节字符指针，第三个参数是多字节字符的字节数。</p>\n<p>它的返回值是多字节字符的字节数，如果转换失败，则返回<code>-1</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">setlocale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> mbchar <span class=\"token operator\">=</span> <span class=\"token string\">\"牛\"</span><span class=\"token punctuation\">;</span>\nwchar_t wc<span class=\"token punctuation\">;</span>\nwchar_t<span class=\"token operator\">*</span> pwc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>wc<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> nBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nnBytes <span class=\"token operator\">=</span> <span class=\"token function\">mbtowc</span><span class=\"token punctuation\">(</span>pwc<span class=\"token punctuation\">,</span> mbchar<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> nBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lc\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pwc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 牛</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>mbtowc()</code>将多字节字符“牛”转为宽字符<code>wc</code>，返回值是<code>mbchar</code>占用的字节数（占用3个字节）。</p>\n<h3 id=\"wcstombs\"><a href=\"#wcstombs\" class=\"headerlink\" title=\"wcstombs()\"></a>wcstombs()</h3><p><code>wcstombs()</code>用来将宽字符串转换为多字节字符串。它的原型定义在头文件<code>stdlib.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">size_t <span class=\"token function\">wcstombs</span><span class=\"token punctuation\">(</span>\n   <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> mbstr<span class=\"token punctuation\">,</span>\n   <span class=\"token keyword\">const</span> wchar_t<span class=\"token operator\">*</span> wcstr<span class=\"token punctuation\">,</span>\n   size_t count\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它接受三个参数，第一个参数<code>mbstr</code>是目标的多字节字符串指针，第二个参数<code>wcstr</code>是待转换的宽字符串指针，第三个参数<code>count</code>是用来存储多字节字符串的最大字节数。</p>\n<p>如果转换成功，它的返回值是成功转换后的多字节字符串的字节数，不包括尾部的字符串终止符；如果转换失败，则返回<code>-1</code>。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">setlocale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span> mbs<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nwchar_t<span class=\"token operator\">*</span> wcs <span class=\"token operator\">=</span> L<span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> nBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nnBytes <span class=\"token operator\">=</span> <span class=\"token function\">wcstombs</span><span class=\"token punctuation\">(</span>mbs<span class=\"token punctuation\">,</span> wcs<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> mbs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 春天</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> nBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，<code>wcstombs()</code>将宽字符串<code>wcs</code>转为多字节字符串<code>mbs</code>，返回值<code>6</code>表示写入<code>mbs</code>的字符串占用6个字节，不包括尾部的字符串终止符。</p>\n<p>如果<code>wcstombs()</code>的第一个参数是 NULL，则返回转换成功所需要的目标字符串的字节数。</p>\n<h3 id=\"mbstowcs\"><a href=\"#mbstowcs\" class=\"headerlink\" title=\"mbstowcs()\"></a>mbstowcs()</h3><p><code>mbstowcs()</code>用来将多字节字符串转换为宽字符串。它的原型定义在头文件<code>stdlib.h</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">size_t <span class=\"token function\">mbstowcs</span><span class=\"token punctuation\">(</span>\n  wchar_t<span class=\"token operator\">*</span> wcstr<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> mbstr<span class=\"token punctuation\">,</span>\n  size_t count\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它接受三个参数，第一个参数<code>wcstr</code>是目标宽字符串，第二个参数<code>mbstr</code>是待转换的多字节字符串，第三个参数是待转换的多字节字符串的最大字符数。</p>\n<p>转换成功时，它的返回值是成功转换的多字节字符的数量；转换失败时，返回<code>-1</code>。如果返回值与第三个参数相同，那么转换后的宽字符串不是以 NULL 结尾的。</p>\n<p>下面是一个例子。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">setlocale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> mbs <span class=\"token operator\">=</span> <span class=\"token string\">\"天气不错\"</span><span class=\"token punctuation\">;</span>\nwchar_t wcs<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> nBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nnBytes <span class=\"token operator\">=</span> <span class=\"token function\">mbstowcs</span><span class=\"token punctuation\">(</span>wcs<span class=\"token punctuation\">,</span> mbs<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ls\\n\"</span><span class=\"token punctuation\">,</span> wcs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 天气不错</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> nBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面示例中，多字节字符串<code>mbs</code>被<code>mbstowcs()</code>转为宽字符串，成功转换了4个字符，所以该函数的返回值为4。</p>\n<p>如果<code>mbstowcs()</code>的第一个参数为<code>NULL</code>，则返回目标宽字符串会包含的字符数量。</p>\n","categories":["Programming","C 语言"],"tags":["Programming","C 语言"]}]